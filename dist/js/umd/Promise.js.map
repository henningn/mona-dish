{"version":3,"file":"Promise.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,MAAM,WACT,kB,uGCOA,cAKA,SAAcC,GA2DV,SAAgBC,EAAKC,GAIjB,IAFA,IAAIC,EAAK,KAAML,GADfI,EAAMA,EAAIE,QAAQ,SAAU,KACLC,OAEhBF,EAAGG,KAAKJ,EAAIK,SAAST,MAG5B,OAAOI,EAAIM,MAAM,EAAGV,EAAI,EAC5B,CAqDA,SAAgBW,EAASC,GAGrB,QAASC,UAAUN,QAAgB,MAANK,IAA4B,iBAANA,GAAkBA,aAAcE,OACvF,CAvGgB,EAAAC,YAAhB,SAA+BC,EAA2BC,QAAA,IAAAA,IAAAA,EAAA,MACtD,IACI,IAAIC,EAASF,IACb,OAAO,EAAAG,SAASC,aAAaF,QAAAA,EAAUD,E,CACzC,MAAOI,GACL,OAAO,EAAAF,SAASG,M,CAExB,EAEgB,EAAAC,gBAAhB,SAAmCP,EAA2BC,QAAA,IAAAA,IAAAA,EAAA,MAC1D,IACI,IAAIC,EAASF,IACb,OAAO,EAAAG,SAASC,aAAaF,QAAAA,EAAUD,I,CACzC,MAAOI,GACL,OAAO,EAAAF,SAASG,M,CAExB,EAQgB,EAAAE,WAAhB,SAA2BZ,EAAYa,QAAA,IAAAA,IAAAA,EAAA,QAEnC,IAAIC,EAAM,GAIV,OAHAd,EAAGe,MAAMF,GAAUG,SAAQ,SAACC,GACxBH,EAAII,KAAK3B,EAAK0B,GACjB,IACMH,CACX,EAOgB,EAAAvB,KAAI,EAkBJ,EAAA4B,WAAhB,SAA8BC,EAAUC,EAAoBC,GACxD,YADoC,IAAAD,IAAAA,EAAA,QAAoB,IAAAC,IAAAA,EAAA,IACxB,kBAA3BF,QAAAA,EAAO,iBACDE,QAAAA,EAAQ,KAITF,aAAgBG,QAAUF,IAAWC,EAAaF,EAErDE,EAAKE,OAAOD,MAAME,UAAU3B,MAAM4B,KAAKN,EAAKC,GACvD,EAQgB,EAAAM,iBAAhB,SAAiCC,EAAiBC,GAC9C,IACIC,EAAYD,QAAAA,EAAe,gBAG/B,OAJkBD,QAAAA,EAAU,iBAITG,gBAAkBD,EAAUC,aACnD,EASgB,EAAAC,WAAhB,SAA2BC,EAAYC,GACnC,OAAOnC,EAASmC,UAAkBD,GAASC,EAAUD,aAAiBC,CAC1E,EASgB,EAAAnC,SAAQ,EAMR,EAAAoC,OAAhB,SAAuBnC,GACnB,OAAOA,aAAcoC,UAA0B,mBAAPpC,CAC5C,EAIgB,EAAAqC,UAAhB,SAA0BC,G,IAAa,wDACnC,GAAc,MAAVA,EACA,MAAM,IAAIC,UAAU,8CAGxB,IAAIC,EAAKC,OAAOH,GAChB,OAASG,OAAQC,QACbC,EAAQ3B,SAAQ,SAAA4B,GAAQ,OAAMH,OAAQC,OAAOF,EAAII,EAAzB,IACjBJ,IAGXG,EAAQE,QAAO,SAAAD,GAAQ,OAAQ,MAARA,CAAA,IAAc5B,SAAQ,SAAA4B,GACzC,IAAIE,EAAaF,EACjBH,OAAOM,KAAKD,GACPD,QAAO,SAAAG,GAAW,OAAAP,OAAOhB,UAAUwB,eAAevB,KAAKoB,EAAYE,EAAjD,IAClBhC,SAAQ,SAAAgC,GAAW,OAAAR,EAAGQ,GAAWF,EAAWE,EAAzB,GAC5B,IACOR,EACX,CAGH,CAzJD,CAAc,EAAAlD,OAAA,EAAAA,KAAI,I,kmCCElB,aACA,SACA,SACO+C,EAAY,EAAA/C,KAAK+C,UA6CxB,aACI,WAAYa,GACR7D,KAAK8D,OAASD,CAClB,CAwBJ,OApBI,sBAAI,oBAAK,C,IAAT,WACI,OAAO7D,KAAK8D,MAChB,E,gCAEA,YAAAC,IAAA,SAAOC,GAKH,OAJKA,IACDA,EAAK,SAACC,GAAe,OAAGA,CAAH,GAGlB,IAAIC,EADKF,EAAGhE,KAAK6D,OAE5B,EAEA,YAAAM,QAAA,SAAWH,GAEP,IADA,IAAII,EAAqBpE,KAAK+D,IAAIC,IAC3BI,aAAM,EAANA,EAAQP,iBAAiBK,GAC5BE,EAASA,EAAOP,MAEpB,OAAOO,CACX,EAEJ,EA3BA,GAAa,EAAAF,MAAAA,EAkCb,kBAKI,WAAYL,G,OACR,YAAMA,IAAM,IAChB,CAuNJ,OA9NiC,OAS7B,sBAAI,oBAAK,C,IAAT,WACI,OAAI7D,KAAK8D,kBAAkBI,EAChBlE,KAAK8D,OAAOK,UAAUN,MAE1B7D,KAAK8D,MAChB,E,gCAEO,EAAA3C,aAAP,SAA8C0C,GAC1C,OAAW,IAAI3C,EAAS2C,EAC5B,EAGA,YAAAQ,SAAA,WACI,YAAO,IAAsBrE,KAAK6D,OAAS,MAAQ7D,KAAK6D,KAC5D,EAKA,YAAAS,UAAA,SAAUC,GACN,IAAIlD,EAASrB,KAAKqE,WAIlB,OAHKhD,GAAUkD,GACXA,EAAgBlC,KAAKrC,KAAMA,OAEvBqB,CACZ,EAEA,YAAAmD,cAAA,SAAcD,GAGV,YAHU,IAAAA,IAAAA,EAAA,WACd,GACIvE,KAAKsE,UAAUjC,KAAKrC,KAAMuE,GACnBvE,IACX,EAEA,YAAAyE,OAAA,SAAOC,GACH,OAAI1E,KAAKsE,YACEtE,KAGU,MAAb0E,EACOxD,EAASG,OAEbrB,KAAKmE,SAAQ,WAAM,OAAAO,CAAA,GAElC,EAOA,YAAAC,WAAA,SAAWC,GACP,OAAI5E,KAAKsE,YACEtE,KAEAA,KAAKmE,QAAQS,EAE5B,EAMA,YAAAT,QAAA,SAAWH,GACP,IAAIa,EAAM,YAAMV,QAAO,UAACH,GACxB,OAAMa,aAAe3D,EAIC2D,EAAIV,UAHfjD,EAASC,aAAa0D,EAAIhB,MAIzC,EAMA,YAAAiB,MAAA,W,IAAS,sDAGL,IADA,IAAIC,EAA4B/E,KACvBgF,EAAM,EAAGA,EAAMC,EAAI3E,OAAQ0E,IAAO,CACvC,IAAIE,EAAUlF,KAAKmF,OAAOF,EAAID,IAC1BI,EAASpF,KAAKqF,WAAWJ,EAAID,IAEjC,GAAgB,KAAZE,GAAkBE,GAAU,GAE5B,IADAL,EAAa/E,KAAKsF,WAAWnE,aAAe4D,EAAWlB,iBAAiB3B,MAAiB6C,EAAWlB,MAAMvD,OAAS8E,EAAS,KAAOL,EAAWlB,MAAMuB,GAAnE,OAClEf,WACX,OAAOU,OAGR,GAAIG,GAAWE,GAAU,EAAzB,CACH,GAAIL,EAAWQ,aAAaL,GAASb,WACjC,OAAOU,EAGX,IADAA,EAAcA,EAAWQ,aAAaL,GAASrB,iBAAiB3B,MAASlC,KAAKsF,WAAWnE,aAAa4D,EAAWQ,aAAaL,GAASrB,MAAMuB,IAAWpF,KAAKsF,WAAWjE,QACzJgD,WACX,OAAOU,C,KANR,CAaP,IAFIA,EAAaA,EAAWQ,aAAaL,IAE1Bb,WACX,OAAOU,EACAK,GAAU,IACjBL,EAAa/E,KAAKsF,WAAWnE,aAAa4D,EAAWlB,MAAMuB,I,EAKnE,OAFaL,CAGjB,EASA,YAAAS,MAAA,SAAMxB,GACF,OAAIhE,KAAKqE,YAGFL,EAAGhE,KAAK6D,MACnB,EASA,YAAA4B,IAAA,SAAOC,GACH,YADG,IAAAA,IAAAA,EAAkBxE,EAASG,QAC1BrB,KAAKqE,WACErE,KAAKsF,WAAWnE,aAAauE,GAAYvB,UAG7CnE,KAAKsF,WAAWnE,aAAanB,KAAK6D,OAAOM,SACpD,EAEA,YAAAwB,OAAA,WACI,OAAOC,KAAKC,UAAU7F,KAAK6D,MAC/B,EASU,YAAAyB,SAAV,WACI,OAAOpE,CACX,EAGU,YAAAmE,WAAV,SAAqBJ,GACjB,IAAIa,EAAQb,EAAIc,QAAQ,KACpBC,EAAMf,EAAIc,QAAQ,KACtB,OAAID,GAAS,GAAKE,EAAM,GAAKF,EAAQE,EAC1BC,SAAShB,EAAIiB,UAAUJ,EAAQ,EAAGE,KAEjC,CAEhB,EAGU,YAAAb,OAAV,SAAiBF,GACb,IAAIa,EAAQb,EAAIc,QAAQ,KAExB,OAAID,GAAS,EACFb,EAAIiB,UAAU,EAAGJ,GAEjBb,CAEf,EAOA,YAAAM,aAAA,SAAgBN,GACZ,OAAIjF,KAAKqE,WACErE,KAAKsF,WAAWjE,OAEpBrB,KAAKsF,WAAWnE,aAAanB,KAAK6D,MAAMoB,IAAMd,SACzD,EAcA,YAAAgC,QAAA,SAAWC,GACP,GAAIpG,KAAKqE,WACL,OAAOnD,EAASG,OAEpB,IACI,OAAOH,EAASC,aAAaiF,EAASpG,KAAK6D,O,CAC7C,MAAOzC,GACL,OAAOF,EAASG,M,CAExB,EAzNO,EAAAA,OAASH,EAASC,aAAa,MA2N1C,C,CA9NA,CAAiC+C,GAApB,EAAAhD,SAAAA,EA0Ob,kBAOI,WAAYmF,EAAeC,QAAA,IAAAA,IAAAA,EAAA,SAA3B,MACI,YAAMD,IAAS,K,OAEf,EAAKpB,IAAMqB,E,CACf,CA4CJ,OAvDsC,OAalC,sBAAI,oBAAK,C,IAAT,WACI,OAAOtG,KAAK8D,OAAY9D,KAAK8D,OAAO9D,KAAKiF,KAAO,IACpD,E,IAEA,SAAUsB,GACDvG,KAAK8D,SAGV9D,KAAK8D,OAAO9D,KAAKiF,KAAOsB,EAC5B,E,gCAEA,YAAA9B,OAAA,SAAOC,GACH,IAAI8B,EAAc,CAAC,EAEnB,OADAA,EAAYxG,KAAKiF,KAAOP,EACjB1E,KAAKsE,YAActE,KAAO,IAAIyG,EAAcD,EAAaxG,KAAKiF,IACzE,EAEA,YAAAN,WAAA,SAAWC,GACP,GAAI5E,KAAKsE,YACL,OAAOtE,KAEP,IAAIwG,EAAc,CAAC,EAEnB,OADAA,EAAYxG,KAAKiF,KAAOL,IACjB,IAAI6B,EAAcD,EAAaxG,KAAKiF,IAEnD,EASU,YAAAK,SAAV,WACI,OAAOmB,CACX,EAEO,EAAAtF,aAAP,SAA6C0C,EAAayC,GACtD,YADsD,IAAAA,IAAAA,EAAA,SACzC,IAAIG,EAAiB5C,EAAOyC,EAC7C,EAlDO,EAAAjF,OAASoF,EAActF,aAAa,MAoD/C,C,CAvDA,CAAsCD,GAAzB,EAAAuF,cAAAA,EA6Db,kBAUI,WAAYJ,EAAepB,EAAUG,GAArC,MACI,YAAMiB,EAAUpB,IAAI,K,OAEpB,EAAKG,OAASA,QAAAA,GAAW,E,CAC7B,CAqBJ,OAnC6B,OAgBzB,sBAAI,oBAAK,C,IAAT,WACI,MAAgB,IAAZpF,KAAKiF,KAAajF,KAAKoF,QAAU,EAC1BpF,KAAK8D,OAAO9D,KAAKoF,QACjBpF,KAAKiF,KAAOjF,KAAKoF,QAAU,EAC3BpF,KAAK8D,OAAO9D,KAAKiF,KAAKjF,KAAKoF,QAE/BpF,KAAK8D,OAAO9D,KAAKiF,IAC5B,E,IAEA,SAAUJ,GACU,IAAZ7E,KAAKiF,KAAajF,KAAKoF,QAAU,EACjCpF,KAAK8D,OAAO9D,KAAKoF,QAAUP,EAEpB7E,KAAKiF,KAAOjF,KAAKoF,QAAU,EAClCpF,KAAK8D,OAAO9D,KAAKiF,KAAKjF,KAAKoF,QAAUP,EAGzC7E,KAAK8D,OAAO9D,KAAKiF,KAAOJ,CAC5B,E,gCA/BO,EAAAxD,OAASqF,EAAYvF,aAAa,MAgC7C,C,CAnCA,CAA6BsF,GA2C7B,cACI,WAAYjH,G,OACR,YAAMA,IAAK,IACf,CA8OJ,OAjP4B,OASxB,sBAAI,0BAAW,C,IAAf,WACI,OAAOQ,KAAK2G,cAChB,E,gCAEU,YAAAA,aAAV,WACI,OAAO,IAAIC,EAAO,EAAAC,OAAOC,QAAQ9G,KAAK6D,OAAOkD,QAAQ,IAAI,EAAAC,qBAC7D,EAKA,sBAAI,uBAAQ,C,IAAZ,WACI,OAAOhH,KAAKiH,WAChB,E,gCAEU,YAAAA,UAAV,WACI,OAAO,IAAIL,EAAO5D,EAAU,CAAC,EAAGhD,KAAK6D,OACzC,EAMO,EAAA1C,aAAP,SAAuB0C,GACnB,OAAO,IAAI+C,EAAO/C,EACtB,EAKA,YAAAqD,aAAA,SAAaC,EAAeC,EAAkBC,GAA9C,gBAA4B,IAAAD,IAAAA,GAAA,QAAkB,IAAAC,IAAAA,GAAA,G,eACjCpC,GACL,QAAG,IAAsBA,GAAO,MAAQA,E,kBAGpCmC,GAAenC,KAAO,EAAKpB,QACtBwD,EAGGnF,MAAMoF,QAAQH,EAAMrC,MAAMG,GAAKpB,OAC/B,EAAAgD,OAAOU,GAAE,MAAT,EAAAV,OAAM,OAAOM,EAAMrC,MAAMG,GAAKpB,QAAK,IAAE2D,MAAK,SAAAjE,GAAQ,SAAKkE,OAAOxC,GAAKpB,MAAQN,CAAzB,IAElD,EAAKkE,OAAOxC,GAAKpB,MAAQsD,EAAMrC,MAAMG,GAAKpB,MAL9C,EAAKR,OAAO4B,GAAKpB,MAAQsD,EAAMrC,MAAMG,GAAKpB,M,SANtD,IAAK,IAAIoB,KAAOkC,EAAMtD,M,EAAboB,EAgBb,EAcA,YAAAwC,OAAA,W,IAAO,sDACH,IAAIC,EAASC,EAAWrH,OAAS,EACjC,IAAIoH,EAAJ,CAIA,IAAIE,EAAUD,EAAWA,EAAWrH,OAAS,GAGzCuH,GAFoB7H,KAAKmF,OAAOyC,GAEnB5H,KAAK8E,MAAK,MAAV9E,KAAI,OAAU2H,IAAU,IAAErD,aAC3CtE,KAAK8H,UAAUH,GAEf,IAAII,EAAiB/H,KAAKqF,WAAWuC,GACrC,GAAIG,GAAkB,EAClB,MAAMC,MAAM,4EAEhB,IAAInE,EAAa7D,KAAK8E,MAAK,MAAV9E,KAAI,OAAU2H,IAAU,IAAE9D,MACtC3B,MAAMoF,QAAQzD,KACfA,EAAQ7D,KAAKqD,OAAM,MAAXrD,KAAI,OAAW2H,IAAU,IAAE9D,MAAQ,CAACA,IAE5CgE,GACAhE,EAAMhC,KAAK,CAAC,GAEhBkG,EAAiBlE,EAAMvD,OAAS,EAEhC,IAAI2H,EAAS,IAAIvB,EAAiC,GAArBiB,EAAWrH,OAAcN,KAAK6D,MAAQ7D,KAAK8E,MAAMoD,MAAMlI,KAAM2H,EAAWlH,MAAM,EAAGkH,EAAWrH,OAAS,IAAIuD,MAClI+D,EAASG,GAGb,OAAOE,C,CACX,EAQA,YAAAE,SAAA,SAASC,G,IAAoB,wDACzB,OAAKA,EAGEpI,KAAKyH,OAAM,MAAXzH,KAAI,OAAW2H,IAAU,IAFrB,CAAC9D,MAAO,KAGvB,EAMA,YAAAR,OAAA,W,IAAO,sDACH,KAAIsE,EAAWrH,OAAS,GAAxB,CAIAN,KAAK8H,UAAUH,GAEf,IAAIzC,EAAUlF,KAAKmF,OAAOwC,EAAWA,EAAWrH,OAAS,IACrD8E,EAASpF,KAAKqF,WAAWsC,EAAWA,EAAWrH,OAAS,IACxD2H,EAAS,IAAIvB,EAAiC,GAArBiB,EAAWrH,OAAcN,KAAK6D,MAAQ7D,KAAK8E,MAAMoD,MAAMlI,KAAM2H,EAAWlH,MAAM,EAAGkH,EAAWrH,OAAS,IAAIuD,MAClIqB,EAASE,GAGb,OAAO6C,C,CACX,EAQA,YAAAI,SAAA,SAASD,G,IAAoB,wDACzB,OAAOA,EAAYpI,KAAKqD,OAAM,MAAXrD,KAAI,OAAW2H,IAAU,IAAI,CAAC9D,MAAO,KAC5D,EAOA,YAAAiB,MAAA,W,IAAM,sDACF,OAAO9E,KAAKsF,WAAWnE,aAAa,YAAM2D,MAAMoD,MAAMlI,KAAM2H,GAAY9D,MAC5E,EAQA,YAAA4B,IAAA,SAAIC,GACA,OAAO1F,KAAKsF,WAAWnE,aAAa,YAAMsE,IAAG,UAACC,GAAY7B,MAC9D,EAGA,YAAAyE,OAAA,SAAOrD,GAIH,OAHIA,KAAOjF,KAAK6D,cACL7D,KAAK6D,MAAMoB,GAEfjF,IACX,EAKA,YAAA2F,OAAA,WACI,OAAOC,KAAKC,UAAU7F,KAAK6D,MAC/B,EAEU,YAAAyB,SAAV,WACI,OAAOsB,CACX,EAEQ,YAAA2B,OAAR,SAAe1D,GACX7E,KAAK8D,OAASe,CAClB,EAOQ,YAAAiD,UAAR,SAAkBH,GAYd,IAXA,IAAI9C,EAAM7E,KACNwI,EAAYxI,KAAKsF,WAAWnE,aAAa,MACzCsH,GAAa,EACbC,EAAQ,SAAUC,EAAiBrI,GAGnC,IAFA,IAAIsI,EAAUD,EAAIrI,OACduI,EAAUD,EAAUtI,EACf0E,EAAM4D,EAAS5D,EAAM6D,EAAS7D,IACnC2D,EAAI9G,KAAK,CAAC,EAElB,EAESmD,EAAM,EAAGA,EAAM2C,EAAWrH,OAAQ0E,IAAO,CAC9C,IAAIE,EAAUlF,KAAKmF,OAAOwC,EAAW3C,IACjCI,EAASpF,KAAKqF,WAAWsC,EAAW3C,IAExC,GAAgB,KAAZE,GAAkBE,GAAU,EAE5BP,EAAI0D,OAAQ1D,EAAIhB,iBAAiB3B,MAAS2C,EAAIhB,MAAQ,IACtD6E,EAAM7D,EAAIhB,MAAOuB,EAAS,GACtBqD,GAAa,IACbD,EAAU3E,MAAM4E,GAAa5D,EAAIhB,OAErC2E,EAAY3D,EACZ4D,EAAYrD,EACZP,EAAM7E,KAAKsF,WAAWnE,aAAa0D,EAAIhB,MAAMuB,QATjD,CAaA,IAAI0D,EAAkBjE,EAAIC,MAAMI,GAChC,IAAe,GAAXE,EACI0D,EAAQzE,WACRyE,EAAkB9I,KAAKsF,WAAWnE,aAAa0D,EAAIhB,MAAMqB,GAAW,CAAC,GAErEL,EAAWiE,MAEZ,CACH,IAAIH,EAAOG,EAAQjF,iBAAiB3B,MAAS4G,EAAQjF,MAAQ,GAC7D6E,EAAMC,EAAKvD,EAAS,GACpBP,EAAIhB,MAAMqB,GAAWyD,EACrBG,EAAU9I,KAAKsF,WAAWnE,aAAawH,EAAIvD,G,CAE/CoD,EAAY3D,EACZ4D,EAAYrD,EACZP,EAAWiE,C,EAGf,OAAO9I,IACX,EACJ,EAjPA,CAA4BkB,GAAf,EAAA0F,OAAAA,C,inBC1ab,IAEYmC,EAFZ,UAEA,SAAYA,GACR,yBAAS,+BAAY,0BACxB,CAFD,CAAYA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KAgBzB,mBAAwBC,GACpB,IAAIC,EAAe,KACnB,OAAO,IAAIC,GAAmB,SAAChB,EAAiBiB,GAC5CF,EAAUG,YAAW,WAAM,OAAAlB,GAAA,GAASc,EACxC,IAAG,WACKC,IACAI,aAAaJ,GACbA,EAAU,KAElB,GACJ,EAEA,oBAAyBD,GACrB,IAAIC,EAAe,KACnB,OAAO,IAAIC,GAAmB,SAAChB,EAAiBiB,GAC5CF,EAAUK,aAAY,WAClBpB,GACJ,GAAGc,EACP,IAAG,WACKC,IACAM,cAAcN,GACdA,EAAU,KAElB,GACJ,EASA,iBAMI,WAAYO,GAAZ,WAJA,KAAAC,OAASV,EAAcW,QACb,KAAAC,SAAuB,GAK7B3J,KAAK6D,MAAQ2F,EACbxJ,KAAK6D,OAAM,SAAC+F,GAAc,SAAKzD,QAAQyD,EAAb,IAAoB,SAACA,GAAc,SAAKT,OAAOS,EAAZ,GACjE,CAmNJ,OAjNW,EAAAC,IAAP,W,IAAW,sDAEP,IACIC,EADAC,EAAa,EAGbC,EAAY,IAAIC,GAAQ,SAAC/B,EAAiBiB,GAC1CW,EAAU5B,CACd,IACIsB,EAAW,WACXO,IAEIG,EAAS5J,QAAUyJ,GACnBD,GAER,EACMN,EAAUW,UAAW,EAE3B,IAAK,IAAInF,EAAM,EAAGA,EAAMkF,EAAS5J,OAAQ0E,IACrCkF,EAASlF,GAAKoF,QAAQZ,GAE1B,OAAOQ,CACX,EAEO,EAAAK,KAAP,W,IAAY,sDAER,IACIP,EACAQ,EAEAN,EAAY,IAAIC,GAAQ,SAAC/B,EAAiBiB,GAC1CW,EAAU5B,EACVoC,EAAWnB,CACf,IAEIoB,EAAe,WAMf,OALMT,GACFA,IAEJA,EAAU,KACVQ,EAAW,KACJ,IACX,EACMC,EAAcJ,UAAW,EAE/B,IAAIK,EAAe,WAMf,OALMF,GACFA,IAEJA,EAAW,KACXR,EAAU,KACH,IACX,EACMU,EAAcL,UAAW,EAE/B,IAAK,IAAInF,EAAM,EAAGA,EAAMkF,EAAS5J,OAAQ0E,IACrCkF,EAASlF,GAAKyF,KAAKF,GACnBL,EAASlF,GAAK0F,MAAMF,GAExB,OAAOR,CACX,EAEO,EAAAb,OAAP,SAAcwB,GAcV,OAba,IAAIV,GAAQ,SAAC9D,EAAcgD,GAEhCwB,aAAkBV,EAClBU,EAAOF,MAAK,SAAC5F,GACTsE,EAAOtE,EACX,IAEAuE,YAAW,WACPD,EAAOwB,EACX,GAAG,EAEX,GAGJ,EAEO,EAAAxE,QAAP,SAAewE,GAYX,OAXa,IAAIV,GAAQ,SAAC9D,EAAcgD,GAEhCwB,aAAkBV,EAClBU,EAAOF,MAAK,SAAC5F,GAAQ,OAAAsB,EAAQtB,EAAR,IAErBuE,YAAW,WACPjD,EAAQwE,EACZ,GAAG,EAEX,GAGJ,EAEA,YAAAF,KAAA,SAAKG,EAAkCC,GAMnC,OALA7K,KAAK2J,SAAS9H,KAAK,CAAC,KAAQ+I,IACxBC,GACA7K,KAAK2J,SAAS9H,KAAK,CAAC,MAASgJ,IAEjC7K,KAAK8K,kBACE9K,IACX,EAEA,YAAA0K,MAAA,SAAME,GAGF,OAFA5K,KAAK2J,SAAS9H,KAAK,CAAC,MAAS+I,IAC7B5K,KAAK8K,kBACE9K,IACX,EAEA,YAAAoK,QAAA,SAAQQ,GACJ,IAAU5K,KAAM+K,WAOhB,OAFA/K,KAAK2J,SAAS9H,KAAK,CAAC,QAAW+I,IAC/B5K,KAAK8K,kBACE9K,KANGA,KAAM+K,WAAWX,QAAQQ,EAOvC,EAEU,YAAAzE,QAAV,SAAkBtB,GAEd,KAAO7E,KAAK2J,SAASrJ,QACZN,KAAK2J,SAAS,GAAGc,MADG,CAIzB,IAAIzG,EAAKhE,KAAK2J,SAASqB,QAEnBC,EAAa,EAAA/J,SAASC,aAAa6C,EAAGyG,KAAK5F,IAE/C,IAAIoG,EAAW3G,YAYX,MATA,IADAO,GADAoG,EAAaA,EAAW9G,WACPN,iBACEoG,EAMf,YAFAjK,KAAKkL,uBAAuBrG,E,CASxC7E,KAAKmL,cACLnL,KAAKyJ,OAASV,EAAcqC,UAChC,EAEU,YAAAjC,OAAV,SAAiBtE,GAEb,KAAO7E,KAAK2J,SAASrJ,SACbN,KAAK2J,SAAS,GAAGS,SADI,CAIzB,IAAIpG,EAAKhE,KAAK2J,SAASqB,QACvB,GAAIhH,EAAG0G,MAAO,CACV,IAAIO,EAAa,EAAA/J,SAASC,aAAa6C,EAAG0G,MAAM7F,IAChD,GAAIoG,EAAW3G,YAAa,CAGxB,IADAO,GADAoG,EAAaA,EAAW9G,WACPN,iBACEoG,EAGf,YADAjK,KAAKkL,uBAAuBrG,GAGhC7E,KAAKyJ,OAASV,EAAcsC,SAC5B,K,CAEA,K,EAKZrL,KAAKyJ,OAASV,EAAcsC,SAC5BrL,KAAKmL,aACT,EAEU,YAAAA,YAAV,WACI,KAAOnL,KAAK2J,SAASrJ,QAAQ,CACzB,IAAI0D,EAAKhE,KAAK2J,SAASqB,QACnBhH,EAAGoG,SACHpG,EAAGoG,S,CAGf,EAEQ,YAAAU,gBAAR,WAGI,IAFA,IAAIQ,EAAY,GACZC,EAAO,GACFvG,EAAM,EAAGA,EAAMhF,KAAK2J,SAASrJ,OAAQ0E,IAC1C,IAAK,IAAIC,KAAOjF,KAAK2J,SAAS3E,GACtBhF,KAAK2J,SAAS3E,GAAKC,GAAKkF,SACxBmB,EAAUzJ,KAAK7B,KAAK2J,SAAS3E,IAE7BuG,EAAK1J,KAAK7B,KAAK2J,SAAS3E,IAIpChF,KAAK2J,SAAW4B,EAAKpJ,OAAOmJ,EAChC,EAEQ,YAAAJ,uBAAR,SAA+BrG,GAC3B,IAAK,IAAIG,EAAM,EAAGA,EAAMhF,KAAK2J,SAASrJ,OAAQ0E,IAC1C,IAAK,IAAIC,KAAOjF,KAAK2J,SAAS3E,GAC1BH,EAAII,GAAKjF,KAAK2J,SAAS3E,GAAKC,GAGxC,EACJ,EA7NA,GAAa,EAAAgF,QAAAA,EAwOb,kBAMI,WAAYT,EAA+EgC,GAA3F,MACI,YAAMhC,IAAS,K,OAuBX,EAAAgC,YAAc,WACtB,EAvBI,EAAKA,YAAcA,E,CACvB,CAuBJ,OAhCwC,OAWpC,YAAAC,OAAA,WACIzL,KAAKyJ,OAASV,EAAcsC,SAC5BrL,KAAKmL,cAELnL,KAAK2J,SAAW,EACpB,EAEA,YAAAc,KAAA,SAAKG,EAAkCC,GACnC,OAA2B,YAAMJ,KAAI,UAACG,EAAcC,EACxD,EAEA,YAAAH,MAAA,SAAME,GACF,OAA2B,YAAMF,MAAK,UAACE,EAC3C,EAEA,YAAAR,QAAA,SAAQQ,GACJ,OAA2B,YAAMR,QAAO,UAACQ,EAC7C,EAIJ,EAhCA,CAAwCX,GAA3B,EAAAf,mBAAAA,C,i5BC5Rb,IAeYwC,EAfZ,UAeA,SAAYA,GACR,wBACA,0BACH,CAHD,CAAYA,EAAA,EAAAA,mBAAA,EAAAA,iBAAgB,KAoE5B,iBAMI,WAAY5F,EAAe6F,GACvB3L,KAAK2L,MAAQA,EACb3L,KAAK8F,MAAQA,EACb9F,KAAK6D,MAAQiC,EAAQ,CACzB,CA4BJ,OAzBI,YAAA8F,QAAA,WACI,OAAO5L,KAAK6D,MAAS7D,KAAK2L,MAAQ,CACtC,EAEA,YAAAE,KAAA,WAEI,OADA7L,KAAK6D,QACE7D,KAAK6D,OAAU7D,KAAK2L,MAAQ,EAAK3L,KAAK6D,MAAQ6H,EAAiBI,OAC1E,EAEA,YAAAC,UAAA,SAAU/G,GACN,YADM,IAAAA,IAAAA,EAAA,GACDhF,KAAK6D,MAAQmB,EAAOhF,KAAK2L,MAAQ,EAC3BD,EAAiBI,QAEjB9L,KAAK6D,MAAQmB,CAE5B,EAEA,YAAAgH,MAAA,WACIhM,KAAK6D,MAAQ7D,KAAK8F,MAAQ,CAC9B,EAEA,YAAAmG,QAAA,WAEI,OAAQjM,KAAK8F,MAAQ,EAAK4F,EAAiBQ,SAAWlM,KAAK6D,KAC/D,EACJ,EAtCA,GAAa,EAAAsI,mBAAAA,EA4Cb,iBAII,a,IAAY,sDAFZ,KAAAC,SAAW,EAGPpM,KAAK6D,MAAQA,CACjB,CAyBJ,OAvBI,YAAAkI,UAAA,SAAU/G,GACN,YADM,IAAAA,IAAAA,EAAA,GACDhF,KAAKoM,QAAUpH,EAAOhF,KAAK6D,MAAMvD,OAAS,EACpCoL,EAAiBI,QAErB9L,KAAK6D,MAAM7D,KAAKoM,QAAUpH,EACrC,EAEA,YAAA4G,QAAA,WACI,OAAO5L,KAAK6D,MAAMvD,OAAS,EAAIN,KAAKoM,OACxC,EAEA,YAAAP,KAAA,W,MAEI,OADA7L,KAAKoM,UAC2B,QAAzB,EAAApM,gBAAI,EAAJA,KAAM6D,MAAM7D,KAAKoM,gBAAQ,QAAIV,EAAiBI,OACzD,EAEA,YAAAE,MAAA,WACIhM,KAAKoM,SAAW,CACpB,EAEA,YAAAH,QAAA,WACI,OAAOjM,KAAK6D,MAAMwI,KAAKC,IAAI,EAAGtM,KAAKoM,SACvC,EACJ,EA/BA,GAAa,EAAAG,sBAAAA,EAuCb,iBAWI,WAAYC,EAA4BC,GANxC,KAAAC,SAAiChB,EAAiBQ,SAGlD,KAAAS,WAAa,CAAC,EACd,KAAAC,eAAiB,EAGb5M,KAAKwM,WAAaA,EAClBxM,KAAK6M,gBAAkBJ,CAC3B,CAoEJ,OA5DI,YAAAb,QAAA,WAKI,IAJA,IAEIC,EAFAiB,EAAQ,EACRC,GAAQ,GAGJA,IAAUlB,EAAO7L,KAAK6M,gBAAgBd,UAAUe,KAAWpB,EAAiBI,SAC5E9L,KAAKwM,WAAWX,IAChB7L,KAAK2M,WAAW3M,KAAK4M,eAAiBE,IAAS,EAC/CC,GAAQ,GAERD,IAGR,OAAOC,CACX,EAKA,YAAAlB,KAAA,WAEI,I,QADIkB,EAA8BrB,EAAiBI,QAC5C9L,KAAK6M,gBAAgBjB,WAAW,CACnC5L,KAAK4M,iBACL,IAAIf,EAAa7L,KAAK6M,gBAAgBhB,OAGtC,GAAIA,GAAQH,EAAiBI,UACe,QAAtC,EAAe,QAAf,EAAA9L,KAAK2M,kBAAU,eAAG3M,KAAK4M,uBAAe,UAAc5M,KAAKwM,WAAWX,IAAQ,CAC9E7L,KAAK2M,WAAW3M,KAAK4M,iBAAkB,EACvCG,EAAQlB,EACR,K,EAIR,OADA7L,KAAK0M,SAAWK,EACTA,CACX,EAEA,YAAAhB,UAAA,SAAU/G,G,MACFgI,OADE,IAAAhI,IAAAA,EAAA,GAGN,IAAK,IAAIiI,EAAO,EAAGjI,EAAM,IAAMgI,EAAYhN,KAAK6M,gBAAgBd,UAAUkB,KAAUvB,EAAiBI,QAASmB,IAAQ,GACrF,QAAf,EAAAjN,KAAK2M,kBAAU,eAAG3M,KAAK4M,eAAiBK,KACvCjN,KAAKwM,WAAWQ,MAC3BhI,IACAhF,KAAK2M,WAAW3M,KAAK4M,eAAiBK,IAAQ,E,CAGtD,OAAOD,CACX,EAEA,YAAAf,QAAA,WACI,OAAOjM,KAAK0M,QAChB,EAEA,YAAAV,MAAA,WACIhM,KAAK0M,SAAWhB,EAAiBQ,SACjClM,KAAK2M,WAAa,CAAC,EACnB3M,KAAK4M,eAAiB,EACtB5M,KAAK6M,gBAAgBb,OACzB,EACJ,EAlFA,GAAa,EAAAkB,yBAAAA,EAwFb,iBAKI,WAAYC,EAAmBV,GAC3BzM,KAAKmN,QAAUA,EACfnN,KAAK6M,gBAAkBJ,CAC3B,CAsBJ,OApBI,YAAAb,QAAA,WACI,OAAO5L,KAAK6M,gBAAgBjB,SAChC,EAEA,YAAAC,KAAA,WACI,OAAO7L,KAAKmN,QAAQnN,KAAK6M,gBAAgBhB,OAC7C,EAEA,YAAAG,MAAA,WACIhM,KAAK6M,gBAAgBb,OACzB,EAEA,YAAAC,QAAA,WACI,OAAOjM,KAAKmN,QAAQnN,KAAK6M,gBAAgBZ,UAC7C,EAEA,YAAAF,UAAA,SAAU/G,QAAA,IAAAA,IAAAA,EAAA,GACN,IAAMoI,EAAepN,KAAK6M,gBAAgBd,UAAU/G,GACpD,OAAQoI,GAAgB1B,EAAiBI,QAAWsB,EAAmCpN,KAAKmN,QAAQC,EACxG,EACJ,EA9BA,GAAa,EAAAC,uBAAAA,EAmCb,iBAiBI,WAAYzI,EAAuB6H,GAHnC,KAAAa,kBAAoB,GACpB,KAAAC,SAAW,EAGPvN,KAAKmN,QAAUvI,EACf5E,KAAK6M,gBAAkBJ,CAC3B,CAwGJ,OAtGI,YAAAb,QAAA,WACI,OAAO5L,KAAKwN,wBAA0BxN,KAAKyN,oBAC/C,EAEQ,YAAAD,qBAAR,WACI,IAAI3B,GAAO,EAIX,OAHI7L,KAAK0N,mBACL7B,EAAO7L,KAAK0N,iBAAiB9B,WAE1BC,CACX,EAGA,YAAAE,UAAA,SAAU/G,G,MAEN,QAFM,IAAAA,IAAAA,EAAA,IAEFhF,gBAAI,EAAJA,KAAM0N,oBAA0C,QAAtB,EAAA1N,gBAAI,EAAJA,KAAM0N,wBAAgB,eAAE3B,UAAU/G,KAAQ0G,EAAiBI,QAErF,OAAO9L,gBAAI,EAAJA,KAAM0N,iBAAiB3B,UAAU/G,GAgB5C,SAAS2I,EAAaC,GAClB,IAAIC,EAAe,EATvB,SAAsBC,GAElB,IADA,IAAI9I,EAAM,EACH8I,EAAW/B,UAAU/G,KAAS0G,EAAiBI,SAClD9G,IAEJ,OAAOA,EAAM,CACjB,CAGsC+I,CAAaH,GAAc,EAC7D5I,GAAY6I,CAChB,CAEI7N,KAAK0N,kBACLC,EAAa3N,KAAK0N,kBAOtB,IAAK,IAAIM,EAAS,GAASA,IAAU,CACjC,IAAIC,EAAiBjO,KAAK6M,gBAAgBd,UAAUiC,GAEpD,GAAIC,IAAmBvC,EAAiBI,QACpC,OAAOJ,EAAiBI,QAE5B,IAAI1H,EAASpE,KAAKmN,QAAQc,GAGtBxM,EADoBzB,KAAKkO,aAAa9J,GACd2H,UAAU/G,GACtC,GAAIvD,GAAOiK,EAAiBI,QACxB,OAAOrK,EAEXkM,EAAaM,E,CAGrB,EAEQ,YAAAC,aAAR,SAAqB9J,GACjB,IAAI+J,EAAKjM,MAAMoF,QAAQlD,GAAU,IAAImI,EAAqB,WAArBA,EAAqB,aAAInI,IAAM,KAAIA,EAExE,OADApE,KAAKsN,kBAAkBzL,KAAKsM,GACrBA,CACX,EAEQ,YAAAV,mBAAR,WAEI,IADA,IAAI5B,GAAO,GACHA,GAAQ7L,KAAK6M,gBAAgBjB,WAAW,CAC5C,IAAIxH,EAASpE,KAAKmN,QAAQnN,KAAK6M,gBAAgBhB,QAC/C7L,KAAK0N,iBAAmB1N,KAAKkO,aAAa9J,GAE1CyH,EAAO7L,KAAK0N,iBAAiB9B,S,CAEjC,OAAOC,CACX,EAEA,YAAAA,KAAA,WACI,GAAI7L,KAAK4L,UAEL,OADA5L,KAAKuN,WACEvN,KAAK0N,iBAAiB7B,MAErC,EAEA,YAAAG,MAAA,WACIhM,KAAK6M,gBAAgBb,QACrBhM,KAAKsN,kBAAkB3L,SAAQ,SAAAwM,GAAM,OAAAA,EAAGnC,OAAH,IACrChM,KAAKsN,kBAAoB,GACzBtN,KAAKuN,SAAW,EAChBvN,KAAK0N,iBAAmB,IAC5B,EAEA,YAAAzB,QAAA,WAII,OAHKjM,KAAK0N,kBACN1N,KAAK4L,UAEF5L,KAAK0N,iBAAiBzB,SACjC,EACJ,EA5HA,GAAa,EAAAmC,wBAAAA,EAkIb,8BACY,KAAAxE,KAAiB,EAS7B,QAPI,YAAA7C,QAAA,SAAQnF,GACJ5B,KAAK4J,KAAK/H,KAAKD,EACnB,EAEA,sBAAI,yBAAU,C,IAAd,WACI,OAAO5B,KAAK4J,IAChB,E,gCACJ,EAVA,GAAa,EAAAyE,eAAAA,EAeb,8BACY,KAAAzE,KAAiB,EAS7B,QAPI,YAAA7C,QAAA,SAAQnF,GACJ5B,KAAK4J,KAAK0E,QAAQ1M,EACtB,EAEA,sBAAI,yBAAU,C,IAAd,WACI,OAAO5B,KAAK4J,IAChB,E,gCACJ,EAVA,GAAa,EAAA2E,sBAAAA,EAiBb,8BACI,KAAAC,WAAqC,CAAC,CAO1C,QALI,YAAAzH,QAAA,SAAQnF,G,YACAqD,EAAkB,QAAZ,EAAArD,aAAO,EAAPA,EAAU,UAAE,QAAYA,EAClC5B,KAAKwO,WAAWvJ,GAA6B,QAAtB,EAAe,QAAf,EAAAjF,KAAKwO,kBAAU,eAAGvJ,UAAI,QAAI,GACjDjF,KAAKwO,WAAWvJ,GAAKpD,KAAiB,QAAZ,EAAAD,aAAO,EAAPA,EAAU,UAAE,SAC1C,EACJ,EARA,GAAa,EAAA6M,yBAAAA,EAcb,8BAQA,QAPI,YAAA1H,QAAA,SAAQnF,GAER,EAEA,sBAAI,yBAAU,C,IAAd,WACI,OAAO,IACX,E,gCACJ,EARA,GAAa,EAAA8M,IAAAA,EAab,8BAEI,KAAAF,WAAqC,CAAC,CAK1C,QAHI,YAAAzH,QAAA,SAAQnF,G,QACJ5B,KAAKwO,WAAqB,QAAV,EAAA5M,EAAQ,UAAE,QAAYA,GAAqB,QAAV,EAAAA,EAAQ,UAAE,QAC/D,EACJ,EAPA,GAAa,EAAAoF,oBAAAA,EAYb,8BACI,KAAAwH,WAAuB,IAAIG,QAK/B,QAHI,YAAA5H,QAAA,SAAQnF,GACJ5B,KAAKwO,WAAW/G,OAAO7F,EAAQqD,IAAKrD,EAAQiC,MAChD,EACJ,EANA,GAAa,EAAA+K,kBAAAA,EAWb,8BACI,KAAAJ,WAAuB,IAAIG,QAQ/B,QANI,YAAA5H,QAAA,SAAQnF,GACJ,IAAIiN,EAAUjN,EAAQkN,oBAClBD,EAAQvK,aACRtE,KAAKwO,WAAW/G,OAAO7F,EAAQmN,KAAKlL,MAAOgL,EAAQpJ,IAAI7D,EAAQmN,MAAMlL,MAE7E,EACJ,EATA,GAAa,EAAAmL,uBAAAA,EAcb,8BAEI,KAAAC,SAAoC,EAexC,QAbI,YAAAlI,QAAA,SAAQnF,GACJ,IAAIiN,EAAUjN,EAAQkN,oBAClBD,EAAQvK,aACRtE,KAAKiP,SAASpN,KAAK,CAACD,EAAQmN,KAAKlL,MAAOgL,EAAQpJ,IAAI7D,EAAQmN,MAAMlL,OAE1E,EAEA,sBAAI,yBAAU,C,IAAd,WACI,OAAO,EAAAgD,OAAOU,GAAE,MAAT,EAAAV,OAAM,OAAO7G,KAAKiP,WAAQ,IAC5BlL,KAAY,SAAAoB,GAAU,OAAAA,EAAO+J,KAAK,IAAZ,IACtBC,QAAO,SAACC,EAAOC,GAAU,OAACD,EAAOC,GAAOH,KAAK,IAApB,IACzBzK,OAAO,IAAIZ,KACpB,E,gCACJ,EAjBA,GAAa,EAAAyL,yBAAAA,C,inBChgBb,aACA,SAoKA,aAOI,a,IAAY,sDAJZ,KAAAC,SAAW,EAEH,KAAAC,KAAO,EAGXxP,KAAK6D,MAAQA,CACjB,CAwMJ,OAtMW,EAAA0D,GAAP,W,IAAa,sDACT,OAAO,IAAIV,EAAM,WAANA,EAAM,aAAO+C,IAAI,IAChC,EAEO,EAAA9C,QAAP,SAAkB8C,GACd,OAAO5J,KAAKuH,GAAE,MAAPvH,KAAI,OAAOoD,OAAOM,KAAKkG,KAAK,IAAE7F,KAAI,SAAAkB,GAAO,OAACA,EAAK2E,EAAK3E,GAAX,GACpD,EAEO,EAAAwK,aAAP,SAAuB7B,GAEnB,IADA,IAAI/J,EAAa,GACV+J,EAAWhC,WACd/H,EAAMhC,KAAK+L,EAAW/B,QAG1B,OAAO,IAAIhF,EAAM,WAANA,EAAM,aAAIhD,IAAK,IAC9B,EAEA,YAAA6L,OAAA,SAAO1J,GAEH,OADAhG,KAAKuP,QAAUvJ,EACRhG,IACX,EAMA,YAAAmC,OAAA,W,IAAO,sDAIH,OAAO0E,EAAOU,GAAE,MAATV,EAAM,GAAgB7G,MAAI,EAAK2P,IAAQ,IAAExL,SAAQ,SAAAZ,GAAQ,OAAAA,CAAA,GACpE,EAGA,YAAAqM,OAAA,SAAO5L,GACH,IAAK,IAAIgB,EAAM,EAAGA,EAAMhF,KAAK6D,MAAMvD,UAA4B,GAAjBN,KAAKuP,SAAiBvK,EAAMhF,KAAKuP,WAC1C,IAA7BvL,EAAGhE,KAAK6D,MAAMmB,GAAMA,GAD6DA,KAKzF,OAAOhF,IACX,EAGA,YAAAwH,KAAA,SAAKxD,GACDhE,KAAK4P,OAAO5L,GACZhE,KAAKgM,OACT,EAEA,YAAAjI,IAAA,SAAOC,GACEA,IACDA,EAAK,SAACC,GAAe,OAAGA,CAAH,GAEzB,IAAI4L,EAAW,GAKf,OAJA7P,KAAKwH,MAAK,SAACjE,GACPsM,EAAIhO,KAAKmC,EAAGT,GAChB,IAEO,IAAIsD,EAAM,WAANA,EAAM,aAAOgJ,IAAG,IAC/B,EAOA,YAAA1L,QAAA,SAA2BH,GACvB,IAAIvC,EAAM,GAKV,OAJAzB,KAAKwH,MAAK,SAAAjE,GACN,IAAIuM,EAAa9L,EAAGT,GACpB9B,EAAMS,MAAMoF,QAAQwI,GAASrO,EAAIU,OAAO2N,GAASrO,EAAIU,OAAM,MAAVV,EAAG,OAAWqO,EAAMjM,QAAK,GAC9E,IACoBgD,EAAOU,GAAE,MAATV,EAAM,OAAOpF,IAAG,GACxC,EAEA,YAAA+B,OAAA,SAAOQ,GACH,IAAI6L,EAAgB,GAMpB,OALA7P,KAAKwH,MAAK,SAACoC,GACH5F,EAAG4F,IACHiG,EAAIhO,KAAK+H,EAEjB,IACO,IAAI/C,EAAM,WAANA,EAAM,aAAOgJ,IAAG,IAC/B,EAEA,YAAAV,OAAA,SAAUnL,EAAyB+L,QAAA,IAAAA,IAAAA,EAAA,MAI/B,IAHA,IAAI/N,EAAqB,MAAZ+N,EAAmB,EAAI,EAChCC,EAA0B,MAAZD,EAAmBA,EAAW/P,KAAK6D,MAAMvD,OAASN,KAAK6D,MAAM,GAAK,KAE3EmB,EAAMhD,EAAQgD,EAAMhF,KAAK6D,MAAMvD,UAA4B,GAAjBN,KAAKuP,SAAiBvK,EAAMhF,KAAKuP,SAAUvK,IAC1FgL,EAAOhM,EAAGgM,EAAMhQ,KAAK6D,MAAMmB,IAG/B,OADAhF,KAAKgM,QACE,EAAA9K,SAASC,aAAmC6O,EACvD,EAEA,YAAAC,MAAA,WAEI,OADAjQ,KAAKgM,QACEhM,KAAK6D,OAAS7D,KAAK6D,MAAMvD,OAAS,EAAAY,SAASC,aAAanB,KAAK6D,MAAM,IAAM,EAAA3C,SAASG,MAC7F,EAEA,YAAA6O,KAAA,WAEI,IAAI5P,EAASN,KAAKuP,QAAU,EAAIlD,KAAK8D,IAAInQ,KAAKuP,QAASvP,KAAK6D,MAAMvD,QAAUN,KAAK6D,MAAMvD,OAEvF,OADAN,KAAKgM,QACE,EAAA9K,SAASC,aAAab,EAASN,KAAK6D,MAAMvD,EAAS,GAAK,KACnE,EAEA,YAAA8P,SAAA,SAASpM,GACL,IAAK,IAAIgB,EAAM,EAAGA,EAAMhF,KAAK6D,MAAMvD,UAA4B,GAAjBN,KAAKuP,SAAiBvK,EAAMhF,KAAKuP,SAAUvK,IACrF,GAAIhB,EAAGhE,KAAK6D,MAAMmB,IACd,OAAO,EAIf,OADAhF,KAAKgM,SACE,CACX,EAEA,YAAAqE,SAAA,SAASrM,GACL,IAAKhE,KAAK6D,MAAMvD,OACZ,OAAO,EAGX,IADA,IAAIgQ,EAAU,EACLtL,EAAM,EAAGA,EAAMhF,KAAK6D,MAAMvD,OAAQ0E,IACnChB,EAAGhE,KAAK6D,MAAMmB,KACdsL,IAIR,OADAtQ,KAAKgM,QACEsE,GAAWtQ,KAAK6D,MAAMvD,MACjC,EAEA,YAAAiQ,UAAA,SAAUvM,GAEN,IADA,IAAIsM,EAAU,EACLtL,EAAM,EAAGA,EAAMhF,KAAK6D,MAAMvD,OAAQ0E,IAClChB,EAAGhE,KAAK6D,MAAMmB,KACfsL,IAIR,OADAtQ,KAAKgM,QACEsE,GAAWtQ,KAAK6D,MAAMvD,MACjC,EAEA,YAAAkQ,KAAA,SAAKC,GACD,IAAIC,EAAS1Q,KAAK6D,MAAMpD,QAAQ+P,KAAKC,GACrC,OAAO5J,EAAOU,GAAE,MAATV,EAAM,OAAO6J,IAAM,GAC9B,EAGA,YAAA3J,QAAA,SAAQ4J,GAGJ,OAFA3Q,KAAKwH,MAAK,SAAAoC,GAAQ,OAAA+G,EAAU5J,QAAQ6C,EAAlB,IAClB5J,KAAKgM,QACE2E,EAAUnC,UACrB,EAGA,YAAA5C,QAAA,WACI,IAAIgF,GAAmC,GAAjB5Q,KAAKuP,SAAiBvP,KAAKwP,KAAOxP,KAAKuP,QAAU,EACnEsB,EAAe7Q,KAAKwP,KAAOxP,KAAK6D,MAAMvD,OAAS,EACnD,QAASsQ,GAAmBC,EAChC,EAEA,YAAAhF,KAAA,WACI,OAAK7L,KAAK4L,WAGV5L,KAAKwP,MACExP,KAAK6D,MAAM7D,KAAKwP,MAHZ,IAIf,EAEA,YAAAzD,UAAA,SAAU/G,GACN,YADM,IAAAA,IAAAA,EAAA,GACFhF,KAAKwP,IAAMxK,GAAQhF,KAAK6D,MAAMvD,OACvB,EAAAoL,iBAAiBI,QAErB9L,KAAK6D,MAAM7D,KAAKwP,IAAMxK,EACjC,EAGA,YAAC8L,OAAOC,UAAR,sBACI,MAAO,CACHlF,KAAM,WAGF,MAAO,CACHmF,MAHQ,EAAKpF,UAIb/H,MAHM,EAAKgI,OAKnB,EAER,EAMA,YAAAG,MAAA,WACIhM,KAAKwP,KAAO,CAChB,EACJ,EAjNA,GAAa,EAAA3I,OAAAA,EA+Ob,iBAwBI,WAAY4F,GArBZ,KAAA8C,SAAW,EAOX,KAAAC,KAAO,EAeHxP,KAAK4N,WAAanB,CAEtB,CA2MJ,OA1NW,EAAAlF,GAAP,W,IAAa,sDACT,OAAO,IAAI0J,EAAU,IAAQ,EAAA1E,sBAAqB,WAArB,EAAAA,sBAAqB,aAAI2E,IAAM,KAChE,EAEO,EAAApK,QAAP,SAAkB8C,GACd,OAAO5J,KAAKuH,GAAE,MAAPvH,KAAI,OAAOoD,OAAOM,KAAKkG,KAAK,IAAE7F,KAAI,SAAAkB,GAAO,OAACA,EAAK2E,EAAK3E,GAAX,GACpD,EAEO,EAAAkM,mBAAP,SAA6BtN,GACzB,OAAO,IAAIoN,EAAWpN,EAC1B,EAOA,YAAA+H,QAAA,WACI,OAAI5L,KAAKoR,gBAIFpR,KAAK4N,WAAWhC,SAC3B,EAEA,YAAAC,KAAA,WACI,IAAIA,EAAO7L,KAAK4N,WAAW/B,OAG3B,OADA7L,KAAKwP,MACE3D,CACX,EAEA,YAAAE,UAAA,SAAU/G,GACN,YADM,IAAAA,IAAAA,EAAA,GACChF,KAAK4N,WAAW7B,UAAU/G,EACrC,EAIA,YAAAiH,QAAA,WACI,OAAOjM,KAAK4N,WAAW3B,SAC3B,EAEA,YAAAD,MAAA,WACIhM,KAAK4N,WAAW5B,QAChBhM,KAAKwP,KAAO,EACZxP,KAAKuP,SAAW,CACpB,EAMA,YAAApN,OAAA,W,IAAO,sDAGH,OAAO8O,EAAW1J,GAAE,MAAb0J,EAAU,GAAgBjR,MAAI,EAAK2P,IAAQ,IAAExL,SAAQ,SAAAZ,GAAQ,OAAAA,CAAA,GACxE,EAEA,YAAA8N,WAAA,SAAWrN,GACP,GAAIhE,KAAK4L,UAAW,CAChB,IAAIrF,EAAYvG,KAAK6L,OACrB,OAAK7H,EAAGuC,GAGEA,EAFCvG,KAAKqR,WAAWrN,E,CAI/B,OAAO,IACX,EAEA,YAAA0L,OAAA,SAAOpD,GAEH,OADAtM,KAAKuP,QAAUjD,EACRtM,IACX,EAGA,YAAA+G,QAAA,SAAQ4J,GACJ,KAAO3Q,KAAK4L,WAAW,CACnB,IAAI0F,EAAItR,KAAK6L,OACb8E,EAAU5J,QAAWuK,E,CAGzB,OADAtR,KAAKgM,QACE2E,EAAUnC,UACrB,EAEA,YAAAoB,OAAA,SAAO5L,GAAP,WACI,OAAO,IAAIiN,EAAW,IAAI,EAAA5D,wBAAuB,SAACkE,GAI9C,OAHyB,IAArBvN,EAAGuN,EAAI,EAAK/B,MACZ,EAAKgC,OAEFD,CACX,GAAGvR,MACP,EAEA,YAAAwD,OAAA,SAAOQ,GACH,OAAsB,IAAIiN,EAAc,IAAI,EAAA/D,yBAA8BlJ,EAAIhE,MAClF,EAEA,YAAA+D,IAAA,SAAOC,GACH,OAAO,IAAIiN,EAAW,IAAI,EAAA5D,uBAAuBrJ,EAAIhE,MACzD,EAEA,YAAAmE,QAAA,SAAsBH,GAClB,OAAO,IAAIiN,EAAgB,IAAI,EAAA7C,wBAA6BpK,EAAIhE,MACpE,EAGA,YAAAwH,KAAA,SAAKxD,GACD,KAAOhE,KAAK4L,YACqB,IAAzB5H,EAAGhE,KAAK6L,SACR7L,KAAKwR,OAGbxR,KAAKgM,OACT,EAEA,YAAAmD,OAAA,SAAUnL,EAAqB+L,GAC3B,QAD2B,IAAAA,IAAAA,EAAA,OACtB/P,KAAK4L,UACN,OAAO,EAAA1K,SAASG,OAEpB,IAAIoQ,EACAC,EAAS,KACb,GAAgB,MAAZ3B,EACA0B,EAAS1B,EACT2B,EAAS1R,KAAK6L,WACX,CAEH,GADA4F,EAASzR,KAAK6L,QACT7L,KAAK4L,UACN,OAAO,EAAA1K,SAASC,aAAasQ,GAEjCC,EAAS1R,KAAK6L,M,CAGlB,IADA4F,EAASzN,EAAGyN,EAAQC,GACb1R,KAAK4L,WAER6F,EAASzN,EAAGyN,EADZC,EAAS1R,KAAK6L,QAIlB,OADA7L,KAAKgM,QACE,EAAA9K,SAASC,aAAasQ,EACjC,EAEA,YAAAvB,KAAA,WACI,OAAKlQ,KAAK4L,UAGH5L,KAAKmP,QAAO,SAACwC,EAAKC,GAAQ,OAAAA,CAAA,IAFtB,EAAA1Q,SAASG,MAGxB,EAEA,YAAA4O,MAAA,WAEI,OADAjQ,KAAKgM,QACAhM,KAAK4L,UAGH,EAAA1K,SAASC,aAAanB,KAAK6L,QAFvB,EAAA3K,SAASG,MAGxB,EAEA,YAAA+O,SAAA,SAASpM,GACL,KAAOhE,KAAK4L,WACR,GAAI5H,EAAGhE,KAAK6L,QACR,OAAO,EAGf,OAAO,CACX,EAEA,YAAAwE,SAAA,SAASrM,GACL,KAAOhE,KAAK4L,WACR,IAAK5H,EAAGhE,KAAK6L,QACT,OAAO,EAGf,OAAO,CACX,EAEA,YAAA0E,UAAA,SAAUvM,GACN,KAAOhE,KAAK4L,WACR,GAAI5H,EAAGhE,KAAK6L,QACR,OAAO,EAGf,OAAO,CACX,EAEA,YAAA2E,KAAA,SAAKC,GACD,IAAI9H,EAAM3I,KAAK+G,QAAQ,IAAI,EAAAsH,gBAE3B,OADA1F,EAAMA,EAAI6H,KAAKC,GACRQ,EAAW1J,GAAE,MAAb0J,EAAU,OAAOtI,IAAG,GAC/B,EAEA,sBAAI,oBAAK,C,IAAT,WACI,OAAO3I,KAAK+G,QAAQ,IAAI,EAAAsH,eAC5B,E,gCAEA,YAACyC,OAAOC,UAAR,sBACI,MAAO,CACHlF,KAAM,WAGF,MAAO,CACHmF,MAHQ,EAAKpF,UAIb/H,MAHM,EAAKgI,OAKnB,EAER,EAMQ,YAAA2F,KAAR,WACIxR,KAAKwP,IAAMxP,KAAKuP,QAAU,IAC1BvP,KAAKuP,QAAU,CACnB,EAEQ,YAAA6B,aAAR,WACI,OAAwB,GAAjBpR,KAAKuP,SAAiBvP,KAAKwP,KAAOxP,KAAKuP,QAAU,CAC5D,EAEJ,EAtOA,GAAa,EAAA0B,WAAAA,C,GCvaTY,EAA2B,CAAC,ECEhC,IAAIC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAavS,QAGrB,IAAIC,EAASkS,EAAyBG,GAAY,CAGjDtS,QAAS,CAAC,GAOX,OAHAyS,EAAoBH,GAAU3P,KAAK1C,EAAOD,QAASC,EAAQA,EAAOD,QAASqS,GAGpEpS,EAAOD,OACf,CCnB0BqS,CAAoB,K,SPO9C,E","sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assings an new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n\n        this.buildPath(accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambigous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(accessPath: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/*\n * Promise wrappers for timeout and interval\n */\nexport function timeout(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setTimeout(() => apply(), timeout);\n    }, () => {\n        if (handler) {\n            clearTimeout(handler);\n            handler = null;\n        }\n    });\n}\n\nexport function interval(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setInterval(() => {\n            apply();\n        }, timeout);\n    }, () => {\n        if (handler) {\n            clearInterval(handler);\n            handler = null;\n        }\n    });\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //let func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n            if (fn.catch) {\n                let funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            let fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\nimport type = Mocha.utils.type;\n\n/**\n * special status of the datasource location pointer\n * if an access, outside of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fullfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * returns the next element in the stream\n     * difference to next is, that the internal data position\n     * is not changed, so next still will deliver the next item from the current\n     * data position. Look ahead is mostly needed internally\n     * by possible endless data constructs which have no fixed data boundary, or index\n     * positions. (aka infinite sets, or flatmapped constructs)\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        //easy access trial\n        if (this?.activeDataSource && this?.activeDataSource?.lookAhead(cnt) != ITERATION_STATUS.EO_STRM) {\n            //this should coverr 95% of all accesses\n            return this?.activeDataSource.lookAhead(cnt);\n        }\n\n        /**\n         * we only can determine how many elems datasource has by going up\n         * (for now this suffices, however not ideal, we might have to introduce a numElements or so)\n         * @param datasource\n         */\n        function howManyElems(datasource: IStreamDataSource<any>): number {\n            let cnt = 1;\n            while (datasource.lookAhead(cnt) !== ITERATION_STATUS.EO_STRM) {\n                cnt++;\n            }\n            return cnt - 1;\n        }\n\n        function readjustSkip(dataSource) {\n            let skippedElems = (dataSource) ? howManyElems(dataSource) : 0;\n            cnt = cnt - skippedElems;\n        }\n\n        if (this.activeDataSource) {\n            readjustSkip(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams subsequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let currDatasource = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            if (currDatasource === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mapped = this.mapFunc(currDatasource as T);\n            //it either comes in as datasource or as array\n            let currentDataSource = this.toDatasource(mapped);\n            let ret = currentDataSource.lookAhead(cnt);\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            readjustSkip(currDatasource);\n\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            ;\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(376);\n"],"names":["root","factory","exports","module","define","amd","a","i","this","Lang","trim","str","ws","replace","length","test","charAt","slice","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","fromNullable","e","absent","saveResolveLazy","strToArray","splitter","ret","split","forEach","element","push","objToArray","obj","offset","pack","Array","concat","prototype","call","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","target","TypeError","to","Object","assign","theArgs","item","filter","nextSource","keys","nextKey","hasOwnProperty","value","_value","map","fn","inval","Monad","flatMap","mapped","isAbsent","isPresent","presentRunnable","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","currentPos","cnt","key","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","get","defaultVal","toJson","JSON","stringify","start","indexOf","end","parseInt","substring","resolve","resolver","rootElem","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","shallowCopy$","Config","Stream","ofAssoc","collect","AssocArrayCollector","deepCopy$","shallowMerge","other","overwrite","withAppend","isArray","of","each","append","noKeys","accessPath","lastKey","pathExists","buildPath","finalKeyArrPos","Error","retVal","apply","appendIf","condition","assignIf","delete","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","PromiseStatus","timeout","handler","CancellablePromise","reject","setTimeout","clearTimeout","setInterval","clearInterval","executor","status","PENDING","allFuncs","data","all","myapply","promiseCnt","myPromise","Promise","promises","__last__","finally","race","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","cancellator","cancel","ITERATION_STATUS","total","hasNext","next","EO_STRM","lookAhead","reset","current","BEF_STRM","SequenceDataSource","dataPos","Math","max","ArrayStreamDataSource","filterFunc","parent","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","found","lookupVal","loop","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","readjustSkip","dataSource","skippedElems","datasource","howManyElems","dsLoop","currDatasource","toDatasource","ds","FlatMapStreamDataSource","ArrayCollector","unshift","InverseArrayCollector","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","toMerge","encodeFormElement","name","QueryFormDataCollector","formData","join","reduce","item1","item2","QueryFormStringCollector","_limits","pos","ofDataSource","limits","toAppend","onElem","res","strmR","startVal","val1","first","last","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collector","isLimitsReached","isEndOfArray","Symbol","iterator","done","LazyStream","values","ofStreamDataSource","isOverLimits","nextFilter","t","el","stop","value1","value2","el1","el2","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}