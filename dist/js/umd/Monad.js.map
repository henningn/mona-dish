{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"names":["root","factory","exports","module","define","amd","a","i","window","Lang","trim","str","ws","replace","length","test","charAt","slice","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","fromNullable","e","absent","saveResolveLazy","strToArray","splitter","ret","split","forEach","element","push","objToArray","obj","offset","pack","Array","concat","prototype","call","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","target","TypeError","to","Object","assign","theArgs","item","filter","nextSource","keys","nextKey","hasOwnProperty","value","this","_value","map","fn","inval","Monad","flatMap","mapped","isAbsent","isPresent","presentRunnable","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","currentPos","cnt","key","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","get","defaultVal","toJson","JSON","stringify","start","indexOf","end","parseInt","substring","resolve","resolver","rootElem","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","Config","Stream","ofAssoc","collect","AssocArrayCollector","shallowMerge","other","overwrite","withAppend","isArray","of","each","append","noKeys","lastKey","pathExists","buildPath","finalKeyArrPos","Error","retVal","apply","appendIf","condition","assignIf","delete","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","total","hasNext","next","Math","min","reset","SequenceDataSource","dataPos","ArrayStreamDataSource","filterFunc","parent","filteredNext","inputDataSource","FilteredStreamDatasource","mapFunc","MappedStreamDataSource","resolveCurrentNext","resolveNextNext","activeDataSource","FlatMapStreamDataSource","data","ArrayCollector","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","toMerge","encodeFormElement","name","QueryFormDataCollector","formData","join","reduce","item1","item2","QueryFormStringCollector","_limits","pos","ofDataSource","dataSource","limits","toAppend","onElem","res","strmR","startVal","val1","first","last","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collector","isLimitsReached","isEndOfArray","LazyStream","values","ofStreamDataSource","isOverLimits","nextFilter","max","t","el","stop","value1","value2","el1","el2","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"mappings":"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","file":"Monad.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn ","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    get shallowCopy(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    get deepCopy(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param keys\n     */\n    append(...keys): IValueHolder<any> {\n        let noKeys = keys.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = keys[keys.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...keys).isPresent();\n        this.buildPath(keys);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...keys).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...keys).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    appendIf(condition: boolean, ...keys): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...keys);\n    }\n\n    assign(...keys): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    assignIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...keys) : {value: null};\n    }\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param keys a sequential array of keys containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IStream, LazyStream, Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\nimport {Optional} from \"./Monad\";\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present\n     */\n    hasNext(): boolean;\n\n    /**\n     * false if not\n     */\n    next(): T;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < this.total;\n    }\n\n    next(): number {\n        return Math.min(this.value++, this.total - 1);\n    }\n\n    reset(): void {\n        this.value = 0;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n}\n\n/**\n * an intermediate data source wich prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    filteredNext: T = null;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this.filteredNext = next;\n                return true;\n            } else {\n                this.filteredNext = null;\n            }\n        }\n        return this.filteredNext != null;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let ret = this.filteredNext;\n        this.filteredNext = null;\n        //We have to call hasNext, to roll another\n        //prefetch in case someone runs next\n        //sequentially without calling hasNext\n        this.hasNext();\n        return ret;\n    }\n\n    reset(): void {\n        this.filteredNext = null;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveCurrentNext() || this.resolveNextNext();\n    }\n\n    private resolveCurrentNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next());\n            if (Array.isArray(mapped)) {\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\n            } else {\n                this.activeDataSource = mapped;\n            }\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        return this.activeDataSource.next();\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, {[key: string]: S} > {\n    finalValue: {[key:string]: any} = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string> element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T,V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n    \n    \n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: {[key: string]: T}): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>> this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: {[key: string]: T}): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = 0;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>> this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(152);\n"],"sourceRoot":""}