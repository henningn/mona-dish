{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","this","_value","map","fn","inval","Monad","flatMap","mapped","fromNullable","Optional","isAbsent","isPresent","presentRunnable","absent","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","currentPos","cnt","length","currKey","keyVal","arrPos","arrayIndex","getClass","Array","getIfPresent","match","defaultVal","toJson","JSON","stringify","start","indexOf","end","parseInt","substring","resolve","resolver","e","rootElem","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","Config","Stream","ofAssoc","collect","AssocArrayCollector","shallowMerge","other","overwrite","assign","keys","buildPath","retVal","apply","slice","assignIf","condition","delete","setVal","parentVal","parentPos","alloc","arr","push","tempVal","_limits","pos","of","data","ofDataSource","dataSource","hasNext","next","limits","onElem","each","res","item","ret","strmR","isArray","concat","filter","reduce","startVal","offset","val1","first","last","Math","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collector","finalValue","isLimitsReached","isEndOfArray","reset","parent","LazyStream","ArrayStreamDataSource","values","ofStreamDataSource","isOverLimits","nextFilter","max","MappedStreamDataSource","el","stop","FilteredStreamDatasource","FlatMapStreamDataSource","value1","value2","el1","el2","ArrayCollector","dataPos","filterFunc","filteredNext","inputDataSource","mapFunc","resolveCurrentNext","resolveNextNext","activeDataSource","element","FormData","append","FormDataCollector","toMerge","encodeFormElement","QueryFormDataCollector","formData","join","item1","item2","QueryFormStringCollector","Lang","trim","str","ws","replace","test","charAt","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","saveResolveLazy","strToArray","splitter","split","forEach","objToArray","obj","pack","equalsIgnoreCase","source","destination","finalDest","toLowerCase","timeout","handler","CancellablePromise","reject","setTimeout","clearTimeout","interval","setInterval","clearInterval","assertType","probe","theType","isFunc","Function","PromiseStatus","executor","status","PENDING","allFuncs","all","myapply","promiseCnt","myPromise","Promise","promises","__last__","finally","race","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","cancellator","cancel","getAttribute","setAttribute","ElementAttribute","DEFAULT_JSF_WHITELIST","src","rootNode","foundElement","DomQuery","querySelectorAll","getAsElem","allElems","isTag","tagName","nodeName","checked","newChecked","eachElem","stream","formElement","elements","DomQueryCollector","attr","disabled","removeAttribute","childNodeArr","childNodes","asArray","selector","document","byId","byTagName","globalEval","code","nonce","fromMarkup","markup","domParser","DOMParser","parseFromString","doc","implementation","createHTMLDocument","lowerMarkup","includes","documentElement","innerHTML","body","index","defaults","node","parentNode","removeChild","nodes","id","includeRoot","hasClass","clazz","hasIt","oldClass","oldClasses","found","addClass","removeClass","newClasses","isMultipartCandidate","firstElem","html","innerHtml","retArr","elem","inVal","_mozMatchesSelector","toMatch","prot","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","ownerDocument","filterSelector","matched","selectorStage","nodeSelector","len","reArr","head","getElementsByTagName","script","createElement","type","newScriptElement","appendChild","detach","appendTo","theItem","loadScriptEval","defer","charSet","xhr","XMLHttpRequest","open","setRequestHeader","send","onload","responseData","responseText","onerror","Error","insertAfter","existingItem","existingElement","nextSibling","toInsertParams","insertElem","insertBefore","parents","retSet","Set","lowerTagName","resolveItem","has","add","copyAttrs","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","attrName","outerHTML","runEmbeddedScripts","runEmbeddedCss","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","runScripts","runCss","whilteListed","finalScripts","equi","execScrpt","itemType","evalText","text","innerText","go","scriptElements","console","error","message","description","applyStyle","style","newSS","styleSheet","sheet","cssText","createTextNode","execCss","click","fireEvent","addEventListener","listener","options","removeEventListener","eventName","nodeType","dispatchEvent","eventClass","createEvent","initEvent","synthetic","event","createEventObject","textContent","joinstr","text1","text2","target","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","files","inputValue","reduced","subNodes","from","to","DQ"],"mappings":"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","file":"DomQuery.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n\n\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<T>(value?: T): Optional<T> {\n        return new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if(this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch(e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent =  ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if(!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<T>(value?: any, valueKey: string = \"value\"): ValueEmbedder<T> {\n        return new ValueEmbedder(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos =  arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    get shallowCopy(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true) {\n        for (let key in other.value) {\n            if (overwrite && key in this.value) {\n                this.assign(key).value = other.getIf(key).value;\n            } else if (!(key in this.value)) {\n                this.assign(key).value = other.getIf(key).value;\n            }\n        }\n    }\n\n    assign(...keys): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    assignIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...keys) : {value: null};\n    }\n\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            if (arr.length < length) {\n                for (let cnt = arr.length; cnt < length; cnt++) {\n                    arr.push({});\n                }\n            }\n        };\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T> = (val1: T, val2: T) => T;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce(fn: Reducable<T>, startVal: T): Optional<T>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: {[key: string]: T}): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce(fn: Reducable<T>, startVal: T = null): Optional<T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1 = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: {[key: string]: T}): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = 0;\n        this._limits = -1;\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce(fn: Reducable<T>, startVal: T = null): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present\n     */\n    hasNext(): boolean;\n\n    /**\n     * false if not\n     */\n    next(): T;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n}\n\n/**\n * an intermediate data source wich prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    filteredNext: T = null;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this.filteredNext = next;\n                return true;\n            } else {\n                this.filteredNext = null;\n            }\n        }\n        return this.filteredNext != null;\n\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let ret = this.filteredNext;\n        this.filteredNext = null;\n        //We have to call hasNext, to roll another\n        //prefetch in case someone runs next\n        //sequentially without calling hasNext\n        this.hasNext();\n        return ret;\n    }\n\n    reset(): void {\n        this.filteredNext = null;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveCurrentNext() || this.resolveNextNext();\n    }\n\n    private resolveCurrentNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped =  this.mapFunc(this.inputDataSource.next());\n            if(Array.isArray(mapped)) {\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\n            } else {\n                this.activeDataSource = mapped;\n            }\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        return this.activeDataSource.next();\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, {[key:string]:S}> {\n\n    finalValue: {[key:string]:any} = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CancellablePromise} from \"./Promise\";\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if (\"undefined\" == typeof obj || null == obj) {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n    /*\n     * Promise wrappers for timeout and interval\n     */\n    export function timeout(timeout: number): CancellablePromise {\n        let handler: any = null;\n        return new CancellablePromise((apply: Function, reject: Function) => {\n            handler = setTimeout(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearTimeout(handler);\n                handler = null;\n            }\n        });\n    }\n\n    export function interval(timeout: number): CancellablePromise {\n        let handler: any = null;\n        return new CancellablePromise((apply: Function, reject: Function) => {\n            handler = setInterval(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearInterval(handler);\n                handler = null;\n            }\n        });\n    }\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n}\n\n","import {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //var func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            var fn = this.allFuncs.shift();\n            if (fn.catch) {\n                var funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            var fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (var cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {ICollector, IStreamDataSource} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\nimport objToArray = Lang.objToArray;\nimport isString = Lang.isString;\nimport equalsIgnoreCase = Lang.equalsIgnoreCase;\n\n// @ts-ignore supression needed here due to fromnullable\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @param src\n * @constructor\n */\nconst DEFAULT_JSF_WHITELIST = (src: string) => {\n    return (src.indexOf(\"ln=scripts\") == -1 &&\n        src.indexOf(\"ln=javax.faces\") == -1) ||\n        (src.indexOf(\"/jsf.js\") == -1 &&\n            src.indexOf(\"/jsf-uncompressed.js\") == -1);\n};\n\ninterface IDomQuery {\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The the value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n    /**\n     * the underlying form elements as domquery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded (highest level)\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string>;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery): void;\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the domquery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n    /**\n     * all parents with TagName\n     * @param tagName\n     */\n    parents(tagName: string): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another domquery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinstr?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinstr?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the subnodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery> {\n\n    static absent = new DomQuery();\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else if (isString(rootNode[cnt])) {\n                    let result = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    this.rootNode.push(...result.values);\n\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ValueEmbedder<string>(this.getAsElem(0).value, \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder<string>(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        let elements: DomQuery = this.stream.flatMap((item: DomQuery) => {\n            let formElement: HTMLFormElement = <HTMLFormElement>item.value.value;\n            return new Stream(formElement.elements ? objToArray(formElement.elements) : []);\n        }).filter(item => !!item).collect(new DomQueryCollector());\n\n        return elements\n            .orElseLazy(() => this.querySelectorAll(\"input, select, textarea, fieldset\"));\n    }\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.ofStreamDataSource(this);\n    }\n\n    get asArray(): Array<DomQuery> {\n        let ret: Array<DomQuery> = [];\n        this.each((item) => {\n            ret.push(item);\n        });\n        return ret;\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        return new DomQuery(document).querySelectorAll(selector);\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byId(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n        let domParser: DOMParser = Lang.saveResolve(() => new DOMParser()).value;\n        if (domParser) {\n            let document = domParser.parseFromString(markup, \"text/html\");\n            return new DomQuery(document);\n        } else {\n            //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n            const doc = document.implementation.createHTMLDocument(\"\");\n            markup = trim(markup);\n            let lowerMarkup = markup.toLowerCase();\n            if (lowerMarkup.includes('<!doctype') ||\n                lowerMarkup.includes('<html') ||\n                lowerMarkup.includes('<head') || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\n                lowerMarkup.includes('<body')) {\n                doc.documentElement.innerHTML = markup;\n                return new DomQuery(doc.documentElement);\n            } else {\n                doc.body.innerHTML = markup;\n                return new DomQuery(...<Array<Element>>objToArray(doc.body.childNodes));\n            }\n        }\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery {\n        if (this.rootNode.length == 0) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt].querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        for (let cnt = 0; includeRoot && cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].id == id) {\n                res.push(new DomQuery(this.rootNode[cnt]));\n            }\n        }\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery {\n        let res = [];\n        for (let cnt = 0; includeRoot && cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].tagName == tagName) {\n                res.push(new DomQuery(this.rootNode[cnt]));\n            }\n        }\n        res = res.concat(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n\n        this.each((item) => {\n            let oldClass = item.attr(\"class\").value || \"\";\n            if (oldClass.toLowerCase().indexOf(clazz.toLowerCase()) == -1) {\n                return;\n            } else {\n                let oldClasses = oldClass.split(/\\s+/gi);\n                let found = false;\n                for (let cnt = 0; cnt < oldClasses.length && !found; cnt++) {\n                    found = oldClasses[cnt].toLowerCase() == clazz.toLowerCase();\n                }\n                hasIt = hasIt || found;\n                if (hasIt) {\n                    return false;\n                }\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.each((item) => {\n            let oldClass = item.attr(\"class\").value || \"\";\n            if (!this.hasClass(clazz)) {\n                item.attr(\"class\").value = trim(oldClass + \" \" + clazz);\n                return;\n            }\n        });\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.each((item) => {\n            if (this.hasClass(clazz)) {\n                let oldClass = item.attr(\"class\").value || \"\";\n                let newClasses = [];\n                let oldClasses = oldClass.split(/\\s+/gi);\n                for (let cnt = 0; cnt < oldClasses.length; cnt++) {\n                    if (oldClasses[cnt].toLowerCase() != clazz.toLowerCase()) {\n                        newClasses.push(oldClasses[cnt]);\n                    }\n                }\n                item.attr(\"class\").value = newClasses.join(\" \");\n            }\n        });\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean {\n        return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\n    }\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHtml) : Optional.absent;\n        }\n        this.innerHtml = inval;\n\n        return this;\n    }\n\n    set innerHtml(inVal: string) {\n        this.eachElem(elem => elem.innerHTML = inVal);\n    }\n\n    get innerHtml(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || (<any>window).ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    matchesSelector(selector: string): boolean {\n        this.eachElem(item => {\n            if (!this._mozMatchesSelector(item, selector)) {\n                return false;\n            }\n        });\n        return true;\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.get(cnt), cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery) {\n        this.eachElem((item) => {\n            let value1: Element = <Element>elem.getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: (theItem: any) => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string = \"utf-8\") {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.send(null);\n\n        xhr.onload = (responseData: any) => {\n            //defer also means we have to process after the ajax response\n            //has been processed\n            //we can achieve that with a small timeout, the timeout\n            //triggers after the processing is done!\n            if (!defer) {\n                this.globalEval(xhr.responseText.replace(\"\\n\", \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n            } else {\n                //TODO not ideal we maybe ought to move to something else here\n                //but since it is not in use yet, it is ok\n                setTimeout(() => {\n                    this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                }, defer);\n            }\n        };\n\n        xhr.onerror = (data: any) => {\n            throw Error(data);\n        };\n        //since we are synchronous we do it after not with onReadyStateChange\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        let processed = [];\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        const retSet: Set<Element> = new Set();\n        const retArr: Array<Element> = [];\n        const lowerTagName = tagName.toLowerCase();\n\n        let resolveItem = (item: Element) => {\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName && !retSet.has(item)) {\n                retSet.add(item);\n                retArr.push(item);\n            }\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode) {\n                item = <Element>item.parentNode;\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attr\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery {\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n\n        let insertAdditionalItems = [];\n\n        for (let cnt = 1; cnt < nodes.length; cnt++) {\n            insertAdditionalItems.push(nodes.get(cnt));\n            this.rootNode.push(nodes.get(cnt).getAsElem(0).value);\n        }\n\n        res.push(DomQuery.byId(replaced).insertAfter(...insertAdditionalItems));\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean = DEFAULT_JSF_WHITELIST): DomQuery {\n        let finalScripts = [],\n            equi = equalsIgnoreCase,\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && equi(tagName, \"script\") &&\n                    (itemType === \"\" || equi(itemType, \"text/javascript\") ||\n                        equi(itemType, \"javascript\") ||\n                        equi(itemType, \"text/ecmascript\") ||\n                        equi(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            if (finalScripts.length) {\n                                //script source means we have to eval the existing\n                                //scripts before running the include\n                                this.globalEval(finalScripts.join(\"\\n\"));\n\n                                finalScripts = [];\n                            }\n                            this.loadScriptEval(src, 0, \"UTF-8\");\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        //TODO this probably needs to be changed due to our new parsing structures\n                        //probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push(evalText);\n\n                    }\n                }\n            };\n        try {\n            let scriptElements = this.querySelectorAll(\"script\");\n            if (scriptElements == null) return;\n            for (let cnt = 0; cnt < scriptElements.length; cnt++) {\n                execScrpt(scriptElements.getAsElem(cnt).value);\n            }\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        } catch (e) {\n            if (window.console && window.console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const  applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet =  newSS.sheet ?? (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") ?? \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") ?? \"text/css\");\n\n                if (styleSheet?.cssText ?? false) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n            },\n\n            execCss = (item: Element) => {\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: NodeList = item.childNodes;\n                    if (childNodes) {\n                        const len = childNodes.length;\n                        for (let cnt = 0; cnt < len; cnt++) {\n                            innerText.push((<Element>childNodes[cnt]).innerHTML || (<CharacterData>childNodes[cnt]).data);\n                        }\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = this.querySelectorAll(\"link, style\");\n        if (scriptElements == null) return;\n        for (let cnt = 0; cnt < scriptElements.length; cnt++) {\n            let element: any = scriptElements.getAsElem(cnt);\n            execCss(element.value);\n        }\n\n        return this;\n    }\n\n\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => {\n            node.addEventListener(type, listener, options);\n        });\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => {\n            node.removeEventListener(type, listener, options);\n        });\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            var doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                var eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                var event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinstr), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {//no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.assign(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if ((tagName != \"select\" && elemType != \"button\"\n                    && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n                    && ((elemType != \"checkbox\" && elemType != \"radio\") || element.checked)) {\n                    let files: any = (<any>element.value).files;\n                    if (files && files.length) {\n                        //xhr level2\n                        target.assign(name).value = files[0];\n                    } else {\n                        target.assign(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n\n    }\n\n    get cDATAAsString(): string {\n        let cDataBlock = [];\n        // response may contain several blocks\n        return this.stream\n            .flatMap(item => item.childNodes.stream).reduce((reduced: Array<any>, item: DomQuery) => {\n                reduced.push((<any>item?.value?.value)?.data ?? \"\");\n                return reduced;\n            }, []).value.join(\"\");\n\n    }\n\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n"],"sourceRoot":""}