{"version":3,"file":"Messaging.js","mappings":"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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Messaging.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///external umd \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"rxjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"rxjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"rxjs\")) : factory(root[\"rxjs\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__832__) {\nreturn ","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/**\n * a standardized message to be sent over the message bus\n */\nimport {Observable, Subject} from \"rxjs\";\nimport {Stream} from \"./Stream\";\n\n/**\n * generic crypto interface\n * to encrypt messages before they are sent\n * to the message bus oder the underlying bus system\n *\n * The idea is to make it as easy as possible, you can use for instance crypto js to\n * handle everything\n */\nexport interface Crypto {\n    /**\n     * note anything can be passed\n     *\n     * @param data the data to be encrypted\n     * @returns the encrypted data in any format, important is decode must be able to handle it\n     */\n    encode(data: any): any;\n\n    /**\n     * @param data the encrypted data in the format you expect it to be\n     * @returns the unencrypted data\n     */\n    decode(data: any): any;\n}\n\n\n/**\n * generic hash interface which provides\n * exactly one method a hash encode which returns a string hash value of encoded data\n */\nexport interface Hash {\n    encode(encodedData: string): string;\n}\n\n/**\n * Default implementation = no encryption\n */\nexport class NoCrypto implements Crypto {\n    decode(data: any): string {\n        return data;\n    }\n\n    encode(data: any): any {\n        return data;\n    }\n}\n\n//TODO dynamic encryptor which flushes the messages before changing the keys\n//that way we can rotate and change internal crypto keys on the fly\n\nlet noEncryption = new NoCrypto();\n\nexport class Message {\n\n    creationDate?: number;\n    identifier?: string;\n    targetOrigin?: string;\n    encoded: boolean = false;\n\n    constructor(public message: any = {}, targetOrigin = \"*\") {\n        this.targetOrigin = targetOrigin;\n        this.creationDate = new Date().getMilliseconds();\n        this.identifier = new Date().getMilliseconds() + \"_\" + Math.random() + \"_\" + Math.random();\n    }\n}\n\n/**\n * custom dom event wrapping our messages\n */\nclass MessageWrapper implements CustomEventInit<Message> {\n\n    detail?: Message;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n    channel: string;\n\n    constructor(channel: string, message: Message) {\n        this.detail = message;\n        this.bubbles = true;\n        this.cancelable = true;\n        this.composed = true;\n        this.channel = channel;\n    }\n}\n\n\nabstract class BaseBroker {\n\n    static readonly EVENT_TYPE = \"brokerEvent\";\n    /**\n     * we can split the listeners with the system\n     * namespace... and type (aka identifier criteria)\n     */\n    protected messageListeners: any = {};\n    protected subjects: any = {};\n    protected processedMessages: any = {};\n\n    protected cleanupCnt = 0;\n    protected rootElem;\n    protected msgHandler;\n\n    protected readonly TIMEOUT_IN_MS = 1000;\n    protected readonly MSG_EVENT = \"message\";\n\n    //must be public because we also must have the option\n    //to set it outside of the constructor\n    crypto = noEncryption;\n\n\n    abstract register(scopeElement?: any): BaseBroker;\n\n    abstract unregister(): BaseBroker;\n\n    abstract broadcast(channel: string, message: Message | string): BaseBroker;\n\n\n    /**\n     * registers a listener on a channel\n     * @param channel the channel to register the listeners for\n     * @param listener the listener to register\n     */\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.reserveListenerNS(channel);\n\n        //we skip the processed messages, because they originated here\n        //and already are processed\n        this.messageListeners[channel].push((msg: Message) => {\n            if (msg.identifier in this.processedMessages) {\n                return;\n            }\n            if (msg?.encoded || msg?.[\"detail\"]?.encoded) {\n                if (msg?.[\"detail\"]) {\n                    msg[\"detail\"].message = this.crypto.decode(msg[\"detail\"].message);\n                    msg[\"detail\"].encoded = false;\n                } else {\n                    msg.message = this.crypto.decode(msg.message);\n                    msg.encoded = false;\n                }\n\n            }\n            listener(msg);\n        });\n        return this;\n    }\n\n    /**\n     * binding into rxjs\n     * produces a subject which can be used via next calls to send messages\n     * on the other hand we\n     * @param channel\n     */\n    asSubject(channel: string): Subject<Message> {\n        this.reserveSubjectNS(channel);\n        let subject = this.subjects[channel];\n        let oldNext = subject.next;\n\n        subject.next = (msg: Message | MessageWrapper) => {\n            //We use a recursive call to let the broadcaster handle\n            //The wrapper conversion and then again call us here\n            //that way both directions are handled.. next calls the broker\n            //and a broadcast calls next\n            if ((<MessageWrapper>msg)?.detail) {\n                oldNext.call(subject, (<MessageWrapper>msg)?.detail);\n            } else {\n                this.broadcast(channel, <Message>msg);\n            }\n        }\n        return subject;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * returns an observable on the baseBroker\n     * @param channel\n     */\n    asObservable(channel: string): Observable<Message> {\n        return this.asSubject(channel).asObservable();\n    }\n\n    /**\n     * reserves the listener namespace and wildcard namespace for the given identifier\n     * @param identifier\n     * @private\n     */\n    private reserveListenerNS(identifier: string) {\n        if (!this.messageListeners[identifier]) {\n            this.messageListeners[identifier] = [];\n        }\n        if (!this.messageListeners[\"*\"]) {\n            this.messageListeners[\"*\"] = [];\n        }\n    }\n\n    private reserveSubjectNS(identifier: string) {\n        if (!this.subjects[identifier]) {\n            this.subjects[identifier] = new Subject();\n        }\n        if (!this.subjects[\"*\"]) {\n            this.subjects[\"*\"] = new Subject();\n        }\n    }\n\n    /**\n     * unregisters a listener from this channel\n     *\n     * @param channel the channel to unregister from\n     * @param listener the listener to unregister the channel from\n     */\n    unregisterListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.messageListeners[channel] = (this.messageListeners[channel] || []).filter((item: any) => item !== listener);\n        return this;\n    }\n\n    /**\n     * answers a bidirectional message received\n     * usage, the client can use this method, to answer an incoming message in a precise manner\n     * so that the caller sending the bidirectional message knows how to deal with it\n     * this mechanism can be used for global storages where we have one answering entity per channel delivering the\n     * requested data, the request can be done asynchronously via promises waiting for answers\n     *\n     * @param channel the channel the originating message\n     * @param request the requesting message\n     * @param answer the answer to the request\n     */\n    answer(channel: string, request: Message | string, answer: Message): BaseBroker {\n        if ('string' == typeof request) {\n            request = new Message(request);\n        }\n\n        if (BaseBroker.isAnswer(request)) {\n            return;\n        }\n        answer.identifier = BaseBroker.getAnswerId(request);\n        this.broadcast(channel, answer);\n        return this;\n    }\n\n    private static getAnswerId(request: Message) {\n        return \"_r_\" + request.identifier;\n    }\n\n    private static isAnswer(request: Message) {\n        return request.identifier.indexOf(\"_r_\") == 0;\n    }\n\n    /**\n     * idea... a bidirectional broadcast\n     * sends a message and waits for the first answer coming in from one of the receivers\n     * sending the message back with a messageIdentifier_broadCastId answer\n     *\n     * @param channel\n     * @param message\n     */\n    request(channel: string, message: Message | string): Promise<Message> {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        let messageId = message.identifier;\n\n        let ret = new Promise<Message>((resolve, reject) => {\n            let timeout = null;\n            let listener = (message2: Message) => {\n                if (message2.identifier == messageId) {\n                    //broadcast from same source, we do not want\n                    //to deal with it now\n                    return;\n                }\n\n                if (message2.identifier == \"_r_\" + messageId) {\n                    clearTimeout(timeout);\n                    this.unregisterListener(channel, listener);\n                    resolve(message2);\n                }\n            }\n            timeout = setTimeout(() => {\n                this.unregisterListener(channel, listener);\n                reject(\"request message performed, timeout, no return value\");\n            }, 3000);\n            this.registerListener(channel, listener);\n\n        });\n        this.broadcast(channel, message);\n        return ret;\n    }\n\n\n    /**\n     * garbage collects the processed messages queue\n     * usually after one second\n     */\n    protected gcProcessedMessages() {\n        if ((++this.cleanupCnt) % 10 != 0) {\n            return;\n        }\n        let newProcessedMessages: any = {};\n        Object.keys(this.processedMessages).forEach(key => {\n            if (this.messageStillActive(key)) return;\n            newProcessedMessages[key] = this.processedMessages[key];\n        });\n        this.processedMessages = newProcessedMessages;\n    }\n\n    private messageStillActive(key: string): boolean {\n        return this.processedMessages[key] > ((new Date()).getMilliseconds() - this.TIMEOUT_IN_MS);\n    }\n\n    protected markMessageAsProcessed(message: Message) {\n        this.processedMessages[message.identifier] = message.creationDate;\n    }\n}\n\nlet broadCastChannelBrokerGenerator = (name) => {\n    if (window?.BroadcastChannel) {\n        return new window.BroadcastChannel(name);\n    }\n    throw Error(\"No Broadcast channel in the system, use a shim or provide a factory function\" +\n        \"in the constructor\");\n};\n\nconst DEFAULT_CHANNEL_GROUP = \"brokr\";\n\n/**\n * a broker which hooks into the Broadcast Channel broker\n * either via shim or substitute lib\n */\nexport class BroadcastChannelBroker extends BaseBroker {\n    private openChannels: [{ key: string }, BroadcastChannel] = <any>{};\n    private readonly msgListener: Function;\n\n\n    /**\n     * @param brokerFactory a factory generating a broker\n     * @param channelGroup a group to combine a set of channels\n     * @param crypto a crypto class\n     */\n    constructor(private brokerFactory: Function = broadCastChannelBrokerGenerator, private channelGroup = DEFAULT_CHANNEL_GROUP, public crypto: Crypto = noEncryption) {\n        super();\n        this.msgListener = (messageData: MessageWrapper) => {\n            if (messageData.detail.encoded) {\n                messageData.detail.message = <any>this.crypto.decode(messageData.detail.message);\n                messageData.detail.encoded = false;\n            }\n            let coreMessage = messageData.detail;\n            let channel: string = messageData.channel;\n\n            if (this.messageListeners?.[channel]) {\n                this.messageListeners?.[channel].forEach(listener => {\n                    listener(coreMessage);\n                })\n            }\n            this.markMessageAsProcessed(coreMessage);\n            return true;\n        }\n        this.crypto = crypto;\n        this.register();\n    }\n\n    broadcast(channel: string, message: Message | string, includeOrigin = true): BaseBroker {\n        try {\n            if ('string' == typeof message) {\n                message = new Message(message);\n            }\n            //we now run a quick remapping to avoid\n            //serialisation errors\n            let msgString = JSON.stringify(<Message>message);\n            message = <Message>JSON.parse(msgString);\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n            messageWrapper.detail.encoded = true;\n\n            if (this?.subjects[channel]) {\n                this.subjects[channel].next(messageWrapper);\n            }\n\n            this.openChannels[this.channelGroup].postMessage(messageWrapper);\n            if (includeOrigin) {\n                this.msgListener(messageWrapper);\n            }\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        super.registerListener(channel, listener);\n        return <BaseBroker>this;\n    }\n\n    register(): BaseBroker {\n        if (!this.openChannels[this.channelGroup]) {\n            this.openChannels[this.channelGroup] = this.brokerFactory(this.channelGroup);\n        }\n        this.openChannels[this.channelGroup].addEventListener(\"message\", this.msgListener);\n        return <BaseBroker>this;\n    }\n\n    unregister(): BaseBroker {\n        this.openChannels[this.channelGroup].close();\n        return <BaseBroker>this;\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a broadcast channel broker\n */\nexport class BroadcastChannelBrokerBuilder {\n    private broadCastChannelGenerator: Function = broadCastChannelBrokerGenerator;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withGeneratorFunc(generatorFunc: Function): BroadcastChannelBrokerBuilder {\n        this.broadCastChannelGenerator = generatorFunc;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BroadcastChannelBrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n    withChannelGroup(channelGroup: string): BroadcastChannelBrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BroadcastChannelBrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): BroadcastChannelBroker {\n        let broker = new BroadcastChannelBroker(this.broadCastChannelGenerator, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}\n\n\n/**\n * implementation of a messaging based transport\n */\n\n/**\n * central message broker which uses various dom constructs\n * to broadcast messages into subelements\n *\n * we use the dom event system as transport and iframe and shadow dom mechanisms in a transparent way to\n * pull this off\n *\n * usage\n *\n * broker = new Broker(optional rootElement)\n *\n * defines a message broker within a scope of rootElement (without it is window aka the current isolation level)\n *\n * broker.registerListener(channel, listener) registers a new listener to the current broker and channel\n * broker.unregisterListener(channel, listener) unregisters the given listener\n *\n * broker.broadcast(message, optional direction, optional callBrokerListeners)\n * sends a message (channel included in the message object) in a direction (up, down, both)\n * and also optionally calls the listeners on the same broker (default off)\n *\n * the flow is like\n * up messages are propagated upwards only until it reaches the outer top of the dom\n * downwards, the messages are propagated downwards only\n * both the message is propagated into both directions\n *\n * Usually messages sent from the same broker are not processed within... however by setting\n * callBrokerListeners to true the listeners on the same broker also are called\n * brokers on the same level will get the message and process it automatically no matter what.\n * That way you can exclude the source from message processing (and it is done that way automatically)\n *\n * Isolation levels. Usually every isolation level needs its own broker object registering\n * on the outer bounds\n *\n * aka documents will register on window\n * iframes on the iframe windowObject\n * isolated shadow doms... document\n *\n *\n *\n */\nexport class Broker extends BaseBroker {\n\n    /**\n     * constructor has an optional root element\n     * and an internal name\n     *\n     * @param scopeElement\n     * @param brokerGroup\n     * @param crypto\n     */\n    constructor(scopeElement: HTMLElement | Window | ShadowRoot = window, public brokerGroup = \"brokr\", crypto: Crypto = noEncryption) {\n\n        super();\n\n        /**\n         * message relay.. identifies message events and relays them to the listeners\n         * @param event\n         */\n        let evtHandler = (event: MessageEvent | CustomEvent<Message>) => {\n            let details = (<any>event)?.detail ?? (<MessageEvent>event)?.data?.detail;\n            //TODO possible crypto hook, needs unit testing\n            let channel = ((<any>event)?.data?.channel) ?? ((<any>event)?.channel);\n\n            //javascript loses the type info in certain module types\n            if (details?.identifier && details?.message) {\n                let msg: Message = details;\n                if (msg.identifier in this.processedMessages) {\n                    return;\n                }\n                //coming in from up... we need to send it down\n                //a relayed message always has to trigger the listeners as well\n                if ((<any>event)?.detail) {\n                    this.broadcast(channel, msg);\n                } else {\n                    this.broadcast(channel, msg);\n                }\n\n            }\n        };\n        this.msgHandler = (evt: MessageEvent) => evtHandler(evt);\n        this.crypto = crypto;\n        this.register(scopeElement);\n    }\n\n    /**\n     * register the current broker into a scope defined by wnd\n     * @param scopeElement\n     */\n    register(scopeElement: HTMLElement | Window | ShadowRoot): BaseBroker {\n        this.rootElem = (<any>scopeElement).host ? (<any>scopeElement).host : scopeElement;\n        if ((<any>scopeElement).host) {\n            let host = (<ShadowRoot>scopeElement).host;\n            host.setAttribute(\"data-broker\", \"1\");\n        } else {\n            if (scopeElement?.[\"setAttribute\"])\n                (<any>scopeElement).setAttribute(\"data-broker\", \"1\");\n        }\n\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler, {capture: true});\n        /*dom message usable by iframes*/\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE + this.MSG_EVENT, this.msgHandler, {capture: true});\n        return <any>this;\n    }\n\n    /**\n     * manual unregister function, to unregister as broker from the current\n     * scope\n     */\n    unregister(): BaseBroker {\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler)\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + this.MSG_EVENT, this.msgHandler)\n        return <any>this;\n    }\n\n\n    /**\n     * broadcast a message\n     * the message contains the channel and the data and some internal bookkeeping data\n     *\n     * @param channel the channel to broadcast to\n     * @param message the message dot send\n     * (for instance 2 iframes within the same parent broker)\n     */\n    broadcast(channel: string, message: Message | string): BaseBroker {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        //message.message = this.crypto.encode(message);\n        //message.encoded = true;\n\n        if (this?.subjects[channel]) {\n            let messageWrapper = new MessageWrapper(channel, message);\n            if (!messageWrapper.detail.encoded) {\n                messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n                messageWrapper.detail.encoded = true;\n            }\n            this.subjects[channel].next(messageWrapper);\n        }\n\n        try {\n            this.dispatchUp(channel, message, false, true);\n            //listeners already called\n            this.dispatchDown(channel, message, true, false)\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n\n    private dispatchUp(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.markMessageAsProcessed(message);\n        if (window.parent != null) {\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            window.parent.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        }\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n    private dispatchSameLevel(channel: string, message: Message) {\n        let event = this.transformToEvent(channel, message, true);\n        //we also dispatch sideways\n        window.dispatchEvent(event);\n    }\n\n    //a dispatch of our own should never trigger the listeners hence the default true\n    private dispatchDown(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        let evt = this.transformToEvent(channel, message);\n\n        /*we now notify all iframes lying underneath */\n        Array.prototype.slice.call(document.querySelectorAll(\"iframe\")).forEach((element: HTMLIFrameElement) => {\n            let messageWrapper = new MessageWrapper(channel, message);\n            element.contentWindow.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        });\n\n        Array.prototype.slice.call(document.querySelectorAll(\"[data-broker='1']\")).forEach((element: HTMLElement) => element.dispatchEvent(evt))\n\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n\n    private msgCallListeners(channel: string, message: Message) {\n        let listeners = this.messageListeners[channel];\n        if (listeners?.length) {\n            let callElement = (element: (msg: Message) => void) => {\n                element(message);\n            }\n\n            listeners.forEach(callElement);\n        }\n    }\n\n    private transformToEvent(channel: string, message: Message, bubbles = false): CustomEvent {\n        let messageWrapper = new MessageWrapper(channel, message);\n        messageWrapper.bubbles = bubbles;\n        return Broker.createCustomEvent(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, messageWrapper);\n    }\n\n    private static createCustomEvent(name: string, wrapper: MessageWrapper): any {\n        if ('function' != typeof window.CustomEvent) {\n            let e: any = document.createEvent('HTMLEvents');\n            e.detail = wrapper.detail;\n            e.channel = wrapper.channel;\n            e.initEvent(name, wrapper.bubbles, wrapper.cancelable);\n            return e;\n\n        } else {\n            let customEvent = new window.CustomEvent(name, wrapper);\n            (<any>customEvent).channel = wrapper.channel;\n            return customEvent;\n        }\n\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a dom broker\n */\nexport class BrokerBuilder {\n    private scopeElement: HTMLElement | Window | ShadowRoot = window;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withScopeElement(scopeElement: HTMLElement | Window | ShadowRoot): BrokerBuilder {\n        this.scopeElement = scopeElement;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n\n    withChannelGroup(channelGroup: string): BrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): Broker {\n        let broker = new Broker(this.scopeElement, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    get shallowCopy(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    get deepCopy(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param keys\n     */\n    append(...keys): IValueHolder<any> {\n        let noKeys = keys.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = keys[keys.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...keys).isPresent();\n        this.buildPath(keys);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...keys).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...keys).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    appendIf(condition: boolean, ...keys): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...keys);\n    }\n\n    assign(...keys): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    assignIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...keys) : {value: null};\n    }\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param keys a sequential array of keys containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < this.total;\n    }\n\n    next(): number {\n        return Math.min(this.value++, this.total - 1);\n    }\n\n    reset(): void {\n        this.value = 0;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    filteredNext: T = null;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this.filteredNext = next;\n                return true;\n            } else {\n                this.filteredNext = null;\n            }\n        }\n        return this.filteredNext != null;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let ret = this.filteredNext;\n        this.filteredNext = null;\n        //We have to call hasNext, to roll another\n        //prefetch in case someone runs next\n        //sequentially without calling hasNext\n        this.hasNext();\n        return ret;\n    }\n\n    reset(): void {\n        this.filteredNext = null;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveCurrentNext() || this.resolveNextNext();\n    }\n\n    private resolveCurrentNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next());\n            if (Array.isArray(mapped)) {\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\n            } else {\n                this.activeDataSource = mapped;\n            }\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        return this.activeDataSource.next();\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, {[key: string]: S} > {\n    finalValue: {[key:string]: any} = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string> element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = 0;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","module.exports = __WEBPACK_EXTERNAL_MODULE__832__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(493);\n"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__832__","Lang","trim","str","ws","replace","length","test","charAt","slice","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","fromNullable","e","absent","saveResolveLazy","strToArray","splitter","ret","split","forEach","element","push","objToArray","obj","offset","pack","Array","concat","prototype","call","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","target","TypeError","to","Object","assign","theArgs","item","filter","nextSource","keys","nextKey","hasOwnProperty","decode","data","encode","NoCrypto","noEncryption","message","targetOrigin","encoded","this","creationDate","Date","getMilliseconds","identifier","Math","random","Message","channel","detail","bubbles","cancelable","composed","messageListeners","subjects","processedMessages","cleanupCnt","TIMEOUT_IN_MS","MSG_EVENT","crypto","registerListener","listener","reserveListenerNS","msg","asSubject","reserveSubjectNS","subject","oldNext","next","broadcast","asObservable","Subject","unregisterListener","answer","request","BaseBroker","isAnswer","getAnswerId","indexOf","messageId","Promise","resolve","reject","timeout","message2","clearTimeout","setTimeout","gcProcessedMessages","newProcessedMessages","key","messageStillActive","markMessageAsProcessed","EVENT_TYPE","broadCastChannelBrokerGenerator","name","BroadcastChannel","Error","DEFAULT_CHANNEL_GROUP","brokerFactory","channelGroup","openChannels","msgListener","messageData","coreMessage","register","includeOrigin","msgString","JSON","stringify","parse","messageWrapper","MessageWrapper","postMessage","addEventListener","unregister","close","BroadcastChannelBroker","broadCastChannelGenerator","listeners","withGeneratorFunc","generatorFunc","withListener","Stream","of","each","withChannelGroup","withCrypto","build","broker","listenerItem","BroadcastChannelBrokerBuilder","scopeElement","brokerGroup","msgHandler","evt","event","details","evtHandler","rootElem","host","setAttribute","Broker","capture","removeEventListener","dispatchUp","dispatchDown","ignoreListeners","callBrokerListeners","msgCallListeners","parent","dispatchSameLevel","transformToEvent","dispatchEvent","document","querySelectorAll","contentWindow","createCustomEvent","wrapper","CustomEvent","createEvent","initEvent","customEvent","withScopeElement","BrokerBuilder","value","_value","map","fn","inval","Monad","flatMap","mapped","isAbsent","isPresent","presentRunnable","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","currentPos","cnt","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","get","defaultVal","toJson","start","end","parseInt","substring","resolver","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","Config","ofAssoc","collect","AssocArrayCollector","shallowMerge","other","overwrite","withAppend","isArray","append","noKeys","lastKey","pathExists","buildPath","finalKeyArrPos","retVal","apply","appendIf","condition","assignIf","delete","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","total","hasNext","min","reset","SequenceDataSource","dataPos","ArrayStreamDataSource","filterFunc","filteredNext","inputDataSource","FilteredStreamDatasource","mapFunc","MappedStreamDataSource","resolveCurrentNext","resolveNextNext","activeDataSource","FlatMapStreamDataSource","ArrayCollector","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","toMerge","encodeFormElement","QueryFormDataCollector","formData","join","reduce","item1","item2","QueryFormStringCollector","_limits","pos","ofDataSource","dataSource","limits","toAppend","onElem","res","strmR","startVal","val1","first","last","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collector","isLimitsReached","isEndOfArray","Symbol","iterator","done","LazyStream","values","ofStreamDataSource","isOverLimits","nextFilter","max","t","el","stop","value1","value2","el1","el2","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}