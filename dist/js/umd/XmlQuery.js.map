{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Monad","this","_value","fn","inval","result","mapped","map","Stream","data","cnt","length","res","each","item","push","mapStreams","startVal","offset","val1","Optional","fromNullable","absent","matches","concat","super","isAbsent","elseValue","isPresent","flatMap","func","val","getClass","currentPos","currKey","keyVal","arrPos","arrayIndex","Array","getIfPresent","defaultVal","JSON","stringify","start","indexOf","end","parseInt","substring","ConfigEntry","rootElem","Config","keys","buildPath","getIf","apply","slice","condition","maps","overwrite","retVal","arrForEach","mixMaps","mergeMaps","parentVal","parentPos","alloc","arr","setVal","tempVal","Lang","_instance","it","splitter","retArr","split","trim","ret","len","str","ws","replace","test","charAt","arguments","String","Function","scope","method","blockFilter","whitelistFilter","dest","src","obj","pack","finalOffset","finalPack","e","callbackfn","startPos","startPosFinal","thisObj","convertedArr","objToArray","forEach","Error","arrIndexOf","element","fromIndex","pos","arrFinal","filter","args","argNames","UDEF","source","destination","toLowerCase","timeout","handler","reject","setTimeout","clearTimeout","setInterval","clearInterval","probe","theType","isString","resolverProducer","defaultValue","PromiseStatus","Promise","executor","status","PENDING","allFuncs","resolve","promises","myapply","promiseCnt","myPromise","__last__","finally","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","lastFuncs","rest","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","CancellablePromise","cancellator","ElementAttribute","attributeName","orElse","values","setAttribute","getAttribute","DomQuery","rootNode","instance","foundElement","querySelectorAll","index","defaults","eachElem","node","parentNode","removeChild","selector","document","nodes","byId","byTagName","id","includeRoot","tagName","attr","noneGetValue","clazz","hasIt","oldClass","oldClasses","found","hasClass","newClasses","join","firstElem","getAsElem","innerHTML","nodeSelector","allElems","reArr","code","nonce","head","getElementsByTagName","documentElement","script","createElement","type","text","insertBefore","firstChild","globalEval","elem","appendChild","any","defer","charSet","async","xhr","XMLHttpRequest","open","setRequestHeader","send","readyState","responseText","sibling","myElem","nextSibling","lowerTagName","resolveItem","childNodeArr","childNodes","sourceItem","sourceNode","attributes","from","to","Math","min","markup","runEmbeddedScripts","runEmbeddedCss","fromMarkup","replaceChild","insertAfter","runScripts","runCss","whilteListed","_Lang","finalScripts","execScrpt","itemType","equalsIgnoreCase","loadScriptEval","go","scriptElements","console","error","message","description","applyStyle","style","newSS","styleSheet","sheet","cssText","createTextNode","execCss","innerText","fireEvent","listener","options","addEventListener","removeEventListener","eventName","doc","ownerDocument","nodeType","dispatchEvent","eventClass","event","createEvent","initEvent","synthetic","createEventObject","dummyPlaceHolder","html","childs","detach","targetBuf","elemType","disabled","selectedIndex","uLen","u","selected","elementOption","checked","files","XMLQuery","parseXML","txt","_parseXML","parsedXML","DOMParser","parseFromString","undefined","tagsFound","path","currLevel","nameIdx","tags","nodeName","_getIf","resArr","nodeArr","_byTagName","joinstr","retStr","textContent","XMLSerializer","serializeToString","xml","cDataBlock"],"mappings":"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","file":"XmlQuery.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    protected _value: T;\n\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (\"undefined\" != typeof mapped && mapped != null && mapped.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n\n    get value(): T {\n        return this._value;\n    }\n\n}\n\n/*\n * A small stream implementation\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>{\n\n    static of<T>(... data: Array<T>): Stream<T> {\n        return new Stream<T>(... data);\n    }\n\n    value: Array<T>;\n    constructor(...value: T[]){\n        this.value = value;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        for(let cnt = 0; cnt < this.value.length ; cnt++) {\n            if(fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Stream<any> {\n        let mapped:Stream<R> = this.map(fn);\n        let res = this.mapStreams(mapped);\n        return new Stream(...res);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if(fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce(fn: (val1: T, val2:T) => T, startVal: T = null): Optional<T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1 = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for(let cnt = offset; cnt < this.value.length; cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        return Optional.fromNullable(this.value.length ? this.value[this.value.length -1] : null);\n    }\n\n    anyMatch(fn: (data: T) => boolean): boolean {\n        for(let cnt = 0; cnt < this.value.length; cnt++) {\n            if(fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: (data: T) => boolean): boolean {\n        if(!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for(let cnt = 0; cnt < this.value.length; cnt++) {\n            if(fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: (data: T) => boolean): boolean {\n        let matches = 0;\n        for(let cnt = 0; cnt < this.value.length; cnt++) {\n            if(fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    private mapStreams<R>(mapped: Stream<R>): Array<R> {\n        let res: Array<R> = [];\n        mapped.each((data: any) => {\n            if (data instanceof Stream) {\n                res = res.concat(this.mapStreams(data));\n            } else {\n                res.push(data);\n            }\n        });\n        return res;\n    }\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    static fromNullable<T>(value?: T): Optional<T> {\n        return new Optional(value);\n    }\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    isPresent(): boolean {\n        return !this.isAbsent();\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if(elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>> val.flatMap();\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    private getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array ) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if(this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n\n}\n\n\n/**\n * helper class to allow write access to the config\n * in certain situations (after an apply call)\n */\nclass ConfigEntry<T> implements IValueHolder<T> {\n    rootElem: any;\n    key: any;\n    arrPos: number;\n\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        this.rootElem = rootElem;\n        this.key = key;\n        this.arrPos = (\"undefined\" != typeof arrPos) ? arrPos : -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this.rootElem[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this.rootElem[this.key][this.arrPos];\n        }\n        return this.rootElem[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this.rootElem[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this.rootElem[this.key][this.arrPos] = val;\n            return;\n        }\n        this.rootElem[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    apply(...keys: Array<any>): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n\n    applyIf(condition: boolean,...keys: Array<any>): IValueHolder<any> {\n        return  condition ? this.apply(keys) : {value: null};\n    }\n\n\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if(key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    get shallowCopy(): Config {\n        let mergeMaps = function(maps: any[], overwrite = true) {\n            let retVal = {};\n            this.arrForEach(maps, (item:{[key:string]:any})  => {\n                this.mixMaps(retVal, item, overwrite)\n            });\n            return retVal;\n        }\n        return new Config(mergeMaps([{}, this.value || {}]));\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            if (arr.length < length) {\n                for (let cnt = arr.length; cnt < length; cnt++) {\n                    arr.push({});\n                }\n            }\n        };\n\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config> val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config> this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n\n/*we do not implenent array, maps etc.. monads there are libraries like lodash which have been doing that for ages*/\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CancellablePromise} from \"./Promise\";\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport class Lang {\n\n    private static _instance: Lang;\n\n    static get instance() {\n        if (!Lang._instance) {\n            Lang._instance = new Lang();\n        }\n        return Lang._instance;\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return an array of the splitted string\n     */\n    strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n\n        let retArr = it.split(splitter);\n        for (let cnt = 0; cnt < retArr.length; cnt++) {\n            retArr[cnt] = this.trim(retArr[cnt]);\n        }\n        return retArr;\n    }\n\n    arrToMap(arr:any[], offset: number = 0) {\n        var ret = new Array(arr.length);\n        var len = arr.length;\n        offset = (offset) ? offset : 0;\n        for (var cnt = 0; cnt < len; cnt++) {\n            ret[arr[cnt]] = cnt + offset;\n        }\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    isFunc(it: any): boolean {\n        return it instanceof  Function || typeof it === \"function\";\n    }\n\n    /**\n     * hitch backported from dojo\n     * hitch allows to assign a function to a dedicated scope\n     * this is helpful in situations when function reassignments\n     * can happen\n     * (notably happens often in lazy xhr code)\n     *\n     * @param {Function} scope of the function to be executed in\n     * @param {Function} method to be executed, the method must be of type function\n     *\n     * @return whatever the executed method returns\n     *\n     */\n    hitch(scope: any, method: Function): Function {\n        return !scope ? method : function () {\n            return method.apply(scope, arguments || []);\n        }; // Function\n    }\n\n    /**\n     * simplified merge maps which basically produces\n     * a final merged map from left to right\n     * the function is sideffect free\n     * @param maps\n     */\n    mergeMaps(maps: {[key:string]:any}[], overwrite: boolean = true, blockFilter?: Function, whitelistFilter?: Function): {[key:string]:any} {\n        let retVal = {};\n        this.arrForEach(maps, (item:{[key:string]:any})  => {\n            this.mixMaps(retVal, item, overwrite)\n        });\n        return retVal;\n    }\n\n    /**\n     * Helper function to merge two maps\n     * into one\n     * @param {Object} dest the destination map\n     * @param {Object} src the source map\n     * @param {boolean} overwrite if set to true the destination is overwritten if the keys exist in both maps\n     * @param blockFilter\n     * @param whitelistFilter\n     **/\n    mixMaps<T>(dest: { [key: string]: T }, src: { [key: string]: T }, overwrite: boolean, blockFilter?: Function, whitelistFilter?: Function): { [key: string]: T } {\n        let UNDEF = \"undefined\";\n        for (let key in src) {\n            if (!src.hasOwnProperty(key)) continue;\n            if (blockFilter && blockFilter[key]) {\n                continue;\n            }\n            if (whitelistFilter && !whitelistFilter[key]) {\n                continue;\n            }\n            if (!overwrite) {\n                /**\n                 *we use exists instead of booleans because we cannot rely\n                 *on all values being non boolean, we would need an getIf\n                 *operator in javascript to shorten this :-(\n                 */\n                dest[key] = (UNDEF != typeof dest[key]) ? dest[key] : src[key];\n            } else {\n                dest[key] = (UNDEF != typeof src[key]) ? src[key] : dest[key];\n            }\n        }\n        return dest;\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    objToArray<T>(obj: any, offset?: number, pack?: Array<T>): Array<T> {\n        if (!obj) {\n            return pack || null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if (obj instanceof Array && !offset && !pack)  return obj;\n        let finalOffset = ('undefined' != typeof offset || null != offset) ? offset : 0;\n        let finalPack = pack || [];\n        try {\n            return finalPack.concat(Array.prototype.slice.call(obj, finalOffset));\n        } catch (e) {\n            //ie8 (again as only browser) delivers for css 3 selectors a non convertible object\n            //we have to do it the hard way\n            //ie8 seems generally a little bit strange in its behavior some\n            //objects break the function is everything methodology of javascript\n            //and do not implement apply call, or are pseudo arrays which cannot\n            //be sliced\n            for (let cnt = finalOffset; cnt < obj.length; cnt++) {\n                finalPack.push(obj[cnt]);\n            }\n            return finalPack;\n        }\n    }\n\n    /**\n     * foreach implementation utilizing the\n     * ECMAScript wherever possible\n     * with added functionality\n     *\n     * @param arr the array to filter\n     * @param callbackfn\n     * @param startPos\n     * @param scope the closure to apply the function to, with the syntax defined by the ecmascript functionality\n     * function (element<,key, array>)\n     * <p />\n     * optional params\n     * <p />\n     * <ul>\n     *      <li>param startPos (optional) the starting position </li>\n     *      <li>param scope (optional) the scope to apply the closure to  </li>\n     * </ul>\n     */\n    arrForEach<T>(arr: any, callbackfn: (value: T, index: number, array: T[]) => void, startPos?: number, scope?: Function) {\n        if (!arr || !arr.length) return;\n        let startPosFinal = startPos || 0;\n        let thisObj = scope;\n        //check for an existing foreach mapping on array prototypes\n        //IE9 still does not pass array objects as result for dom ops\n        let convertedArr: Array<T> = this.objToArray<T>(arr);\n        (startPos) ? convertedArr.slice(startPosFinal).forEach(callbackfn, thisObj) : convertedArr.forEach(callbackfn, thisObj);\n    }\n\n    /**\n     * checks if an array contains an element\n     * @param {Array} arr   array\n     * @param {String} str string to check for\n     */\n    contains<T>(arr: T[], str: string) {\n        if (!arr || !str) {\n            throw Error(\"null value on arr or str not allowed\");\n        }\n        return this.arrIndexOf(arr, str) != -1;\n    }\n\n    /**\n     * adds a EcmaScript optimized indexOf to our mix,\n     * checks for the presence of an indexOf functionality\n     * and applies it, otherwise uses a fallback to the hold\n     * loop method to determine the index\n     *\n     * @param arr the array\n     * @param element the index to search for\n     * @param fromIndex\n     */\n    arrIndexOf<T>(arr: any, element: T, fromIndex ?: number): number {\n        if (!arr || !arr.length) return -1;\n        let pos = fromIndex || 0;\n        arr = this.objToArray<T>(arr);\n        return arr.indexOf(element, pos);\n    }\n\n    /**\n     * filter implementation utilizing the\n     * ECMAScript wherever possible\n     * with added functionality\n     *\n     * @param arr the array to filter\n     * @param scope the closure to apply the function to, with the syntax defined by the ecmascript functionality\n     * function (element<,key, array>)\n     * <p />\n     * additional params\n     * <ul>\n     *  <li> startPos (optional) the starting position</li>\n     *  <li> scope (optional) the scope to apply the closure to</li>\n     * </ul>\n     */\n    arrFilter<T>(arr: any, callbackfn: (value: T, index?: number, array?: T[]) => boolean, startPos ?: number, scope ?: Function) {\n        if (!arr || !arr.length) return [];\n        let arrFinal = this.objToArray<T>(arr);\n        return ((startPos) ? arrFinal.slice(startPos).filter(callbackfn, scope) : arrFinal.filter(callbackfn, scope));\n    }\n\n    /**\n     * helper to automatically apply a delivered arguments map or array\n     * to its destination which has a field \"_\"<key> and a full field\n     *\n     * @param dest the destination object\n     * @param args the arguments array or map\n     * @param argNames the argument names to be transferred\n     */\n    /**\n     * helper to automatically apply a delivered arguments map or array\n     * to its destination which has a field \"_\"<key> and a full field\n     *\n     * @param dest the destination object\n     * @param args the arguments array or map\n     * @param argNames the argument names to be transferred\n     */\n    applyArgs<T>(dest: any, args: { [key: string]: T } | Array<T>, argNames?: Array<string>): any {\n        let UDEF = 'undefined';\n        if (argNames) {\n            for (let cnt = 0; cnt < (<Array<T>>args).length; cnt++) {\n                //dest can be null or 0 hence no shortcut\n                if (UDEF != typeof dest[\"_\" + argNames[cnt]]) {\n                    dest[\"_\" + argNames[cnt]] = args[cnt];\n                }\n                if (UDEF != typeof dest[argNames[cnt]]) {\n                    dest[argNames[cnt]] = args[cnt];\n                }\n            }\n        } else {\n            for (let key in args) {\n                if (!args.hasOwnProperty(key)) continue;\n                if (UDEF != typeof dest[\"_\" + key]) {\n                    dest[\"_\" + key] = args[key];\n                }\n                if (UDEF != typeof dest[key]) {\n                    dest[key] = args[key];\n                }\n            }\n        }\n        return dest;\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    equalsIgnoreCase(source: string, destination: string): boolean {\n        //either both are not set or null\n        if (!source && !destination) {\n            return true;\n        }\n        //source or dest is set while the other is not\n        if (!source || !destination) return false;\n        //in any other case we do a strong string comparison\n        return source.toLowerCase() === destination.toLowerCase();\n    }\n\n    /*\n     * Promise wrappers for timeout and interval\n     */\n    timeout(timeout: number): CancellablePromise {\n        let handler: any = null;\n        return new CancellablePromise((apply: Function, reject: Function) => {\n            handler = setTimeout(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearTimeout(handler);\n                handler = null;\n            }\n        });\n    }\n\n\n\n    interval(timeout: number): CancellablePromise {\n        let handler: any = null;\n        return new CancellablePromise((apply: Function, reject: Function) => {\n            handler = setInterval(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearInterval(handler);\n                handler = null;\n            }\n        });\n    }\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    public assertType(probe: any, theType: any): boolean {\n        return this.isString(theType) ? typeof probe ==  theType : probe instanceof theType;\n    }\n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    static saveResolve<T>(resolverProducer: () => T, defaultValue:T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            if(\"undefined\" == typeof result || null == result) {\n                return Optional.fromNullable(defaultValue);\n            }\n            return Optional.fromNullable(result);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}","import {Optional} from \"./Monad\";\n\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    status = PromiseStatus.PENDING;\n\n    protected allFuncs: Array<any> = [];\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n\n    protected resolve(val?: any) {\n\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //var func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            var fn = this.allFuncs.shift();\n            if (fn.catch) {\n                var funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (var cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            var fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    private cancellator = () => {\n    };\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise> super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise> super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise> super.finally(executorFunc);\n    }\n}\n\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {IValueHolder, Optional} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\n\n\nexport class ElementAttribute implements IValueHolder<string> {\n\n    constructor(private element: DomQuery, private attributeName: string, private defaultVal:string = null) {\n    }\n\n    set value(value: string) {\n\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n\n        for(let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.attributeName, value);\n        }\n        val[0].setAttribute(this.attributeName, value);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n\n        return val[0].getAttribute(this.attributeName);\n    }\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery {\n\n    private rootNode: Array<Element> = [];\n\n    constructor(...rootNode: Array<Element | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (Lang.instance.isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else if (Lang.instance.isString(rootNode[cnt])) {\n                    let result = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    this.rootNode.push(...result.values);\n\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index\n     */\n    getAsElem(index: number, defaults?: Optional<any>): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : (defaults) ? defaults : Optional.absent;\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(): boolean {\n        return !this.isAbsent();\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        return new DomQuery(document).querySelectorAll(selector);\n    }\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery {\n        if (this.rootNode.length == 0) {\n            return this;\n        }\n        let nodes = [];\n        let nodeIdx = {};\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt].querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(Lang.instance.objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element): DomQuery {\n        if (Lang.instance.isString(selector)) {\n            return new DomQuery(document).byId( <string> selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (Lang.instance.isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?:boolean): DomQuery {\n        let res: Array<DomQuery> =  [];\n        for (let cnt = 0; includeRoot && cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].id == id) {\n                res.push(new DomQuery(this.rootNode[cnt]));\n            }\n        }\n        res = res.concat(this.querySelectorAll(\"#\" + id));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery {\n        let res = [];\n        for (let cnt = 0;includeRoot && cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].tagName == tagName) {\n                res.push(new DomQuery(this.rootNode[cnt]));\n            }\n        }\n        res = res.concat(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr\n     */\n    attr(attr: string, noneGetValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, noneGetValue);\n    }\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n\n        this.each((item) => {\n            let oldClass = item.attr(\"class\").value || \"\";\n            if(oldClass.toLowerCase().indexOf(clazz.toLowerCase()) == -1) {\n                return;\n            } else {\n                let oldClasses = oldClass.split(/\\s+/gi);\n                let found = false;\n                for(let cnt = 0; cnt < oldClasses.length && !found; cnt++) {\n                    found = oldClasses[cnt].toLowerCase() == clazz.toLowerCase();\n                }\n                hasIt = hasIt || found;\n                if(hasIt) {\n                    return false;\n                }\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.each((item) => {\n            let oldClass = item.attr(\"class\").value || \"\";\n            if(!this.hasClass(clazz)) {\n                item.attr(\"class\").value = Lang.instance.trim(oldClass + \" \" + clazz);\n                return;\n            }\n        });\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.each((item) => {\n            if(this.hasClass(clazz)) {\n                let oldClass = item.attr(\"class\").value || \"\";\n                let newClasses = [];\n                let oldClasses = oldClass.split(/\\s+/gi);\n                for(let cnt = 0; cnt < oldClasses.length; cnt++) {\n                    if(oldClasses[cnt].toLowerCase() != clazz.toLowerCase()) {\n                        newClasses.push(oldClasses[cnt]);\n                    }\n                }\n                item.attr(\"class\").value = newClasses.join(\" \");\n            }\n        });\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean {\n        let found = false;\n        return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\n    }\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.getAsElem(0).isPresent() ? Optional.fromNullable(this.getAsElem(0).value.innerHTML) : Optional.absent;\n        }\n        if (this.getAsElem(0).isPresent()) {\n            this.getAsElem(0).value.innerHTML = inval;\n        }\n        return this;\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n        return this.querySelectorAll(\" > \" + nodeSelector.join(\">\"));\n    }\n\n    /**\n     * returns the elements of this dom tree, always as array (keep that in mind)\n     */\n    get value(): Optional<Element> {\n\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for type\n     */\n    get type(): Optional<string> {\n        return Optional.fromNullable(this.get(0).attr(\"type\").value);\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.get(cnt), cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * globa eval head appendix method\n     * no other methods are supported anymore\n     * @param code\n     */\n    globalEval(code: string, nonce ?:string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if(nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.text = code;\n        head.insertBefore(script, head.firstChild);\n        head.removeChild(script);\n        return this;\n    }\n\n    static globalEval(code: string): DomQuery {\n        return new DomQuery(document).globalEval(code);\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery) {\n        this.eachElem((item) => {\n            let value1: Element = <Element> elem.getAsElem(0).get(Optional.fromNullable({appendChild: (any) => {}})).value;\n            value1.appendChild(item);\n        });\n    }\n\n    //TODO append prepend\n\n    loadScriptEval(src, type, defer, charSet, async) {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.send(null);\n\n        //since we are synchronous we do it after not with onReadyStateChange\n\n        if (xhr.readyState == 4) {\n            if (xhr.status == 200) {\n                //defer also means we have to process after the ajax response\n                //has been processed\n                //we can achieve that with a small timeout, the timeout\n                //triggers after the processing is done!\n                if (!defer) {\n                    this.globalEval(xhr.responseText.replace(\"\\n\", \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n                } else {\n                    //TODO not ideal we maybe ought to move to something else here\n                    //but since it is not in use yet, it is ok\n                    setTimeout(function () {\n                        this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                    }, 1);\n                }\n            } else {\n                throw Error(xhr.responseText);\n            }\n        } else {\n            throw Error(\"Loading of script \" + src + \" failed \");\n        }\n        return this;\n    }\n\n    insertAfter(...elem: Array<DomQuery>) {\n        let sibling = this.getAsElem(0).value;\n        for (let cnt = 0; cnt < elem.length; cnt++) {\n            elem[cnt].eachElem((myElem: Element) => {\n                sibling.parentNode.insertBefore(myElem, sibling.nextSibling);\n                sibling = <Element>sibling.nextSibling;\n                this.rootNode.push(myElem);\n            });\n        }\n        return this;\n    }\n\n    insertBefore(...elem: Array<DomQuery>) {\n        for (let cnt = 0; cnt < elem.length; cnt++) {\n            elem[cnt].eachElem((myElem: Element) => {\n                this.getAsElem(0).value.parentNode.insertBefore(myElem, this.getAsElem(0).value);\n                this.rootNode.push(myElem);\n            });\n        }\n        return this;\n    }\n\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        let retArr = [];\n        const lowerTagName = tagName.toLowerCase();\n        let resolveItem = (item: Element) => {\n\n            if (item.tagName.toLowerCase() == lowerTagName) {\n                retArr.push(item);\n            }\n\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode) {\n                item = <Element>item.parentNode;\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if(tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n        return new DomQuery(...retArr);\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(Lang.instance.objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            for (let cnt = 0; cnt < sourceNode.attributes.length; cnt++) {\n                let value = sourceNode.attributes[cnt].value;\n                if (value) {\n                    this.attr(sourceNode.attributes[cnt].name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    private subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery {\n        let nodes = DomQuery.fromMarkup(markup);\n\n        this.getAsElem(0).value.parentNode.replaceChild(nodes.getAsElem(0).value, this.getAsElem(0).value);\n        this.rootNode = [];\n        this.rootNode = this.rootNode.concat(nodes.values);\n        // this.rootNode.push(nodes.value);\n\n        for (let cnt = 1; cnt < nodes.length; cnt++) {\n            this.insertAfter(nodes.get(cnt));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        return this;\n    }\n\n\n    /**\n     * Run through the given Html item and execute the inline scripts\n     * (IE doesn't do this by itself)\n     * @param {Node} item\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     */\n    runScripts(whilteListed: (val: string) => boolean = (src: string) => {\n        return (src.indexOf(\"ln=scripts\") == -1 &&\n            src.indexOf(\"ln=javax.faces\") == -1) ||\n            (src.indexOf(\"/jsf.js\") == -1 &&\n                src.indexOf(\"/jsf-uncompressed.js\") == -1);\n    }): DomQuery {\n        let _Lang = Lang.instance,\n            finalScripts = [],\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && _Lang.equalsIgnoreCase(tagName, \"script\") &&\n                    (itemType === \"\" || _Lang.equalsIgnoreCase(itemType, \"text/javascript\") ||\n                        _Lang.equalsIgnoreCase(itemType, \"javascript\") ||\n                        _Lang.equalsIgnoreCase(itemType, \"text/ecmascript\") ||\n                        _Lang.equalsIgnoreCase(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            if (finalScripts.length) {\n                                //script source means we have to eval the existing\n                                //scripts before running the include\n                                this.globalEval(finalScripts.join(\"\\n\"));\n\n                                finalScripts = [];\n                            }\n                            this.loadScriptEval(src, item.getAttribute('type'), false, \"UTF-8\", false);\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        let test = item.text;\n                        let go = true;\n                        while (go) {\n                            go = false;\n                            if (test.substring(0, 1) == \" \") {\n                                test = test.substring(1);\n                                go = true;\n                            }\n                            if (test.substring(0, 4) == \"<!--\") {\n                                test = test.substring(4);\n                                go = true;\n                            }\n                            if (test.substring(0, 11) == \"//<![CDATA[\") {\n                                test = test.substring(11);\n                                go = true;\n                            }\n                        }\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push(test);\n\n                    }\n                }\n            };\n        try {\n            let scriptElements = this.querySelectorAll(\"script\");\n            if (scriptElements == null) return;\n            for (let cnt = 0; cnt < scriptElements.length; cnt++) {\n                execScrpt(scriptElements.getAsElem(cnt).value);\n            }\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        } catch (e) {\n            if (window.console && window.console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n    }\n\n\n    runCss(): DomQuery {\n\n        const UDEF = \"undefined\",\n            // _RT = this._RT,\n            _Lang = Lang.instance,\n            applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ? newSS.sheet : (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") || \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") || \"text/css\");\n\n                if (UDEF != typeof styleSheet.cssText) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n\n\n            },\n\n            execCss = (item: Element) => {\n                const equalsIgnoreCase = _Lang.equalsIgnoreCase;\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: NodeList = item.childNodes;\n                    if (childNodes) {\n                        const len = childNodes.length;\n                        for (let cnt = 0; cnt < len; cnt++) {\n                            innerText.push((<Element>childNodes[cnt]).innerHTML || (<CharacterData>childNodes[cnt]).data);\n                        }\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n\n        const scriptElements: DomQuery = this.querySelectorAll(\"link, style\");\n        if (scriptElements == null) return;\n        for (let cnt = 0; cnt < scriptElements.length; cnt++) {\n            let element: any = scriptElements.getAsElem(cnt);\n            execCss(element.value);\n        }\n\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?:  boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => {\n           node.addEventListener(type, listener, options);\n        });\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?:  boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => {\n            node.removeEventListener(type, listener, options);\n        });\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            var doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9){\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                var eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                var event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else  if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                var event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n        //TODO check if ie8 still has this problem, probably not we probably\n        //can drop this code in favor of html\n\n        //now to the non w3c compliant browsers\n        //http://blogs.perl.org/users/clinton_gormley/2010/02/forcing-ie-to-accept-script-tags-in-innerhtml.html\n        //we have to cope with deficiencies between ie and its simulations in this case\n        let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n        //fortunately a table element also works which is less critical than form elements regarding\n        //the inner content\n        dummyPlaceHolder.html(\"<table><tbody><tr><td>\" + markup + \"</td></tr></tbody></table>\");\n        let childs = dummyPlaceHolder.querySelectorAll(\"td\").get(0).childNodes;\n        childs.detach();\n        dummyPlaceHolder.html(\"\");\n        return childs;\n    }\n\n    //TODO maybe move this out into a specialized domquery implementation\n    //in the myfaces project\n    private encodeElement(element: HTMLInputElement | HTMLSelectElement, targetBuf: { [key: string]: any }) {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (!element.name) {\n            return;\n        }\n\n\n        let name = element.name;\n        let tagName = element.tagName.toLowerCase();\n        let elemType = element.type;\n        if (elemType != null) {\n            elemType = elemType.toLowerCase();\n        }\n\n        // routine for all elements\n        // rules:\n        // - process only inputs, textareas and selects\n        // - elements muest have attribute \"name\"\n        // - elements must not be disabled\n        if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n            (name != null && name != \"\")) && !element.disabled) {\n\n            // routine for select elements\n            // rules:\n            // - if select-one and value-Attribute exist => \"name=value\"\n            // (also if value empty => \"name=\")\n            // - if select-one and value-Attribute don't exist =>\n            // \"name=DisplayValue\"\n            // - if select multi and multple selected => \"name=value1&name=value2\"\n            // - if select and selectedIndex=-1 don't submit\n            if (tagName == \"select\") {\n                // selectedIndex must be >= 0 sein to be submittet\n                if ((<HTMLSelectElement>element).selectedIndex >= 0) {\n                    let uLen = (<HTMLSelectElement>element).options.length;\n                    for (let u = 0; u < uLen; u++) {\n                        // find all selected options\n                        //let subBuf = [];\n                        if ((<any>(<HTMLSelectElement>element).options[u]).selected) {\n                            let elementOption = (<HTMLSelectElement>element).options[u];\n                            targetBuf[name] = (elementOption.getAttribute(\"value\") != null) ?\n                                elementOption.getAttribute(\"value\") : elementOption.getAttribute(\"text\");\n                        }\n                    }\n                }\n            }\n\n            // routine for remaining elements\n            // rules:\n            // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n            // - submit checkboxes and radio inputs only if checked\n            if ((tagName != \"select\" && elemType != \"button\"\n                && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n                && ((elemType != \"checkbox\" && elemType != \"radio\") || (<HTMLInputElement>element).checked)) {\n                if ('undefined' != typeof (<HTMLInputElement>element).files && (<HTMLInputElement>element).files != null && (<HTMLInputElement>element).files.length) {\n                    //xhr level2\n                    targetBuf[name] = (<HTMLInputElement>element).files[0];\n                } else {\n                    targetBuf[name] = element.value;\n                }\n            }\n\n        }\n    }\n\n    static absent = new DomQuery();\n}\n\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\n\n\nexport class XMLQuery {\n\n    private rootNode: Array<Element> = [];\n\n    constructor(...rootNode: Array<any>) {\n        if (Optional.fromNullable(rootNode).isAbsent()) {\n            return;\n        } else if (rootNode[0] instanceof Array && rootNode.length == 1) {\n            if (!(rootNode[0][0] instanceof DomQuery)) {\n                this.rootNode = this.rootNode.concat(rootNode[0]);\n            } else {\n                for (let cnt = 0; cnt < rootNode[0].length; cnt++) {\n                    rootNode[0][cnt].each((node: Element) => {\n                        this.rootNode.push(node);\n                    });\n                }\n            }\n        } else {\n            if (!(rootNode[0] instanceof DomQuery)) {\n                this.rootNode = this.rootNode.concat(rootNode);\n            } else {\n                for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                    rootNode[cnt].each((node: Element) => {\n                        this.rootNode.push(node);\n                    });\n                }\n            }\n        }\n    }\n\n    static fromString(data: string): XMLQuery {\n        return XMLQuery.parseXML(data);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        let ret = XMLQuery._parseXML(txt);\n        return ret;\n    }\n\n    private static _parseXML(txt: string): XMLQuery {\n        //from jquery\n        let parsedXML;\n        try {\n            parsedXML = new DOMParser().parseFromString(txt, \"text/xml\");\n        } catch (e) {\n            parsedXML = undefined;\n        }\n        let retVal = new XMLQuery(Lang.instance.objToArray(parsedXML.childNodes));\n        return retVal;\n    }\n\n    isAbsent() {\n        return !this.rootNode.length;\n    }\n\n    isPresent() {\n        return !this.isAbsent();\n    }\n\n    get length(): number {\n        return this.rootNode.length;\n    }\n\n\n    private _getIf(tagsFound: Array<Node>, path: Array<String>, currLevel: Array<Node>) {\n        let nameIdx = {};\n        let tags = path[0].split(\",\");\n        for (let cnt = 0; cnt < tags.length; cnt++) {\n            nameIdx[Lang.instance.trim(tags[cnt])] = true;\n        }\n\n        if (path.length == 1) {\n            for (let cnt = 0; currLevel && cnt < currLevel.length; cnt++) {\n                if ((path[0] == \"*\") || nameIdx[currLevel[cnt].nodeName]) {\n                    tagsFound.push(currLevel[cnt]);\n                }\n            }\n            return;\n        }\n\n        for (let cnt = 0; currLevel && cnt < currLevel.length; cnt++) {\n            if ((path[0] == \"*\") || nameIdx[currLevel[cnt].nodeName]) {\n\n                this._getIf(tagsFound, path.slice(1, path.length), Lang.instance.objToArray(currLevel[cnt].childNodes))\n            }\n        }\n    }\n\n    getIf(...path: Array<string>): XMLQuery {\n        let currLevel = this.rootNode;\n\n        let tagsFound = [];\n\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            this._getIf(tagsFound, path, Lang.instance.objToArray(this.rootNode[cnt].childNodes))\n        }\n        return new XMLQuery(tagsFound);\n    }\n\n    get(pos: number): XMLQuery {\n        if (pos > this.rootNode.length - 1) {\n            return XMLQuery.absent;\n        }\n        return new XMLQuery(this.rootNode[pos]);\n    }\n\n    get value(): Array<Element> {\n        return this.rootNode;\n    }\n\n    get childNodes(): XMLQuery {\n        let retVal = [];\n        this.eachElem((item: Node) => {\n            retVal = retVal.concat(Lang.instance.objToArray(item.childNodes))\n        });\n\n        return new XMLQuery(...retVal);\n    }\n\n    eachElem(func: (item: Node, cnt?: number) => any): XMLQuery {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.get(cnt).value[0], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(func: (item: XMLQuery, cnt?: number) => any): XMLQuery {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.get(cnt), cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    private _byTagName(resArr: Array<Node>, node: Node, tagName: string) {\n        if (node && node.nodeName == tagName) {\n            resArr.push(node);\n        }\n        if (node.childNodes) {\n            let nodeArr: Array<Element> = Lang.instance.objToArray(node.childNodes);\n            for (let cnt = 0; cnt < nodeArr.length; cnt++) {\n                this._byTagName(resArr, nodeArr[cnt], tagName);\n            }\n        }\n    }\n\n    byTagName(tagName: string): XMLQuery {\n        let res = [];\n\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            this._byTagName(res, this.rootNode[cnt], tagName);\n        }\n        return new XMLQuery(res);\n    }\n\n\n    isXMLParserError(): boolean {\n\n        return this.byTagName(\"parsererror\").isPresent();\n    }\n\n    textContent(joinstr: string): string {\n        let retStr = [];\n        this.eachElem((item: Node) => {\n            retStr.push((<any>item).textContent);\n        });\n        return retStr.join(joinstr || \" \");\n    }\n\n\n    parserErrorText(joinstr: string): string {\n        return this.byTagName(\"parsererror\").textContent(joinstr);\n    }\n\n    getAttribute(key: string): Optional<string> {\n        if (this.rootNode.length == 0) {\n            return Optional.absent;\n        }\n\n        return Optional.fromNullable((<any>this.rootNode[0]).getAttribute(key));\n    }\n\n    //TODO insert attribute api like we have it on DomQuery\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            if (typeof (<any>window).XMLSerializer != \"undefined\") {\n                ret.push(new (<any>window).XMLSerializer().serializeToString(node));\n            } else if (typeof node.xml != \"undefined\") {\n                ret.push(node.xml);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n\n    get cDATAAsString(): string {\n        let cDataBlock = [];\n        // response may contain several blocks\n        this.each((item: XMLQuery) => {\n            item.childNodes.eachElem((node: Node) => {\n                cDataBlock.push(<string>(<any>node).data);\n            });\n        });\n        return cDataBlock.join('');\n    }\n\n    static absent = new XMLQuery();\n}\n"],"sourceRoot":""}