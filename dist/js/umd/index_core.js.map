{"version":3,"file":"index_core.js","mappings":"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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/global","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/index_core.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {ArrayCollector, ICollector, IStreamDataSource, ITERATION_STATUS} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\nimport objToArray = Lang.objToArray;\nimport isString = Lang.isString;\nimport equalsIgnoreCase = Lang.equalsIgnoreCase;\nimport {_global$} from \"./Global\";\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout ?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval ?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum Submittables {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = { attributes: true, childList: true, subtree: true, timeout: 500, interval: 100 }): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        //we do the same but for now ignore the options on the dom query\n        //we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { //fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute,T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any> new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute,T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any> new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\ninterface IDomQuery {\n    /**\n     * reference to the systems global object\n     * (globalThis, window, global, depending on the environment)\n     */\n    readonly global: any;\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The the value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n\n    /**\n     * accumulated top element offsetWidth\n     */\n    readonly offsetWidth: number;\n    /**\n     * accumulated top element offsetHeight\n     */\n    readonly offsetHeight: number;\n    /**\n     * accumulated top element offsetLeft\n     */\n    readonly offsetLeft: number;\n    /**\n     * accumulated top element offsetTop\n     */\n    readonly offsetTop: number;\n\n\n    /**\n     * abbreviation for inputValue.value to make\n     * the code terser\n     */\n    val: string | boolean;\n\n    /**\n     * the underlying form elements as domquery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * inner html property\n     * setter and getter which works directly on strings\n     */\n    innerHTML: string;\n\n    /**\n     * same as innerHTML\n     * will be removed once\n     * my code is transitioned\n     * @deprecated do not use anymore, user innerHTML instead\n     */\n    innerHtml: string;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded (highest level)\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml equivalent\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchevent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    lastElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * Runs an eval and keeps the evaled code in the head\n     * This is a corner condition, where we want to update the head with custom\n     * code and leave the code in (instead of deleting ig)\n     *\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @return {DomQuery} DomQuery of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    append(elem: DomQuery): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    prepend(elem: DomQuery): DomQuery;\n\n    /**\n     * prepend eqivalent to appendTo\n     *\n     * @param elem the element to prepend to\n     */\n    prependTo(elem: DomQuery): DomQuery;\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the domquery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n    /**\n     * all parents with TagName\n     * @param tagName\n     */\n    parents(tagName: string): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another domquery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinstr?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinstr?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the subnodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    //observable: Observable<DomQuery>;\n\n    //observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length ) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if(!rootNode[cnt]) {\n                    //we skip possible null entries which can happen in\n                    //certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        //a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow doms\n     * separately and runs the query on earch shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if(queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if(shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if(shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        //filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => {\n            return item != null\n        })\n            .map(item => {\n                return DomQuery.byId(item)\n            }).collect(new ArrayCollector()));\n    }\n\n    get offsetWidth(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming,0).value;\n    }\n    get offsetHeight(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming,0).value;\n    }\n\n    get offsetLeft(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming,0).value;\n    }\n\n    get offsetTop(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming,0).value;\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.indexOf('<!doctype') != -1 ||\n            lowerMarkup.indexOf('<html') != -1 ||\n            lowerMarkup.indexOf('<head') != -1 || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\n            lowerMarkup.indexOf('<body') != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            //table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given elmement\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ?  (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        //We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n\n    /*deep with a selector and a peudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if(subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tagname to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any> LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = inval;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    set innerHTML(inVal: string) {\n        this.eachElem(elem => elem.innerHTML = inVal);\n    }\n\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    set innerHtml(inval: string) {\n        this.innerHTML = inval;\n    }\n\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matches ||\n            prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        const ret = this.lazyStream\n            .map(item => this._mozMatchesSelector(item.getAsElem(0).value, selector))\n            .filter(match => match)\n            .first();\n        return ret.isPresent();\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                //we could use a filter, but for the best performance we dont\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            if('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            if('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if(Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string = \"utf-8\", nonce?:string) {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.onload = () => {\n            //defer also means we have to process after the ajax response\n            //has been processed\n            //we can achieve that with a small timeout, the timeout\n            //triggers after the processing is done!\n            if (!defer) {\n                this.globalEval(xhr.responseText.replace(/\\n/g, \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src, nonce);\n            } else {\n                //TODO not ideal we maybe ought to move to something else here\n                //but since it is not in use yet, it is ok\n                setTimeout(() => {\n                    this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src, nonce);\n                }, defer);\n            }\n        };\n\n        xhr.onerror = (data: any) => {\n            throw Error(data);\n        };\n        //since we are synchronous we do it after not with onReadyStateChange\n        xhr.send(null);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        const retSet: Set<Element> = new Set();\n        const retArr: Array<Element> = [];\n        const lowerTagName = tagName.toLowerCase();\n\n        let resolveItem = (item: Element) => {\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName && !retSet.has(item)) {\n                retSet.add(item);\n                retArr.push(item);\n            }\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode || (<any> item).host) {\n                item = <Element>item?.parentNode ?? (<any>item)?.host;\n\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embeddec css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        //no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: {evalText: string, nonce: string}[]) => {\n            if (scriptsToProcess.length) {\n                //script source means we have to eval the existing\n                //scripts before running the include\n                //this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                Stream.of(...scriptsToProcess).each(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n                        this.globalEval(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    this.globalEval(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            equi = equalsIgnoreCase,\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && equi(tagName, \"script\") &&\n                    (itemType === \"\" || equi(itemType, \"text/javascript\") ||\n                        equi(itemType, \"javascript\") ||\n                        equi(itemType, \"text/ecmascript\") ||\n                        equi(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce =  item?.nonce ?? item.getAttribute('nonce').value;\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            //we run the collected scripts before running, the include\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            (!!nonce) ? this.loadScriptEval(src, 0, \"UTF-8\", nonce):\n                                //if no nonce is set we do not pass any once\n                                this.loadScriptEval(src, 0, \"UTF-8\");\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        //TODO this probably needs to be changed due to our new parsing structures\n                        //probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce =  item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            //script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) //preceding 2, following == 4)\n                .each(item => execScrpt(item));\n\n             evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ?? (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") ?? \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") ?? \"text/css\");\n\n                if (styleSheet?.cssText ?? false) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n            },\n\n            execCss = (item: Element) => {\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: Array<Node> = Array.prototype.slice.call(item.childNodes);\n                    if (childNodes) {\n                        childNodes.forEach(child => innerText.push((<Element>child).innerHTML || (<CharacterData>child).data));\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinstr), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {//no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != Submittables.SELECT &&\n                        elemType != Submittables.BUTTON &&\n                        elemType != Submittables.RESET &&\n                        elemType != Submittables.SUBMIT &&\n                        elemType != Submittables.IMAGE\n                    ) && (\n                        (\n                            elemType != Submittables.CHECKBOX && elemType != Submittables.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let files: any = (<any>element.value).value?.files ?? [];\n                    if (files?.length) {\n                        //xhr level2\n                        target.append(name).value = files[0];\n                    } else {\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    //TODO this part probably will be removed\n    //because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the subdome before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = { attributes: true, childList: true, subtree: true, timeout: 500, interval: 100 }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //from\n    // http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                //the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                //the caretposition is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            //now this is ugly, but not supported input types throw errors for selectionStart\n            //just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        //the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * concats the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): any {\n        const ret = this.lazyStream.concat(toAttach.lazyStream).collect(new DomQueryCollector());\n        //we now filter the doubles out\n        if(!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; //ie11 does not support sets, we have to fake it\n        return ret.lazyStream.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }).collect(new DomQueryCollector());\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n\n    /*[observable](): Observable<DomQuery> {\n        return this.observable;\n    }\n\n    get observable(): Observable<DomQuery> {\n        let observerFunc = (observer:Subscriber<DomQuery>) => {\n            try {\n                this.each(dqNode => {\n                    observer.next(dqNode);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }\n\n    get observableElem(): Observable<Element> {\n        let observerFunc = (observer:Subscriber<Element>) => {\n            try {\n                this.eachElem(node => {\n                    observer.next(node);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }*/\n\n}\n\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assings an new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n\n        this.buildPath(accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambigous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(accessPath: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\nimport type = Mocha.utils.type;\n\n/**\n * special status of the datasource location pointer\n * if an access, outside of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fullfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * returns the next element in the stream\n     * difference to next is, that the internal data position\n     * is not changed, so next still will deliver the next item from the current\n     * data position. Look ahead is mostly needed internally\n     * by possible endless data constructs which have no fixed data boundary, or index\n     * positions. (aka infinite sets, or flatmapped constructs)\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T |ITERATION_STATUS {\n        if((this.dataPos+cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while(!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos ++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T |ITERATION_STATUS;\n\n        for(let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if(inCache || this.filterFunc(lookupVal)) {\n                cnt --;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n       return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources= [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        //easy access trial\n        if(this?.activeDataSource && this?.activeDataSource?.lookAhead(cnt) != ITERATION_STATUS.EO_STRM) {\n            //this should coverr 95% of all accesses\n            return this?.activeDataSource.lookAhead(cnt);\n        }\n\n        /**\n         * we only can determine how many elems datasource has by going up\n         * (for now this suffices, however not ideal, we might have to introduce a numElements or so)\n         * @param datasource\n         */\n        function howManyElems(datasource: IStreamDataSource<any>): number {\n            let cnt = 1;\n            while(datasource.lookAhead(cnt) !== ITERATION_STATUS.EO_STRM) {\n                cnt++;\n            }\n            return cnt - 1;\n        }\n        function readjustSkip(dataSource) {\n            let skippedElems = (dataSource) ? howManyElems(dataSource) : 0;\n            cnt = cnt - skippedElems;\n        }\n\n        if(this.activeDataSource) {\n            readjustSkip(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams subsequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them so we introduce a small o2 here\n        for(let dsLoop = 1; true ; dsLoop++) {\n            let currDatasource = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            if(currDatasource === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mapped = this.mapFunc(currDatasource as T);\n            //it either comes in as datasource or as array\n            let currentDataSource = this.toDatasource(mapped);\n            let ret = currentDataSource.lookAhead(cnt);\n            if(ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            readjustSkip(currDatasource);\n\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);;\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if(this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS{\n        if(!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, {[key: string]: S} > {\n    finalValue: {[key:string]: any} = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string> element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\nimport {_global$} from \"./Global\";\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new (_global$()).DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (_global$())?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport {DomQuery, ElementAttribute, DomQueryCollector, DQ, DQ$} from \"./DomQuery\";\nexport {Lang} from \"./Lang\";\nexport {Config, Monad, IValueHolder, IFunctor, IMonad, IIdentity, Optional, ValueEmbedder} from \"./Monad\";\nexport {XMLQuery, XQ} from \"./XmlQuery\";\nexport {Stream, LazyStream, IteratableConsumer, IStream} from \"./Stream\";\nexport {\n    ArrayStreamDataSource,\n    MappedStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    SequenceDataSource,\n    QueryFormStringCollector,\n    IStreamDataSource,\n    ICollector,\n    ArrayCollector,\n    AssocArrayCollector,\n    FormDataCollector,\n    QueryFormDataCollector\n} from \"./SourcesCollectors\";\n\n\n\n\n\n\n"],"names":["root","factory","exports","module","define","amd","a","i","this","Submittables","trim","Lang","objToArray","isString","equalsIgnoreCase","waitUntilDom","condition","options","attributes","childList","subtree","timeout","interval","Promise","success","error","observer","MUT_ERROR","Error","findElement","childNodes","filter","item","first","value","querySelectorAll","foundElement","DomQuery","MutationObserver","setTimeout","disconnect","mutationList","found","map","mut","target","isPresent","clearTimeout","eachElem","observe","setInterval","clearInterval","element","name","defaultVal","val","get","orElse","values","length","getAttribute","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","style","Style","DEFAULT_WHITELIST","rootNode","pos","_limits","Optional","isAbsent","push","getAsElem","allElems","_global$","getIf","isTag","tagName","nodeName","toLowerCase","absent","inputValue","Stream","of","allMatch","el","checked","newChecked","querySelectorAllDeep","queryStr","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","childNodeArr","concat","asArray","LazyStream","byId","collect","ArrayCollector","elem","offsetWidth","reduce","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","selector","document","indexOf","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","globalEvalSticky","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","nodes","res","foundNodes","selectors","split","cnt2","levelSelector","id","includeRoot","subItems","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","inval","dispatchEvent","evt","retArr","inVal","_mozMatchesSelector","toMatch","prot","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","filterSelector","matched","lazyStream","match","selectorStage","nodeSelector","func","len","firstElem","lastElem","each","last","lastNode","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","appendTo","orElseLazy","loadScriptEval","src","defer","charSet","xhr","XMLHttpRequest","open","setRequestHeader","onload","responseText","replace","onerror","data","send","insertAfter","existingItem","existingElement","nextSibling","toInsertParams","insertElem","insertBefore","elseValue","parents","retSet","Set","lowerTagName","resolveItem","has","host","copyAttrs","sourceItem","sourceNode","attrs","resolveAttributeHolder","attrName","ret","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","whilteListed","evalCollectedScripts","scriptsToProcess","evalText","finalScripts","equi","execScrpt","itemType","text","innerText","go","substring","stream","flatMap","sort","node1","node2","compareDocumentPosition","e","console","message","description","applyStyle","newSS","styleSheet","sheet","cssText","createTextNode","Array","prototype","forEach","child","execCss","click","fireEvent","addEventListener","listener","removeEventListener","eventName","nodeType","eventClass","createEvent","initEvent","synthetic","createEventObject","textContent","joinstr","text1","text2","encodeFormElement","toMerge","Config","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","append","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","reduced","subNodes","from","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","ITERATION_STATUS","EO_STRM","current","BEF_STRM","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","DomQueryCollector","idx","notFound","prependTo","prepend","global","DQ","DQ$","globalThis","window","g","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","Object","assign","theArgs","nextSource","keys","nextKey","hasOwnProperty","_value","fn","Monad","currentPos","key","currKey","keyVal","arrPos","arrayIndex","getIfPresent","toJson","JSON","stringify","start","parseInt","resolve","resolver","rootElem","newVal","alternative","ConfigEntry","shallowCopy$","ofAssoc","AssocArrayCollector","deepCopy$","shallowMerge","other","overwrite","withAppend","isArray","noKeys","accessPath","lastKey","pathExists","buildPath","finalKeyArrPos","retVal","apply","appendIf","assignIf","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","total","SequenceDataSource","dataPos","max","ArrayStreamDataSource","filterFunc","parent","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","lookupVal","loop","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","readjustSkip","dataSource","skippedElems","datasource","howManyElems","dsLoop","currDatasource","toDatasource","ds","FlatMapStreamDataSource","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ofDataSource","toAppend","onElem","strmR","startVal","val1","anyMatch","noneMatch","comparator","newArr","collector","ofStreamDataSource","isOverLimits","nextFilter","t","stop","value1","value2","el1","el2","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","toString","serialized","XMLSerializer","constructor","serializeToString","parserErrorText","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}