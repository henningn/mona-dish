define(function() { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main/typescript/XmlQuery.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/main/typescript/DomQuery.ts":
/*!*****************************************!*\
  !*** ./src/main/typescript/DomQuery.ts ***!
  \*****************************************/
/*! exports provided: ElementAttribute, DomQuery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ElementAttribute\", function() { return ElementAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DomQuery\", function() { return DomQuery; });\n/* harmony import */ var _Lang__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Lang */ \"./src/main/typescript/Lang.ts\");\n/* harmony import */ var _Monad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Monad */ \"./src/main/typescript/Monad.ts\");\n/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass ElementAttribute {\n    constructor(element, attributeName, defaultVal = null) {\n        this.element = element;\n        this.attributeName = attributeName;\n        this.defaultVal = defaultVal;\n    }\n    set value(value) {\n        let val = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.attributeName, value);\n        }\n        val[0].setAttribute(this.attributeName, value);\n    }\n    get value() {\n        let val = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.attributeName);\n    }\n}\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nclass DomQuery {\n    constructor(...rootNode) {\n        this.rootNode = [];\n        if (_Monad__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"].fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        }\n        else {\n            //we need to flatten out the arrays\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (_Lang__WEBPACK_IMPORTED_MODULE_0__[\"Lang\"].instance.isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values);\n                    }\n                }\n                else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...rootNode[cnt].values);\n                }\n                else if (_Lang__WEBPACK_IMPORTED_MODULE_0__[\"Lang\"].instance.isString(rootNode[cnt])) {\n                    let result = DomQuery.querySelectorAll(rootNode[cnt]);\n                    this.rootNode.push(...result.values);\n                }\n                else {\n                    this.rootNode.push(rootNode[cnt]);\n                }\n            }\n        }\n    }\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index) {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index\n     */\n    getAsElem(index, defaults) {\n        return (index < this.rootNode.length) ? _Monad__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"].fromNullable(this.rootNode[index]) : (defaults) ? defaults : _Monad__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"].absent;\n    }\n    /**\n     * returns the value array< of all elements\n     */\n    allElems() {\n        return this.rootNode;\n    }\n    /**\n     * absent no values reached?\n     */\n    isAbsent() {\n        return this.length == 0;\n    }\n    /**\n     * any value present\n     */\n    isPresent() {\n        return !this.isAbsent();\n    }\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector) {\n        return new DomQuery(document).querySelectorAll(selector);\n    }\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector) {\n        if (this.rootNode.length == 0) {\n            return this;\n        }\n        let nodes = [];\n        let nodeIdx = {};\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt].querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(_Lang__WEBPACK_IMPORTED_MODULE_0__[\"Lang\"].instance.objToArray(res));\n        }\n        return new DomQuery(...nodes);\n    }\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector) {\n        if (_Lang__WEBPACK_IMPORTED_MODULE_0__[\"Lang\"].instance.isString(selector)) {\n            return new DomQuery(document).byId(selector);\n        }\n        else {\n            return new DomQuery(selector);\n        }\n    }\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector) {\n        if (_Lang__WEBPACK_IMPORTED_MODULE_0__[\"Lang\"].instance.isString(selector)) {\n            return new DomQuery(document).byTagName(selector);\n        }\n        else {\n            return new DomQuery(selector);\n        }\n    }\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id, includeRoot) {\n        let res = [];\n        for (let cnt = 0; includeRoot && cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].id == id) {\n                res.push(new DomQuery(this.rootNode[cnt]));\n            }\n        }\n        res = res.concat(this.querySelectorAll(\"#\" + id));\n        return new DomQuery(...res);\n    }\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName, includeRoot) {\n        let res = [];\n        for (let cnt = 0; includeRoot && cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].tagName == tagName) {\n                res.push(new DomQuery(this.rootNode[cnt]));\n            }\n        }\n        res = res.concat(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr\n     */\n    attr(attr, noneGetValue = null) {\n        return new ElementAttribute(this, attr, noneGetValue);\n    }\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz) {\n        let hasIt = false;\n        this.each((item) => {\n            let oldClass = item.attr(\"class\").value || \"\";\n            if (oldClass.toLowerCase().indexOf(clazz.toLowerCase()) == -1) {\n                return;\n            }\n            else {\n                let oldClasses = oldClass.split(/\\s+/gi);\n                let found = false;\n                for (let cnt = 0; cnt < oldClasses.length && !found; cnt++) {\n                    found = oldClasses[cnt].toLowerCase() == clazz.toLowerCase();\n                }\n                hasIt = hasIt || found;\n                if (hasIt) {\n                    return false;\n                }\n            }\n        });\n        return hasIt;\n    }\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz) {\n        this.each((item) => {\n            let oldClass = item.attr(\"class\").value || \"\";\n            if (!this.hasClass(clazz)) {\n                item.attr(\"class\").value = _Lang__WEBPACK_IMPORTED_MODULE_0__[\"Lang\"].instance.trim(oldClass + \" \" + clazz);\n                return;\n            }\n        });\n        return this;\n    }\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz) {\n        this.each((item) => {\n            if (this.hasClass(clazz)) {\n                let oldClass = item.attr(\"class\").value || \"\";\n                let newClasses = [];\n                let oldClasses = oldClass.split(/\\s+/gi);\n                for (let cnt = 0; cnt < oldClasses.length; cnt++) {\n                    if (oldClasses[cnt].toLowerCase() != clazz.toLowerCase()) {\n                        newClasses.push(oldClasses[cnt]);\n                    }\n                }\n                item.attr(\"class\").value = newClasses.join(\" \");\n            }\n        });\n        return this;\n    }\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate() {\n        let found = false;\n        return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\n    }\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval) {\n        if (_Monad__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"].fromNullable(inval).isAbsent()) {\n            return this.getAsElem(0).isPresent() ? _Monad__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"].fromNullable(this.getAsElem(0).value.innerHTML) : _Monad__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"].absent;\n        }\n        if (this.getAsElem(0).isPresent()) {\n            this.getAsElem(0).value.innerHTML = inval;\n        }\n        return this;\n    }\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector) {\n        return this.querySelectorAll(\" > \" + nodeSelector.join(\">\"));\n    }\n    /**\n     * returns the elements of this dom tree, always as array (keep that in mind)\n     */\n    get value() {\n        return this.getAsElem(0);\n    }\n    get values() {\n        return this.allElems();\n    }\n    /**\n     * returns the id of the first element\n     */\n    get id() {\n        return this.getAsElem(0).getIf(\"id\");\n    }\n    /**\n     * length of the entire query set\n     */\n    get length() {\n        return this.rootNode.length;\n    }\n    /**\n     * convenience method for tagName\n     */\n    get tagName() {\n        return this.getAsElem(0).getIf(\"tagName\");\n    }\n    /**\n     * convenience method for type\n     */\n    get type() {\n        return _Monad__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"].fromNullable(this.get(0).attr(\"type\").value);\n    }\n    eachElem(func) {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n    firstElem(func = item => item) {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n    each(func) {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.get(cnt), cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func = (item) => item) {\n        if (this.rootNode.length > 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func) {\n        let reArr = [];\n        this.each((item) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...reArr);\n    }\n    /**\n     * globa eval head appendix method\n     * no other methods are supported anymore\n     * @param code\n     */\n    globalEval(code, nonce) {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.text = code;\n        head.insertBefore(script, head.firstChild);\n        head.removeChild(script);\n        return this;\n    }\n    static globalEval(code) {\n        return new DomQuery(document).globalEval(code);\n    }\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach() {\n        this.eachElem((item) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem) {\n        this.eachElem((item) => {\n            let value1 = elem.getAsElem(0).get(_Monad__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"].fromNullable({ appendChild: (any) => { } })).value;\n            value1.appendChild(item);\n        });\n    }\n    //TODO append prepend\n    loadScriptEval(src, type, defer, charSet, async) {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n        xhr.send(null);\n        //since we are synchronous we do it after not with onReadyStateChange\n        if (xhr.readyState == 4) {\n            if (xhr.status == 200) {\n                //defer also means we have to process after the ajax response\n                //has been processed\n                //we can achieve that with a small timeout, the timeout\n                //triggers after the processing is done!\n                if (!defer) {\n                    this.globalEval(xhr.responseText.replace(\"\\n\", \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n                }\n                else {\n                    //TODO not ideal we maybe ought to move to something else here\n                    //but since it is not in use yet, it is ok\n                    setTimeout(function () {\n                        this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                    }, 1);\n                }\n            }\n            else {\n                throw Error(xhr.responseText);\n            }\n        }\n        else {\n            throw Error(\"Loading of script \" + src + \" failed \");\n        }\n        return this;\n    }\n    insertAfter(...elem) {\n        let sibling = this.getAsElem(0).value;\n        for (let cnt = 0; cnt < elem.length; cnt++) {\n            elem[cnt].eachElem((myElem) => {\n                sibling.parentNode.insertBefore(myElem, sibling.nextSibling);\n                sibling = sibling.nextSibling;\n                this.rootNode.push(myElem);\n            });\n        }\n        return this;\n    }\n    insertBefore(...elem) {\n        for (let cnt = 0; cnt < elem.length; cnt++) {\n            elem[cnt].eachElem((myElem) => {\n                this.getAsElem(0).value.parentNode.insertBefore(myElem, this.getAsElem(0).value);\n                this.rootNode.push(myElem);\n            });\n        }\n        return this;\n    }\n    orElse(...elseValue) {\n        if (this.isPresent()) {\n            return this;\n        }\n        else {\n            return new DomQuery(...elseValue);\n        }\n    }\n    orElseLazy(func) {\n        if (this.isPresent()) {\n            return this;\n        }\n        else {\n            return new DomQuery(func());\n        }\n    }\n    parents(tagName) {\n        let retArr = [];\n        const lowerTagName = tagName.toLowerCase();\n        let resolveItem = (item) => {\n            if (item.tagName.toLowerCase() == lowerTagName) {\n                retArr.push(item);\n            }\n        };\n        this.eachElem((item) => {\n            while (item.parentNode) {\n                item = item.parentNode;\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n        return new DomQuery(...retArr);\n    }\n    get childNodes() {\n        let childNodeArr = [];\n        this.eachElem((item) => {\n            childNodeArr = childNodeArr.concat(_Lang__WEBPACK_IMPORTED_MODULE_0__[\"Lang\"].instance.objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n    copyAttrs(sourceItem) {\n        sourceItem.eachElem((sourceNode) => {\n            for (let cnt = 0; cnt < sourceNode.attributes.length; cnt++) {\n                let value = sourceNode.attributes[cnt].value;\n                if (value) {\n                    this.attr(sourceNode.attributes[cnt].name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n    subNodes(from, to) {\n        if (_Monad__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"].fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup, runEmbeddedScripts, runEmbeddedCss) {\n        let nodes = DomQuery.fromMarkup(markup);\n        this.getAsElem(0).value.parentNode.replaceChild(nodes.getAsElem(0).value, this.getAsElem(0).value);\n        this.rootNode = [];\n        this.rootNode = this.rootNode.concat(nodes.values);\n        // this.rootNode.push(nodes.value);\n        for (let cnt = 1; cnt < nodes.length; cnt++) {\n            this.insertAfter(nodes.get(cnt));\n        }\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n        return this;\n    }\n    /**\n     * Run through the given Html item and execute the inline scripts\n     * (IE doesn't do this by itself)\n     * @param {Node} item\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     */\n    runScripts(whilteListed = (src) => {\n        return (src.indexOf(\"ln=scripts\") == -1 &&\n            src.indexOf(\"ln=javax.faces\") == -1) ||\n            (src.indexOf(\"/jsf.js\") == -1 &&\n                src.indexOf(\"/jsf-uncompressed.js\") == -1);\n    }) {\n        let _Lang = _Lang__WEBPACK_IMPORTED_MODULE_0__[\"Lang\"].instance, finalScripts = [], execScrpt = (item) => {\n            let tagName = item.tagName;\n            let itemType = item.type || \"\";\n            if (tagName && _Lang.equalsIgnoreCase(tagName, \"script\") &&\n                (itemType === \"\" || _Lang.equalsIgnoreCase(itemType, \"text/javascript\") ||\n                    _Lang.equalsIgnoreCase(itemType, \"javascript\") ||\n                    _Lang.equalsIgnoreCase(itemType, \"text/ecmascript\") ||\n                    _Lang.equalsIgnoreCase(itemType, \"ecmascript\"))) {\n                let src = item.getAttribute('src');\n                if ('undefined' != typeof src\n                    && null != src\n                    && src.length > 0) {\n                    //we have to move this into an inner if because chrome otherwise chokes\n                    //due to changing the and order instead of relying on left to right\n                    //if jsf.js is already registered we do not replace it anymore\n                    if (whilteListed(src)) {\n                        if (finalScripts.length) {\n                            //script source means we have to eval the existing\n                            //scripts before running the include\n                            this.globalEval(finalScripts.join(\"\\n\"));\n                            finalScripts = [];\n                        }\n                        this.loadScriptEval(src, item.getAttribute('type'), false, \"UTF-8\", false);\n                    }\n                }\n                else {\n                    // embedded script auto eval\n                    let test = item.text;\n                    let go = true;\n                    while (go) {\n                        go = false;\n                        if (test.substring(0, 1) == \" \") {\n                            test = test.substring(1);\n                            go = true;\n                        }\n                        if (test.substring(0, 4) == \"<!--\") {\n                            test = test.substring(4);\n                            go = true;\n                        }\n                        if (test.substring(0, 11) == \"//<![CDATA[\") {\n                            test = test.substring(11);\n                            go = true;\n                        }\n                    }\n                    // we have to run the script under a global context\n                    //we store the script for less calls to eval\n                    finalScripts.push(test);\n                }\n            }\n        };\n        try {\n            let scriptElements = this.querySelectorAll(\"script\");\n            if (scriptElements == null)\n                return;\n            for (let cnt = 0; cnt < scriptElements.length; cnt++) {\n                execScrpt(scriptElements.getAsElem(cnt).value);\n            }\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        }\n        catch (e) {\n            if (window.console && window.console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        }\n        finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n    }\n    runCss() {\n        const UDEF = \"undefined\", \n        // _RT = this._RT,\n        _Lang = _Lang__WEBPACK_IMPORTED_MODULE_0__[\"Lang\"].instance, applyStyle = (item, style) => {\n            let newSS = document.createElement(\"style\");\n            document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n            let styleSheet = newSS.sheet ? newSS.sheet : newSS.styleSheet;\n            newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") || \"stylesheet\");\n            newSS.setAttribute(\"type\", item.getAttribute(\"type\") || \"text/css\");\n            if (UDEF != typeof styleSheet.cssText) {\n                styleSheet.cssText = style;\n            }\n            else {\n                newSS.appendChild(document.createTextNode(style));\n            }\n        }, execCss = (item) => {\n            const equalsIgnoreCase = _Lang.equalsIgnoreCase;\n            const tagName = item.tagName;\n            if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n            }\n            else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                let innerText = [];\n                //compliant browsers know child nodes\n                let childNodes = item.childNodes;\n                if (childNodes) {\n                    const len = childNodes.length;\n                    for (let cnt = 0; cnt < len; cnt++) {\n                        innerText.push(childNodes[cnt].innerHTML || childNodes[cnt].data);\n                    }\n                    //non compliant ones innerHTML\n                }\n                else if (item.innerHTML) {\n                    innerText.push(item.innerHTML);\n                }\n                applyStyle(item, innerText.join(\"\"));\n            }\n        };\n        const scriptElements = this.querySelectorAll(\"link, style\");\n        if (scriptElements == null)\n            return;\n        for (let cnt = 0; cnt < scriptElements.length; cnt++) {\n            let element = scriptElements.getAsElem(cnt);\n            execCss(element.value);\n        }\n        return this;\n    }\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click() {\n        this.fireEvent(\"click\");\n        return this;\n    }\n    addEventListener(type, listener, options) {\n        this.eachElem((node) => {\n            node.addEventListener(type, listener, options);\n        });\n        return this;\n    }\n    removeEventListener(type, listener, options) {\n        this.eachElem((node) => {\n            node.removeEventListener(type, listener, options);\n        });\n        return this;\n    }\n    /**\n     * fires an event\n     */\n    fireEvent(eventName) {\n        this.eachElem((node) => {\n            var doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            }\n            else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            }\n            else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                var eventClass = \"\";\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                var event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            }\n            else if (node.fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                var event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                node.fireEvent(\"on\" + eventName, event);\n            }\n        });\n    }\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup) {\n        //TODO check if ie8 still has this problem, probably not we probably\n        //can drop this code in favor of html\n        //now to the non w3c compliant browsers\n        //http://blogs.perl.org/users/clinton_gormley/2010/02/forcing-ie-to-accept-script-tags-in-innerhtml.html\n        //we have to cope with deficiencies between ie and its simulations in this case\n        let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n        //fortunately a table element also works which is less critical than form elements regarding\n        //the inner content\n        dummyPlaceHolder.html(\"<table><tbody><tr><td>\" + markup + \"</td></tr></tbody></table>\");\n        let childs = dummyPlaceHolder.querySelectorAll(\"td\").get(0).childNodes;\n        childs.detach();\n        dummyPlaceHolder.html(\"\");\n        return childs;\n    }\n    //TODO maybe move this out into a specialized domquery implementation\n    //in the myfaces project\n    encodeElement(element, targetBuf) {\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (!element.name) {\n            return;\n        }\n        let name = element.name;\n        let tagName = element.tagName.toLowerCase();\n        let elemType = element.type;\n        if (elemType != null) {\n            elemType = elemType.toLowerCase();\n        }\n        // routine for all elements\n        // rules:\n        // - process only inputs, textareas and selects\n        // - elements muest have attribute \"name\"\n        // - elements must not be disabled\n        if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n            (name != null && name != \"\")) && !element.disabled) {\n            // routine for select elements\n            // rules:\n            // - if select-one and value-Attribute exist => \"name=value\"\n            // (also if value empty => \"name=\")\n            // - if select-one and value-Attribute don't exist =>\n            // \"name=DisplayValue\"\n            // - if select multi and multple selected => \"name=value1&name=value2\"\n            // - if select and selectedIndex=-1 don't submit\n            if (tagName == \"select\") {\n                // selectedIndex must be >= 0 sein to be submittet\n                if (element.selectedIndex >= 0) {\n                    let uLen = element.options.length;\n                    for (let u = 0; u < uLen; u++) {\n                        // find all selected options\n                        //let subBuf = [];\n                        if (element.options[u].selected) {\n                            let elementOption = element.options[u];\n                            targetBuf[name] = (elementOption.getAttribute(\"value\") != null) ?\n                                elementOption.getAttribute(\"value\") : elementOption.getAttribute(\"text\");\n                        }\n                    }\n                }\n            }\n            // routine for remaining elements\n            // rules:\n            // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n            // - submit checkboxes and radio inputs only if checked\n            if ((tagName != \"select\" && elemType != \"button\"\n                && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n                && ((elemType != \"checkbox\" && elemType != \"radio\") || element.checked)) {\n                if ('undefined' != typeof element.files && element.files != null && element.files.length) {\n                    //xhr level2\n                    targetBuf[name] = element.files[0];\n                }\n                else {\n                    targetBuf[name] = element.value;\n                }\n            }\n        }\n    }\n}\nDomQuery.absent = new DomQuery();\n\n\n//# sourceURL=webpack:///./src/main/typescript/DomQuery.ts?");

/***/ }),

/***/ "./src/main/typescript/Lang.ts":
/*!*************************************!*\
  !*** ./src/main/typescript/Lang.ts ***!
  \*************************************/
/*! exports provided: Lang */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Lang\", function() { return Lang; });\n/* harmony import */ var _Promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Promise */ \"./src/main/typescript/Promise.ts\");\n/* harmony import */ var _Monad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Monad */ \"./src/main/typescript/Monad.ts\");\n/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nclass Lang {\n    static get instance() {\n        if (!Lang._instance) {\n            Lang._instance = new Lang();\n        }\n        return Lang._instance;\n    }\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return an array of the splitted string\n     */\n    strToArray(it, splitter = /\\./gi) {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        let retArr = it.split(splitter);\n        for (let cnt = 0; cnt < retArr.length; cnt++) {\n            retArr[cnt] = this.trim(retArr[cnt]);\n        }\n        return retArr;\n    }\n    arrToMap(arr, offset = 0) {\n        var ret = new Array(arr.length);\n        var len = arr.length;\n        offset = (offset) ? offset : 0;\n        for (var cnt = 0; cnt < len; cnt++) {\n            ret[arr[cnt]] = cnt + offset;\n        }\n        return ret;\n    }\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    trim(str) {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    isString(it) {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n    isFunc(it) {\n        return it instanceof Function || typeof it === \"function\";\n    }\n    /**\n     * hitch backported from dojo\n     * hitch allows to assign a function to a dedicated scope\n     * this is helpful in situations when function reassignments\n     * can happen\n     * (notably happens often in lazy xhr code)\n     *\n     * @param {Function} scope of the function to be executed in\n     * @param {Function} method to be executed, the method must be of type function\n     *\n     * @return whatever the executed method returns\n     *\n     */\n    hitch(scope, method) {\n        return !scope ? method : function () {\n            return method.apply(scope, arguments || []);\n        }; // Function\n    }\n    /**\n     * simplified merge maps which basically produces\n     * a final merged map from left to right\n     * the function is sideffect free\n     * @param maps\n     */\n    mergeMaps(maps, overwrite = true, blockFilter, whitelistFilter) {\n        let retVal = {};\n        this.arrForEach(maps, (item) => {\n            this.mixMaps(retVal, item, overwrite);\n        });\n        return retVal;\n    }\n    /**\n     * Helper function to merge two maps\n     * into one\n     * @param {Object} dest the destination map\n     * @param {Object} src the source map\n     * @param {boolean} overwrite if set to true the destination is overwritten if the keys exist in both maps\n     * @param blockFilter\n     * @param whitelistFilter\n     **/\n    mixMaps(dest, src, overwrite, blockFilter, whitelistFilter) {\n        let UNDEF = \"undefined\";\n        for (let key in src) {\n            if (!src.hasOwnProperty(key))\n                continue;\n            if (blockFilter && blockFilter[key]) {\n                continue;\n            }\n            if (whitelistFilter && !whitelistFilter[key]) {\n                continue;\n            }\n            if (!overwrite) {\n                /**\n                 *we use exists instead of booleans because we cannot rely\n                 *on all values being non boolean, we would need an getIf\n                 *operator in javascript to shorten this :-(\n                 */\n                dest[key] = (UNDEF != typeof dest[key]) ? dest[key] : src[key];\n            }\n            else {\n                dest[key] = (UNDEF != typeof src[key]) ? src[key] : dest[key];\n            }\n        }\n        return dest;\n    }\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    objToArray(obj, offset, pack) {\n        if (!obj) {\n            return pack || null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if (obj instanceof Array && !offset && !pack)\n            return obj;\n        let finalOffset = ('undefined' != typeof offset || null != offset) ? offset : 0;\n        let finalPack = pack || [];\n        try {\n            return finalPack.concat(Array.prototype.slice.call(obj, finalOffset));\n        }\n        catch (e) {\n            //ie8 (again as only browser) delivers for css 3 selectors a non convertible object\n            //we have to do it the hard way\n            //ie8 seems generally a little bit strange in its behavior some\n            //objects break the function is everything methodology of javascript\n            //and do not implement apply call, or are pseudo arrays which cannot\n            //be sliced\n            for (let cnt = finalOffset; cnt < obj.length; cnt++) {\n                finalPack.push(obj[cnt]);\n            }\n            return finalPack;\n        }\n    }\n    /**\n     * foreach implementation utilizing the\n     * ECMAScript wherever possible\n     * with added functionality\n     *\n     * @param arr the array to filter\n     * @param callbackfn\n     * @param startPos\n     * @param scope the closure to apply the function to, with the syntax defined by the ecmascript functionality\n     * function (element<,key, array>)\n     * <p />\n     * optional params\n     * <p />\n     * <ul>\n     *      <li>param startPos (optional) the starting position </li>\n     *      <li>param scope (optional) the scope to apply the closure to  </li>\n     * </ul>\n     */\n    arrForEach(arr, callbackfn, startPos, scope) {\n        if (!arr || !arr.length)\n            return;\n        let startPosFinal = startPos || 0;\n        let thisObj = scope;\n        //check for an existing foreach mapping on array prototypes\n        //IE9 still does not pass array objects as result for dom ops\n        let convertedArr = this.objToArray(arr);\n        (startPos) ? convertedArr.slice(startPosFinal).forEach(callbackfn, thisObj) : convertedArr.forEach(callbackfn, thisObj);\n    }\n    /**\n     * checks if an array contains an element\n     * @param {Array} arr   array\n     * @param {String} str string to check for\n     */\n    contains(arr, str) {\n        if (!arr || !str) {\n            throw Error(\"null value on arr or str not allowed\");\n        }\n        return this.arrIndexOf(arr, str) != -1;\n    }\n    /**\n     * adds a EcmaScript optimized indexOf to our mix,\n     * checks for the presence of an indexOf functionality\n     * and applies it, otherwise uses a fallback to the hold\n     * loop method to determine the index\n     *\n     * @param arr the array\n     * @param element the index to search for\n     * @param fromIndex\n     */\n    arrIndexOf(arr, element, fromIndex) {\n        if (!arr || !arr.length)\n            return -1;\n        let pos = fromIndex || 0;\n        arr = this.objToArray(arr);\n        return arr.indexOf(element, pos);\n    }\n    /**\n     * filter implementation utilizing the\n     * ECMAScript wherever possible\n     * with added functionality\n     *\n     * @param arr the array to filter\n     * @param scope the closure to apply the function to, with the syntax defined by the ecmascript functionality\n     * function (element<,key, array>)\n     * <p />\n     * additional params\n     * <ul>\n     *  <li> startPos (optional) the starting position</li>\n     *  <li> scope (optional) the scope to apply the closure to</li>\n     * </ul>\n     */\n    arrFilter(arr, callbackfn, startPos, scope) {\n        if (!arr || !arr.length)\n            return [];\n        let arrFinal = this.objToArray(arr);\n        return ((startPos) ? arrFinal.slice(startPos).filter(callbackfn, scope) : arrFinal.filter(callbackfn, scope));\n    }\n    /**\n     * helper to automatically apply a delivered arguments map or array\n     * to its destination which has a field \"_\"<key> and a full field\n     *\n     * @param dest the destination object\n     * @param args the arguments array or map\n     * @param argNames the argument names to be transferred\n     */\n    /**\n     * helper to automatically apply a delivered arguments map or array\n     * to its destination which has a field \"_\"<key> and a full field\n     *\n     * @param dest the destination object\n     * @param args the arguments array or map\n     * @param argNames the argument names to be transferred\n     */\n    applyArgs(dest, args, argNames) {\n        let UDEF = 'undefined';\n        if (argNames) {\n            for (let cnt = 0; cnt < args.length; cnt++) {\n                //dest can be null or 0 hence no shortcut\n                if (UDEF != typeof dest[\"_\" + argNames[cnt]]) {\n                    dest[\"_\" + argNames[cnt]] = args[cnt];\n                }\n                if (UDEF != typeof dest[argNames[cnt]]) {\n                    dest[argNames[cnt]] = args[cnt];\n                }\n            }\n        }\n        else {\n            for (let key in args) {\n                if (!args.hasOwnProperty(key))\n                    continue;\n                if (UDEF != typeof dest[\"_\" + key]) {\n                    dest[\"_\" + key] = args[key];\n                }\n                if (UDEF != typeof dest[key]) {\n                    dest[key] = args[key];\n                }\n            }\n        }\n        return dest;\n    }\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    equalsIgnoreCase(source, destination) {\n        //either both are not set or null\n        if (!source && !destination) {\n            return true;\n        }\n        //source or dest is set while the other is not\n        if (!source || !destination)\n            return false;\n        //in any other case we do a strong string comparison\n        return source.toLowerCase() === destination.toLowerCase();\n    }\n    /*\n     * Promise wrappers for timeout and interval\n     */\n    timeout(timeout) {\n        let handler = null;\n        return new _Promise__WEBPACK_IMPORTED_MODULE_0__[\"CancellablePromise\"]((apply, reject) => {\n            handler = setTimeout(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearTimeout(handler);\n                handler = null;\n            }\n        });\n    }\n    interval(timeout) {\n        let handler = null;\n        return new _Promise__WEBPACK_IMPORTED_MODULE_0__[\"CancellablePromise\"]((apply, reject) => {\n            handler = setInterval(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearInterval(handler);\n                handler = null;\n            }\n        });\n    }\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    assertType(probe, theType) {\n        return this.isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    static saveResolve(resolverProducer, defaultValue = null) {\n        try {\n            let result = resolverProducer();\n            if (\"undefined\" == typeof result || null == result) {\n                return _Monad__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"].fromNullable(defaultValue);\n            }\n            return _Monad__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"].fromNullable(result);\n        }\n        catch (e) {\n            return _Monad__WEBPACK_IMPORTED_MODULE_1__[\"Optional\"].absent;\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./src/main/typescript/Lang.ts?");

/***/ }),

/***/ "./src/main/typescript/Monad.ts":
/*!**************************************!*\
  !*** ./src/main/typescript/Monad.ts ***!
  \**************************************/
/*! exports provided: Monad, Stream, Optional, Config */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Monad\", function() { return Monad; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Stream\", function() { return Stream; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Optional\", function() { return Optional; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Config\", function() { return Config; });\n/* harmony import */ var _Lang__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Lang */ \"./src/main/typescript/Lang.ts\");\n/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n/*IMonad definitions*/\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nclass Monad {\n    constructor(value) {\n        this._value = value;\n    }\n    map(fn) {\n        if (!fn) {\n            fn = (inval) => inval;\n        }\n        let result = fn(this.value);\n        return new Monad(result);\n    }\n    flatMap(fn) {\n        let mapped = this.map(fn);\n        while (\"undefined\" != typeof mapped && mapped != null && mapped.value instanceof Monad) {\n            mapped = mapped.value;\n        }\n        return mapped;\n    }\n    get value() {\n        return this._value;\n    }\n}\n/*\n * A small stream implementation\n */\nclass Stream {\n    constructor(...value) {\n        this.value = value;\n    }\n    static of(...data) {\n        return new Stream(...data);\n    }\n    each(fn) {\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n    map(fn) {\n        if (!fn) {\n            fn = (inval) => inval;\n        }\n        let res = [];\n        this.each((item, cnt) => {\n            res.push(fn(item));\n        });\n        return new Stream(...res);\n    }\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap(fn) {\n        let mapped = this.map(fn);\n        let res = this.mapStreams(mapped);\n        return new Stream(...res);\n    }\n    filter(fn) {\n        let res = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream(...res);\n    }\n    reduce(fn, startVal = null) {\n        let offset = startVal != null ? 0 : 1;\n        let val1 = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n        for (let cnt = offset; cnt < this.value.length; cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable(val1);\n    }\n    first() {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n    last() {\n        //could be done via reduce, but is faster this way\n        return Optional.fromNullable(this.value.length ? this.value[this.value.length - 1] : null);\n    }\n    anyMatch(fn) {\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    allMatch(fn) {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n    noneMatch(fn) {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n    mapStreams(mapped) {\n        let res = [];\n        mapped.each((data) => {\n            if (data instanceof Stream) {\n                res = res.concat(this.mapStreams(data));\n            }\n            else {\n                res.push(data);\n            }\n        });\n        return res;\n    }\n}\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nclass Optional extends Monad {\n    constructor(value) {\n        super(value);\n    }\n    static fromNullable(value) {\n        return new Optional(value);\n    }\n    /*syntactic sugar for absent and present checks*/\n    isAbsent() {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n    isPresent() {\n        return !this.isAbsent();\n    }\n    orElse(elseValue) {\n        if (this.isPresent()) {\n            return this;\n        }\n        else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func) {\n        if (this.isPresent()) {\n            return this;\n        }\n        else {\n            return this.flatMap(func);\n        }\n    }\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap(fn) {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n        return val.flatMap();\n    }\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent(key) {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf(...key) {\n        let currentPos = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            }\n            else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            }\n            else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            }\n            else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n        return retVal;\n    }\n    get value() {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value;\n        }\n        return this._value;\n    }\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn) {\n        if (this.isAbsent()) {\n            return false;\n        }\n        return fn(this.value);\n    }\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get(defaultVal = Optional.absent) {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    getClass() {\n        return Optional;\n    }\n    toJson() {\n        return JSON.stringify(this.value);\n    }\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    arrayIndex(key) {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        }\n        else {\n            return -1;\n        }\n    }\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    keyVal(key) {\n        let start = key.indexOf(\"[\");\n        if (start >= 0) {\n            return key.substring(0, start);\n        }\n        else {\n            return key;\n        }\n    }\n}\n/*default value for absent*/\nOptional.absent = Optional.fromNullable(null);\n/**\n * helper class to allow write access to the config\n * in certain situations (after an apply call)\n */\nclass ConfigEntry {\n    constructor(rootElem, key, arrPos) {\n        this.rootElem = rootElem;\n        this.key = key;\n        this.arrPos = (\"undefined\" != typeof arrPos) ? arrPos : -1;\n    }\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this.rootElem[this.arrPos];\n        }\n        else if (this.key && this.arrPos >= 0) {\n            return this.rootElem[this.key][this.arrPos];\n        }\n        return this.rootElem[this.key];\n    }\n    set value(val) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this.rootElem[this.arrPos] = val;\n            return;\n        }\n        else if (this.key && this.arrPos >= 0) {\n            this.rootElem[this.key][this.arrPos] = val;\n            return;\n        }\n        this.rootElem[this.key] = val;\n    }\n}\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nclass Config extends Optional {\n    constructor(root) {\n        super(root);\n    }\n    static fromNullable(value) {\n        return new Config(value);\n    }\n    apply(...keys) {\n        if (keys.length < 1) {\n            return;\n        }\n        this.buildPath(keys);\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value, currKey, arrPos);\n        return retVal;\n    }\n    applyIf(condition, ...keys) {\n        return condition ? this.apply(keys) : { value: null };\n    }\n    getIf(...keys) {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n    get(defaultVal) {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n    //empties the current config entry\n    delete(key) {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n    toJson() {\n        return JSON.stringify(this.value);\n    }\n    get shallowCopy() {\n        return new Config(_Lang__WEBPACK_IMPORTED_MODULE_0__[\"Lang\"].instance.mergeMaps([{}, this.value || {}]));\n    }\n    getClass() {\n        return Config;\n    }\n    setVal(val) {\n        this._value = val;\n    }\n    buildPath(keys) {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr, length) {\n            if (arr.length < length) {\n                for (let cnt = arr.length; cnt < length; cnt++) {\n                    arr.push({});\n                }\n            }\n        };\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n            if (currKey === \"\" && arrPos >= 0) {\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n            let tempVal = val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = this.getClass().fromNullable(val.value[currKey] = {});\n                }\n                else {\n                    val = tempVal;\n                }\n            }\n            else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = tempVal;\n        }\n        return this;\n    }\n}\n/*we do not implenent array, maps etc.. monads there are libraries like lodash which have been doing that for ages*/\n\n\n//# sourceURL=webpack:///./src/main/typescript/Monad.ts?");

/***/ }),

/***/ "./src/main/typescript/Promise.ts":
/*!****************************************!*\
  !*** ./src/main/typescript/Promise.ts ***!
  \****************************************/
/*! exports provided: PromiseStatus, Promise, CancellablePromise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PromiseStatus\", function() { return PromiseStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Promise\", function() { return Promise; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CancellablePromise\", function() { return CancellablePromise; });\n/* harmony import */ var _Monad__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Monad */ \"./src/main/typescript/Monad.ts\");\n\nvar PromiseStatus;\n(function (PromiseStatus) {\n    PromiseStatus[PromiseStatus[\"PENDING\"] = 0] = \"PENDING\";\n    PromiseStatus[PromiseStatus[\"FULLFILLED\"] = 1] = \"FULLFILLED\";\n    PromiseStatus[PromiseStatus[\"REJECTED\"] = 2] = \"REJECTED\";\n})(PromiseStatus || (PromiseStatus = {}));\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nclass Promise {\n    constructor(executor) {\n        this.status = PromiseStatus.PENDING;\n        this.allFuncs = [];\n        //super(executor);\n        this.value = executor;\n        this.value((data) => this.resolve(data), (data) => this.reject(data));\n    }\n    static all(...promises) {\n        let promiseCnt = 0;\n        let myapply;\n        let myPromise = new Promise((apply, reject) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        executor.__last__ = true;\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n    static race(...promises) {\n        let promiseCnt = 0;\n        let myapply;\n        let myreject;\n        let myPromise = new Promise((apply, reject) => {\n            myapply = apply;\n            myreject = reject;\n        });\n        let thenexecutor = () => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        thenexecutor.__last__ = true;\n        let catchexeutor = () => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        catchexeutor.__last__ = true;\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n    static reject(reason) {\n        let retVal = new Promise((resolve, reject) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => {\n                    reject(val);\n                });\n            }\n            else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n        return retVal;\n    }\n    static resolve(reason) {\n        let retVal = new Promise((resolve, reject) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            }\n            else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n        return retVal;\n    }\n    then(executorFunc, catchfunc) {\n        this.allFuncs.push({ \"then\": executorFunc });\n        if (catchfunc) {\n            this.allFuncs.push({ \"catch\": catchfunc });\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n    catch(executorFunc) {\n        this.allFuncs.push({ \"catch\": executorFunc });\n        this.spliceLastFuncs();\n        return this;\n    }\n    finally(executorFunc) {\n        if (this.__reason__) {\n            this.__reason__.finally(executorFunc);\n            return;\n        }\n        this.allFuncs.push({ \"finally\": executorFunc });\n        this.spliceLastFuncs();\n        return this;\n    }\n    spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                }\n                else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n    resolve(val) {\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n            let funcResult = _Monad__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"].fromNullable(fn.then(val));\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //var func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n                    return;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n    reject(val) {\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            var fn = this.allFuncs.shift();\n            if (fn.catch) {\n                var funcResult = _Monad__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"].fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n    transferIntoNewPromise(val) {\n        for (var cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n    appyFinally() {\n        while (this.allFuncs.length) {\n            var fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n}\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nclass CancellablePromise extends Promise {\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor, cancellator) {\n        super(executor);\n        this.cancellator = () => {\n        };\n        this.cancellator = cancellator;\n    }\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n    then(executorFunc, catchfunc) {\n        return super.then(executorFunc, catchfunc);\n    }\n    catch(executorFunc) {\n        return super.catch(executorFunc);\n    }\n    finally(executorFunc) {\n        return super.finally(executorFunc);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/main/typescript/Promise.ts?");

/***/ }),

/***/ "./src/main/typescript/XmlQuery.ts":
/*!*****************************************!*\
  !*** ./src/main/typescript/XmlQuery.ts ***!
  \*****************************************/
/*! exports provided: XMLQuery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"XMLQuery\", function() { return XMLQuery; });\n/* harmony import */ var _Monad__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Monad */ \"./src/main/typescript/Monad.ts\");\n/* harmony import */ var _Lang__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Lang */ \"./src/main/typescript/Lang.ts\");\n/* harmony import */ var _DomQuery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DomQuery */ \"./src/main/typescript/DomQuery.ts\");\n/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nclass XMLQuery {\n    constructor(...rootNode) {\n        this.rootNode = [];\n        if (_Monad__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"].fromNullable(rootNode).isAbsent()) {\n            return;\n        }\n        else if (rootNode[0] instanceof Array && rootNode.length == 1) {\n            if (!(rootNode[0][0] instanceof _DomQuery__WEBPACK_IMPORTED_MODULE_2__[\"DomQuery\"])) {\n                this.rootNode = this.rootNode.concat(rootNode[0]);\n            }\n            else {\n                for (let cnt = 0; cnt < rootNode[0].length; cnt++) {\n                    rootNode[0][cnt].each((node) => {\n                        this.rootNode.push(node);\n                    });\n                }\n            }\n        }\n        else {\n            if (!(rootNode[0] instanceof _DomQuery__WEBPACK_IMPORTED_MODULE_2__[\"DomQuery\"])) {\n                this.rootNode = this.rootNode.concat(rootNode);\n            }\n            else {\n                for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                    rootNode[cnt].each((node) => {\n                        this.rootNode.push(node);\n                    });\n                }\n            }\n        }\n    }\n    static fromString(data) {\n        return XMLQuery.parseXML(data);\n    }\n    static parseXML(txt) {\n        let ret = XMLQuery._parseXML(txt);\n        return ret;\n    }\n    static _parseXML(txt) {\n        //from jquery\n        let parsedXML;\n        try {\n            parsedXML = new DOMParser().parseFromString(txt, \"text/xml\");\n        }\n        catch (e) {\n            parsedXML = undefined;\n        }\n        let retVal = new XMLQuery(_Lang__WEBPACK_IMPORTED_MODULE_1__[\"Lang\"].instance.objToArray(parsedXML.childNodes));\n        return retVal;\n    }\n    isAbsent() {\n        return !this.rootNode.length;\n    }\n    isPresent() {\n        return !this.isAbsent();\n    }\n    get length() {\n        return this.rootNode.length;\n    }\n    _getIf(tagsFound, path, currLevel) {\n        let nameIdx = {};\n        let tags = path[0].split(\",\");\n        for (let cnt = 0; cnt < tags.length; cnt++) {\n            nameIdx[_Lang__WEBPACK_IMPORTED_MODULE_1__[\"Lang\"].instance.trim(tags[cnt])] = true;\n        }\n        if (path.length == 1) {\n            for (let cnt = 0; currLevel && cnt < currLevel.length; cnt++) {\n                if ((path[0] == \"*\") || nameIdx[currLevel[cnt].nodeName]) {\n                    tagsFound.push(currLevel[cnt]);\n                }\n            }\n            return;\n        }\n        for (let cnt = 0; currLevel && cnt < currLevel.length; cnt++) {\n            if ((path[0] == \"*\") || nameIdx[currLevel[cnt].nodeName]) {\n                this._getIf(tagsFound, path.slice(1, path.length), _Lang__WEBPACK_IMPORTED_MODULE_1__[\"Lang\"].instance.objToArray(currLevel[cnt].childNodes));\n            }\n        }\n    }\n    getIf(...path) {\n        let currLevel = this.rootNode;\n        let tagsFound = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            this._getIf(tagsFound, path, _Lang__WEBPACK_IMPORTED_MODULE_1__[\"Lang\"].instance.objToArray(this.rootNode[cnt].childNodes));\n        }\n        return new XMLQuery(tagsFound);\n    }\n    get(pos) {\n        if (pos > this.rootNode.length - 1) {\n            return XMLQuery.absent;\n        }\n        return new XMLQuery(this.rootNode[pos]);\n    }\n    get value() {\n        return this.rootNode;\n    }\n    get childNodes() {\n        let retVal = [];\n        this.eachElem((item) => {\n            retVal = retVal.concat(_Lang__WEBPACK_IMPORTED_MODULE_1__[\"Lang\"].instance.objToArray(item.childNodes));\n        });\n        return new XMLQuery(...retVal);\n    }\n    eachElem(func) {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.get(cnt).value[0], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n    each(func) {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.get(cnt), cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n    _byTagName(resArr, node, tagName) {\n        if (node && node.nodeName == tagName) {\n            resArr.push(node);\n        }\n        if (node.childNodes) {\n            let nodeArr = _Lang__WEBPACK_IMPORTED_MODULE_1__[\"Lang\"].instance.objToArray(node.childNodes);\n            for (let cnt = 0; cnt < nodeArr.length; cnt++) {\n                this._byTagName(resArr, nodeArr[cnt], tagName);\n            }\n        }\n    }\n    byTagName(tagName) {\n        let res = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            this._byTagName(res, this.rootNode[cnt], tagName);\n        }\n        return new XMLQuery(res);\n    }\n    isXMLParserError() {\n        return this.byTagName(\"parsererror\").isPresent();\n    }\n    textContent(joinstr) {\n        let retStr = [];\n        this.eachElem((item) => {\n            retStr.push(item.textContent);\n        });\n        return retStr.join(joinstr || \" \");\n    }\n    parserErrorText(joinstr) {\n        return this.byTagName(\"parsererror\").textContent(joinstr);\n    }\n    getAttribute(key) {\n        if (this.rootNode.length == 0) {\n            return _Monad__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"].absent;\n        }\n        return _Monad__WEBPACK_IMPORTED_MODULE_0__[\"Optional\"].fromNullable(this.rootNode[0].getAttribute(key));\n    }\n    //TODO insert attribute api like we have it on DomQuery\n    toString() {\n        let ret = [];\n        this.eachElem((node) => {\n            if (typeof window.XMLSerializer != \"undefined\") {\n                ret.push(new window.XMLSerializer().serializeToString(node));\n            }\n            else if (typeof node.xml != \"undefined\") {\n                ret.push(node.xml);\n            }\n        });\n        return ret.join(\"\");\n    }\n    get cDATAAsString() {\n        let cDataBlock = [];\n        // response may contain several blocks\n        this.each((item) => {\n            item.childNodes.eachElem((node) => {\n                cDataBlock.push(node.data);\n            });\n        });\n        return cDataBlock.join('');\n    }\n}\nXMLQuery.absent = new XMLQuery();\n\n\n//# sourceURL=webpack:///./src/main/typescript/XmlQuery.ts?");

/***/ })

/******/ })});;