{"version":3,"sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Messaging.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/TagBuilder.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/index.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"names":["Submittables","trim","Lang","objToArray","isString","equalsIgnoreCase","element","name","defaultVal","val","this","get","orElse","values","length","getAttribute","value","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","DEFAULT_JSF_WHITELIST","src","indexOf","rootNode","pos","_limits","Optional","isAbsent","foundElement","DomQuery","querySelectorAll","push","getAsElem","allElems","getIf","isTag","tagName","nodeName","toLowerCase","isPresent","absent","Stream","of","allMatch","el","checked","newChecked","eachElem","querySelectorAllDeep","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","item","childNodeArr","concat","childNodes","asArray","LazyStream","filter","map","byId","collect","ArrayCollector","selector","document","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","nodes","res","foundNodes","selectors","split","cnt2","levelSelector","id","includeRoot","subItems","reduce","reduction","defaultValue","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","stream","firstElem","isCandidate","first","inval","innerHtml","dispatchEvent","evt","elem","retArr","inVal","_mozMatchesSelector","toMatch","prot","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","matches","window","ownerDocument","i","filterSelector","matched","selectorStage","nodeSelector","func","len","each","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","appendTo","orElseLazy","theItem","loadScriptEval","defer","charSet","xhr","XMLHttpRequest","open","setRequestHeader","send","onload","responseData","setTimeout","responseText","replace","onerror","data","Error","insertAfter","existingItem","existingElement","nextSibling","toInsertParams","insertElem","insertBefore","elseValue","parents","retSet","Set","lowerTagName","resolveItem","has","host","copyAttrs","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","attrName","ret","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","whilteListed","finalScripts","equi","execScrpt","itemType","evalText","text","innerText","go","substring","flatMap","sort","node1","node2","compareDocumentPosition","e","console","error","message","description","applyStyle","style","newSS","styleSheet","sheet","cssText","createTextNode","Array","prototype","forEach","child","execCss","click","fireEvent","addEventListener","listener","options","removeEventListener","eventName","nodeType","eventClass","createEvent","initEvent","synthetic","createEventObject","textContent","joinstr","text1","text2","encodeFormElement","toMerge","Config","target","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","append","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","inputValue","lazyStream","reduced","subNodes","from","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","DomQueryCollector","DQ","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","Object","assign","theArgs","nextSource","keys","nextKey","hasOwnProperty","Direction","Message","targetOrigin","creationDate","Date","getMilliseconds","identifier","random","DispatchDirection","channel","detail","bubbles","cancelable","composed","messageListeners","processedMessages","cleanupCnt","TIMEOUT_IN_MS","MSG_EVENT","registerListener","reserveListenerNS","msg","unregisterListener","answer","request","broadcast","messageId","Promise","resolve","reject","timeout","message2","clearTimeout","EVENT_TYPE","brokerFactory","channelGroup","BroadcastChannel","openChannels","msgListener","messageData","event","includeOrigin","internalChannelName","getInternalChannelName","connectToChannel","messageWrapper","MessageWrapper","postMessage","register","unregister","key","close","BaseBroker","BroadcastChannelBroker","scopeElement","msgHandler","details","evtHandler","rootElem","Broker","capture","dispatchUp","dispatchDown","gcProcessedMessages","newProcessedMessages","messageStillActive","ignoreListeners","callBrokerListeners","msgCallListeners","parent","JSON","parse","stringify","dispatchSameLevel","transformToEvent","contentWindow","listeners","createCustomEvent","wrapper","CustomEvent","customEvent","_value","fn","Monad","currentPos","currKey","keyVal","arrPos","arrayIndex","getIfPresent","match","toJson","start","parseInt","resolver","newVal","alternative","ConfigEntry","root","ofAssoc","AssocArrayCollector","shallowMerge","other","overwrite","withAppend","isArray","noKeys","lastKey","pathExists","buildPath","finalKeyArrPos","retVal","apply","appendIf","condition","assignIf","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","PromiseStatus","handler","CancellablePromise","setInterval","clearInterval","executor","status","PENDING","allFuncs","all","myapply","promiseCnt","myPromise","promises","__last__","finally","race","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","cancellator","cancel","total","SequenceDataSource","dataPos","ArrayStreamDataSource","filterFunc","filteredNext","inputDataSource","FilteredStreamDatasource","mapFunc","MappedStreamDataSource","resolveCurrentNext","resolveNextNext","activeDataSource","FlatMapStreamDataSource","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ofDataSource","dataSource","toAppend","onElem","strmR","startVal","val1","last","anyMatch","noneMatch","comparator","newArr","collector","ofStreamDataSource","isOverLimits","nextFilter","max","t","stop","value1","value2","el1","el2","Reflect","customElements","polyfillWrapFlushCallback","a","HTMLElement","construct","constructor","setPrototypeOf","extendsType","observedAttrs","withTagName","TagBuilder","withObservedAttributes","oAttrs","withConnectedCallback","callback","connectedCallback","withDisconnectedCallback","disconnectedCallback","withAdoptedCallback","adoptedCallback","withAttributeChangedCallback","attributeChangedCallback","withExtendsType","withOptions","theOptions","withClass","withMarkup","applyCallback","outerCallback","protoCallback","finalCallback","defineProperty","define","scope","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","toString","serialized","XMLSerializer","serializeToString","parserErrorText","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__"],"mappings":"gwCAgBA,IAmBKA,EAnBL,SAEA,SACA,SACA,SACOC,EAAO,EAAAC,KAAKD,KACZE,EAAa,EAAAD,KAAKC,WAClBC,EAAW,EAAAF,KAAKE,SAChBC,EAAmB,EAAAH,KAAKG,kBAW/B,SAAKL,GACD,kBACA,kBACA,kBACA,gBACA,gBACA,gBACA,sBAPJ,CAAKA,MAAY,KAWjB,kBAEI,WAAoBM,EAA2BC,EAAsBC,QAAA,IAAAA,MAAA,MAArE,MACI,YAAMF,EAASC,IAAK,K,OADJ,EAAAD,UAA2B,EAAAC,OAAsB,EAAAC,a,EA4BzE,OA9BsC,OAMlC,sBAAI,oBAAK,C,IAAT,W,MACQC,GAAiB,EAAAC,KAAKJ,QAAQK,IAAI,IAAGC,OAAM,UAAI,KAAIC,OACvD,OAAKJ,EAAIK,OAGFL,EAAI,GAAGM,aAAaL,KAAKH,MAFrBG,KAAKF,Y,IAKpB,SAAUQ,GAEN,I,MADIP,GAAiB,EAAAC,KAAKJ,QAAQK,IAAI,IAAGC,OAAM,UAAI,KAAIC,OAC9CI,EAAM,EAAGA,EAAMR,EAAIK,OAAQG,IAChCR,EAAIQ,GAAKC,aAAaR,KAAKH,KAAMS,GAErCP,EAAI,GAAGS,aAAaR,KAAKH,KAAMS,I,gCAGzB,YAAAG,SAAV,WACI,OAAOC,GAGJ,EAAAC,aAAP,SAAwCL,EAAaM,GACjD,YADiD,IAAAA,MAAA,SACpC,IAAIF,EAAiBJ,EAAOM,IAGjD,EA9BA,CAAsC,EAAAC,eAAzB,EAAAH,mBAqCb,IAAMI,EAAwB,SAACC,GAC3B,OAAsC,GAA9BA,EAAIC,QAAQ,gBACkB,GAAlCD,EAAIC,QAAQ,oBACgB,GAA3BD,EAAIC,QAAQ,aAC+B,GAAxCD,EAAIC,QAAQ,yBA0axB,aAQI,a,UAAY,kDAER,GANI,KAAAC,SAA2B,GAEnC,KAAAC,KAAO,EAm1CP,KAAAC,SAAW,GA/0CH,EAAAC,SAAST,aAAaM,GAAUI,YAAeJ,EAASb,OAKxD,IAAK,IAAIG,EAAM,EAAGA,EAAMU,EAASb,OAAQG,IACrC,GAAIb,EAASuB,EAASV,IAAO,CACzB,IAAIe,EAAeC,EAASC,iBAAyBP,EAASV,IACzDe,EAAaD,YACdJ,EAASQ,KAAI,MAAbR,EAAQ,EAASK,EAAanB,cAE3Bc,EAASV,aAAgBgB,GAChC,EAAAvB,KAAKiB,UAASQ,KAAI,UAAUR,EAASV,GAAMJ,SAE3CH,KAAKiB,SAASQ,KAAUR,EAASV,IAg7CrD,OAv6CI,sBAAI,oBAAK,C,IAAT,WACI,OAAOP,KAAK0B,UAAU,I,gCAG1B,sBAAI,qBAAM,C,IAAV,WACI,OAAO1B,KAAK2B,Y,gCAMhB,sBAAI,iBAAE,C,IAAN,WACI,OAAO,IAAIjB,EAAiBV,KAAKC,IAAI,GAAI,O,gCAM7C,sBAAI,qBAAM,C,IAAV,WACI,OAAOD,KAAKiB,SAASb,Q,gCAMzB,sBAAI,sBAAO,C,IAAX,WACI,OAAyBJ,KAAK0B,UAAU,GAAGE,MAAM,Y,gCAMrD,sBAAI,uBAAQ,C,IAAZ,WACI,OAAyB5B,KAAK0B,UAAU,GAAGE,MAAM,a,gCAGrD,YAAAC,MAAA,SAAMC,GACF,OAAQ9B,KAAKqB,aACLrB,KAAK+B,SAAS7B,OAAO,aAChBI,MAAM0B,eAAiBF,EAAQE,eACjChC,KAAK8B,QAAQ5B,OAAO,aAClBI,MAAM0B,eAAiBF,EAAQE,gBAUhD,sBAAI,mBAAI,C,IAAR,WACI,OAAOhC,KAAK0B,UAAU,GAAGE,MAAM,S,gCASnC,sBAAI,mBAAI,C,IAAR,WACI,OAAO,IAAI,EAAAf,cAAcb,KAAK0B,UAAU,GAAGpB,MAAO,S,gCAStD,sBAAI,yBAAU,C,IAAd,WACI,OAAIN,KAAK0B,UAAU,GAAGE,MAAM,SAASK,YAC1B,IAAI,EAAApB,cAAsBb,KAAK0B,UAAU,GAAGpB,OAEvC,EAAAO,cAAcqB,Q,gCAIlC,sBAAI,sBAAO,C,IAAX,WACI,OAAO,EAAAC,OAAOC,GAAE,MAAT,EAAAD,OAAM,EAAOnC,KAAKG,SAAQkC,UAAS,SAAAC,GAAM,QAAQA,EAAIC,Y,IAGhE,SAAYC,GACRxC,KAAKyC,UAAS,SAAAH,GAAM,OAAMA,EAAIC,QAAUC,M,gCAG5C,sBAAI,uBAAQ,C,IAAZ,WAEI,OAAOxC,KAAKwB,iBAAiB,gD,gCAGjC,sBAAI,2BAAY,C,IAAhB,WAEI,OAAOxB,KAAK0C,qBADE,gD,gCASlB,YAAAA,qBAAA,SAAqBC,GACjB,IAAIC,EAAyB,GACzBC,EAAW7C,KAAKwB,iBAAiBmB,GAClCE,EAASzC,QACRwC,EAAMnB,KAAKoB,GAEf,IAAIC,EAAc9C,KAAKwB,iBAAiB,KAAKuB,WAC7C,GAAGD,EAAY1C,OAAQ,CACnB,IAAI4C,EAAYF,EAAYJ,qBAAqBC,GAC9CK,EAAU5C,QACTwC,EAAMnB,KAAKuB,GAGnB,OAAO,IAAIzB,EAAQ,WAARA,EAAQ,WAAIqB,MAQ3B,sBAAI,uBAAQ,C,IAAZ,WACI,OAAO5C,KAAKiD,KAAK,YAAYhB,a,IAGjC,SAAaiB,GAEJA,EAGDlD,KAAKiD,KAAK,YAAY3C,MAAQ,WAF9BN,KAAKmD,gBAAgB,a,gCAO7B,YAAAA,gBAAA,SAAgBtD,GACZG,KAAKyC,UAAS,SAAAW,GAAQ,OAAAA,EAAKD,gBAAgBtD,OAG/C,sBAAI,yBAAU,C,IAAd,WACI,IAAIwD,EAA+B,GAInC,OAHArD,KAAKyC,UAAS,SAACW,GACXC,EAAeA,EAAaC,OAAO7D,EAAW2D,EAAKG,gBAEhD,IAAIhC,EAAQ,WAARA,EAAQ,WAAI8B,M,gCAM3B,sBAAI,qBAAM,C,IAAV,WACI,OAAO,IAAI,EAAAlB,OAAM,WAAN,EAAAA,OAAM,WAAcnC,KAAKwD,Y,gCAWxC,sBAAI,yBAAU,C,IAAd,WACI,OAAO,EAAAC,WAAWrB,GAAE,MAAb,EAAAqB,WAAU,EAAOzD,KAAKwD,W,gCAGjC,sBAAI,sBAAO,C,IAAX,WAEI,MAAO,GAAGF,OAAO,EAAAG,WAAWrB,GAAE,MAAb,EAAAqB,WAAU,EAAOzD,KAAKiB,WAAUyC,QAAO,SAAAN,GAAQ,OAAQ,MAARA,KAC3DO,KAAI,SAAAP,GAAQ,OAAA7B,EAASqC,KAAKR,MAAOS,QAAQ,IAAI,EAAAC,kB,gCAGtD,sBAAI,0BAAW,C,IAAf,WACI,MAAO,GAAGR,OAAO,EAAAnB,OAAOC,GAAGpC,KAAKiB,UAAUyC,QAAO,SAAAN,GAAQ,OAAQ,MAARA,KAAcS,QAAQ,IAAI,EAAAC,kB,gCAIhF,EAAApB,qBAAP,SAA4BqB,GACxB,OAAO,IAAIxC,EAASyC,UAAUtB,qBAAqBqB,IAQhD,EAAAvC,iBAAP,SAAwBuC,GACpB,OAAqC,GAAjCA,EAAS/C,QAAQ,YACV,IAAIO,EAASyC,UAAUC,sBAAsBF,GAE7C,IAAIxC,EAASyC,UAAUE,kBAAkBH,IAWjD,EAAAH,KAAP,SAAYG,EAAuCI,GAC/C,YAD+C,IAAAA,OAAA,GAC3CzE,EAASqE,GACAI,EAAwD,IAAI5C,EAASyC,UAAUI,SAAiBL,GAAxF,IAAIxC,EAASyC,UAAUJ,KAAaG,GAE9C,IAAIxC,EAAcwC,IAU1B,EAAAM,UAAP,SAAiBN,GACb,OAAIrE,EAASqE,GACF,IAAIxC,EAASyC,UAAUK,UAAkBN,GAEzC,IAAIxC,EAAcwC,IAI1B,EAAAO,WAAP,SAAkBC,EAAcC,GAC5B,OAAO,IAAIjD,EAASyC,UAAUM,WAAWC,EAAMC,IAQ5C,EAAAC,WAAP,SAAkBC,GAGd,IAAMC,EAAMX,SAASY,eAAeC,mBAAmB,IAEnDC,GADJJ,EAASnF,EAAKmF,IACW1C,cACzB,IAAyC,GAArC8C,EAAY9D,QAAQ,eACa,GAAjC8D,EAAY9D,QAAQ,WACa,GAAjC8D,EAAY9D,QAAQ,WACa,GAAjC8D,EAAY9D,QAAQ,SAEpB,OADA2D,EAAII,gBAAgBC,UAAYN,EACzB,IAAInD,EAASoD,EAAII,iBAExB,IAAIE,EAAgB,SAAUC,EAAapD,GACvC,IAAIqD,EAAO,CAAC,IAAKrD,EAAS,KAAKsD,KAAK,IAChCC,EAAO,CAAC,IAAKvD,EAAS,KAAKsD,KAAK,IACpC,OAA6B,GAArBF,EAAIlE,QAAQmE,IAAqC,GAArBD,EAAIlE,QAAQqE,IAGhDC,EAAmB,IAAI/D,EAASyC,SAASuB,cAAc,QAG3D,OAAIN,EAAcH,EAAa,UAAYG,EAAcH,EAAa,UAClEQ,EAAiBE,KAAK,UAAUd,EAAM,YAC/BY,EAAiB9D,iBAAiB,SAASvB,IAAI,GAAGsD,WAAWkC,UAC7DR,EAAcH,EAAa,UAClCQ,EAAiBE,KAAK,sCAAsCd,EAAM,YAC3DY,EAAiB9D,iBAAiB,SAASvB,IAAI,GAAGsD,WAAWkC,UAC7DR,EAAcH,EAAa,OAClCQ,EAAiBE,KAAK,iBAAiBd,EAAM,oBACtCY,EAAiB9D,iBAAiB,SAASvB,IAAI,GAAGsD,WAAWkC,UAC7DR,EAAcH,EAAa,OAClCQ,EAAiBE,KAAK,qBAAqBd,EAAM,yBAC1CY,EAAiB9D,iBAAiB,MAAMvB,IAAI,GAAGsD,WAAWkC,WAGrEH,EAAiBE,KAAKd,GACfY,EAAiB/B,WAAWkC,WAa3C,YAAAxF,IAAA,SAAIyF,GACA,OAAQA,EAAQ1F,KAAKiB,SAASb,OAAU,IAAImB,EAASvB,KAAKiB,SAASyE,IAAUnE,EAASW,QAQ1F,YAAAR,UAAA,SAAUgE,EAAeC,GACrB,YADqB,IAAAA,MAA0B,EAAAvE,SAASc,QAChDwD,EAAQ1F,KAAKiB,SAASb,OAAU,EAAAgB,SAAST,aAAaX,KAAKiB,SAASyE,IAAUC,GAO1F,YAAAC,cAAA,SAAcF,G,MACV,OAAQA,EAAQ1F,KAAKiB,SAASb,SAAqC,QAA3B,EAAMJ,KAAKiB,SAASyE,UAAO,eAAEG,OAAe7F,KAAKiB,SAASyE,GAAQG,MAAa,IAM3H,YAAAlE,SAAA,WACI,OAAO3B,KAAKiB,UAMhB,YAAAI,SAAA,WACI,OAAsB,GAAfrB,KAAKI,QAQhB,YAAA6B,UAAA,SAAU6D,GACN,IAAI5D,EAASlC,KAAKqB,WAIlB,OAHKa,GAAU4D,GACXA,EAAgBC,KAAK/F,KAAMA,OAEvBkC,GAWZ,YAAA8D,cAAA,SAAcF,GAGV,YAHU,IAAAA,MAAA,cAEV9F,KAAKiC,UAAU8D,KAAK/F,KAAM8F,GACnB9F,MAMX,YAAAiG,OAAA,WACIjG,KAAKyC,UAAS,SAACyD,GACPA,EAAKC,YACLD,EAAKC,WAAWC,YAAYF,OAKxC,YAAA1E,iBAAA,SAAiBuC,GAEb,OAAqC,GAAjCA,EAAS/C,QAAQ,YACVhB,KAAKiE,sBAAsBF,GAE3B/D,KAAKkE,kBAAkBH,IAU9B,YAAAG,kBAAR,SAA0BH,G,QACtB,KAAmB,QAAf,EAAC/D,gBAAI,EAAJA,KAAMiB,gBAAQ,eAAEb,QACjB,OAAOJ,KAGX,IADA,IAAIqG,EAAQ,GACH9F,EAAM,EAAGA,EAAMP,KAAKiB,SAASb,OAAQG,IAC1C,GAAuB,QAAnB,EAACP,KAAKiB,SAASV,UAAI,eAAEiB,iBAAzB,CAGA,IAAI8E,EAAMtG,KAAKiB,SAASV,GAAKiB,iBAAiBuC,GAC9CsC,EAAQA,EAAM/C,OAAO7D,EAAW6G,IAGpC,OAAO,IAAI/E,EAAQ,WAARA,EAAQ,WAAI8E,MAKnB,YAAApC,sBAAR,SAA8BF,G,MAC1B,KAAmB,QAAf,EAAC/D,gBAAI,EAAJA,KAAMiB,gBAAQ,eAAEb,QACjB,OAAOJ,KAOX,IAJA,IACIuG,EAAU,IAAiBhF,EAAQ,WAARA,EAAQ,WAAIvB,KAAKiB,YAC5CuF,EAAYzC,EAAS0C,MAAM,cAEtBC,EAAO,EAAGA,EAAOF,EAAUpG,OAAQsG,IACxC,GAAuB,IAAnBF,EAAUE,GAAd,CAGA,IAAIC,EAAgBH,EAAUE,GAC9BH,EAAaA,EAAW/E,iBAAiBmF,GACrCD,EAAOF,EAAUpG,OAAS,IAC1BmG,EAAaA,EAAWxD,YAIhC,OAAOwD,GAQX,YAAA3C,KAAA,SAAKgD,EAAYC,GACb,IAAIP,EAAuB,GAc3B,OAbIO,IACAP,EAAMA,EAAIhD,OACN,EAAAG,WAAWrB,GAAE,MAAb,EAAAqB,WAAU,GAAQzD,gBAAI,EAAJA,KAAMiB,WAAY,KAC/ByC,QAAO,SAAAN,GAAQ,OAAAwD,GAAMxD,EAAKwD,MAC1BjD,KAAI,SAAAP,GAAQ,WAAI7B,EAAS6B,MACzBS,QAAQ,IAAI,EAAAC,kBAOzBwC,EAAMA,EAAIhD,OAAOtD,KAAKwB,iBAAiB,QAAQoF,EAAE,OAC1C,IAAIrF,EAAQ,WAARA,EAAQ,WAAI+E,MAI3B,YAAAlC,SAAA,SAASwC,EAAYC,GACjB,IAAIP,EAAuB,GACvBO,IACAP,EAAMA,EAAIhD,OACN,EAAAG,WAAWrB,GAAE,MAAb,EAAAqB,WAAU,GAAQzD,gBAAI,EAAJA,KAAMiB,WAAY,KAC/ByC,QAAO,SAAAN,GAAQ,OAAAwD,GAAMxD,EAAKwD,MAC1BjD,KAAI,SAAAP,GAAQ,WAAI7B,EAAS6B,MACzBS,QAAQ,IAAI,EAAAC,kBAIzB,IAAIgD,EAAW9G,KAAK0C,qBAAqB,QAAQkE,EAAE,MAKnD,OAJGE,EAAS1G,QACRkG,EAAI7E,KAAKqF,GAGN,IAAIvF,EAAQ,WAARA,EAAQ,WAAI+E,MAQ3B,YAAAjC,UAAA,SAAUvC,EAAiB+E,EAAwB1C,G,MAC3CmC,EAAiC,GASrC,OARIO,IACAP,EAAY,EAAA7C,WAAWrB,GAAE,MAAb,EAAAqB,WAAU,EAAsB,QAAf,EAACzD,gBAAI,EAAJA,KAAMiB,gBAAQ,QAAI,KAC3CyC,QAAO,SAAA9D,GAAW,OAAAA,aAAO,EAAPA,EAASkC,UAAWA,KACtCiF,QAAkC,SAACC,EAAgB5D,GAAkB,OAAA4D,EAAU1D,OAAO,CAACF,MAAQkD,GAC/FpG,OAAOoG,GAAKhG,OAGrB,EAASgG,EAAI7E,KAAKzB,KAAK0C,qBAAqBZ,IAAYwE,EAAI7E,KAAKzB,KAAKwB,iBAAiBM,IAChF,IAAIP,EAAQ,WAARA,EAAQ,WAAI+E,MAS3B,YAAArD,KAAA,SAAKA,EAAcgE,GACf,YADe,IAAAA,MAAA,MACR,IAAIvG,EAAiBV,KAAMiD,EAAMgE,IAQ5C,YAAAC,SAAA,SAASC,GACL,IAAIC,GAAQ,EAOZ,OANApH,KAAKyC,UAAS,SAAAyD,GAEV,GADAkB,EAAQlB,EAAKmB,UAAUC,SAASH,GAE5B,OAAO,KAGRC,GAQX,YAAAG,SAAA,SAASJ,GAEL,OADAnH,KAAKyC,UAAS,SAAAW,GAAQ,OAAAA,EAAKiE,UAAUG,IAAIL,MAClCnH,MAQX,YAAAyH,YAAA,SAAYN,GAER,OADAnH,KAAKyC,UAAS,SAAAW,GAAQ,OAAAA,EAAKiE,UAAUK,OAAOP,MACrCnH,MAOX,YAAA2H,qBAAA,SAAqBxD,GAArB,WAoBI,YApBiB,IAAAA,OAAA,GAkBPnE,KAAK4H,OAAOlE,QAAO,SAAAN,GAAQ,OAjBnB,SAACA,G,MACf,OAAkB,GAAfA,EAAKhD,SAGU,GAAfgD,EAAKhD,OAC2D,SAAlDgD,EAAKtB,QAAQ7B,IAAI,SAASK,MAAO0B,eACgB,UAAhC,QAAzB,EAAQoB,EAAKH,KAAK,eAAO,eAAE3C,QAAS,IAAI0B,gBAGzCmC,EACO,EAAKzB,qBAAqB,sBAAsBmF,YAAY5F,YAE5D,EAAKT,iBAAiB,sBAAsBqG,YAAY5F,aAGhEmB,EAAKuE,qBAAqBxD,IAEA2D,CAAY1E,MAAO2E,QAAQ9F,aAgBpE,YAAAuD,KAAA,SAAKwC,GACD,OAAI,EAAA5G,SAAST,aAAaqH,GAAO3G,WACtBrB,KAAKiC,YAAc,EAAAb,SAAST,aAAaX,KAAKiI,WAAa,EAAA7G,SAASc,QAE/ElC,KAAKiI,UAAYD,EAEVhI,OAMX,YAAAkI,cAAA,SAAcC,GAEV,OADAnI,KAAKyC,UAAS,SAAA2F,GAAQ,OAAAA,EAAKF,cAAcC,MAClCnI,MAGX,sBAAI,wBAAS,C,IAIb,WACI,IAAIqI,EAAS,GAEb,OADArI,KAAKyC,UAAS,SAAA2F,GAAQ,OAAAC,EAAO5G,KAAK2G,EAAKpD,cAChCqD,EAAOjD,KAAK,K,IAPvB,SAAckD,GACVtI,KAAKyC,UAAS,SAAA2F,GAAQ,OAAAA,EAAKpD,UAAYsD,M,gCAWnC,YAAAC,oBAAR,SAA4BC,EAAkBzE,GAC1C,IAAI0E,EAA0CD,EAa9C,OAZgCC,EAAKC,iBACjCD,EAAKE,oBACLF,EAAKG,mBACLH,EAAKI,kBACLJ,EAAKK,uBACL,SAAUC,GAGN,IAFA,IAAIC,GAAoChF,UAAkBiF,OAAQC,eAAe1H,iBAAiBuH,GAC9FI,EAAIH,EAAQ5I,SACP+I,GAAK,GAAKH,EAAQ5F,KAAK+F,KAAOX,IAEvC,OAAOW,GAAK,IAEGpD,KAAKyC,EAASzE,IASzC,YAAAqF,eAAA,SAAerF,GAAf,WACQsF,EAAU,GAOd,OALArJ,KAAKyC,UAAS,SAAAW,GACN,EAAKmF,oBAAoBnF,EAAMW,IAC/BsF,EAAQ5H,KAAK2B,MAGd,IAAI7B,EAAQ,WAARA,EAAQ,WAAI8H,MAG3B,YAAAX,gBAAA,SAAgB3E,GAAhB,WAMI,OALA/D,KAAKyC,UAAS,SAAAW,GACV,IAAK,EAAKmF,oBAAoBnF,EAAMW,GAChC,OAAO,MAGR,GAWX,YAAAnC,MAAA,W,IAAM,sDAGF,IADA,IAAI0H,EAA0BtJ,KAAKuD,WAC1BhD,EAAM,EAAGA,EAAMgJ,EAAanJ,OAAQG,IAEzC,IADA+I,EAAgBA,EAAcF,eAAeG,EAAahJ,KACxCc,WACd,OAAOiI,EAGf,OAAOA,GAGX,YAAA7G,SAAA,SAAS+G,GAEL,IAAK,IAAIjJ,EAAM,EAAGkJ,EAAMzJ,KAAKiB,SAASb,OAAQG,EAAMkJ,IACV,IAAlCD,EAAKxJ,KAAKiB,SAASV,GAAMA,GADwBA,KAKzD,OAAOP,MAGX,YAAA6H,UAAA,SAAU2B,GAIN,YAJM,IAAAA,MAAA,SAA6CpG,GAAQ,OAAAA,IACvDpD,KAAKiB,SAASb,OAAS,GACvBoJ,EAAKxJ,KAAKiB,SAAS,GAAI,GAEpBjB,MAGX,YAAA0J,KAAA,SAAKF,GAUD,OATA,EAAArH,OAAOC,GAAE,MAAT,EAAAD,OAAM,EAAOnC,KAAKiB,WACbyI,MAAK,SAACtG,EAAM7C,GAET,GAAY,MAAR6C,EAGJ,OAAOoG,EAAKjI,EAASqC,KAAKR,GAAO7C,MAGlCP,MAQX,YAAA+H,MAAA,SAAMyB,GACF,YADE,IAAAA,MAAA,SAA+CpG,GAAS,OAAAA,IACtDpD,KAAKiB,SAASb,QAAU,GACxBoJ,EAAKxJ,KAAKC,IAAI,GAAI,GACXD,KAAKC,IAAI,IAEbD,MAQX,YAAA0D,OAAA,SAAO8F,GACH,IAAIG,EAAyB,GAI7B,OAHA3J,KAAK0J,MAAK,SAACtG,GACPoG,EAAKpG,IAAQuG,EAAMlI,KAAK2B,MAErB,IAAI7B,EAAQ,WAARA,EAAQ,WAASoI,MAWhC,YAAArF,WAAA,SAAWC,EAAcC,GACrB,IAAIoF,EAAO5F,SAAS6F,qBAAqB,QAAQ,IAAM7F,SAASe,gBAC5D+E,EAAS9F,SAASuB,cAAc,UAChCf,GACAsF,EAAOtJ,aAAa,QAASgE,GAEjCsF,EAAOC,KAAO,kBACdD,EAAO9E,UAAYT,EACnB,IAAIyF,EAAmBJ,EAAKK,YAAYH,GAExC,OADAF,EAAKxD,YAAY4D,GACVhK,MASX,YAAAyF,OAAA,WAII,OAHAzF,KAAKyC,UAAS,SAACW,GACXA,EAAK+C,WAAWC,YAAYhD,MAEzBpD,MAQX,YAAAkK,SAAA,SAAS9B,GACLpI,KAAKyC,UAAS,SAACW,GACoBgF,EAAK1G,UAAU,GAAGyI,YAAW,WACxD,MAAO,CACHF,YAAa,SAACG,SAGnB9J,MACI2J,YAAY7G,OAW3B,YAAAiH,eAAA,SAAetJ,EAAauJ,EAAmBC,GAA/C,gBAA4B,IAAAD,MAAA,QAAmB,IAAAC,MAAA,SAC3C,IAAIC,EAAM,IAAIC,eA8Bd,OA7BAD,EAAIE,KAAK,MAAO3J,GAAK,GAEjBwJ,GACAC,EAAIG,iBAAiB,eAAgB,qCAAuCJ,GAGhFC,EAAII,KAAK,MAETJ,EAAIK,OAAS,SAACC,GAKLR,EAKDS,YAAW,WACP,EAAKzG,WAAWkG,EAAIQ,aAAe,qBAAuBjK,KAC3DuJ,GANH,EAAKhG,WAAWkG,EAAIQ,aAAaC,QAAQ,KAAM,QAAU,qBAAuBlK,IAUxFyJ,EAAIU,QAAU,SAACC,GACX,MAAMC,MAAMD,IAITnL,MAGX,YAAAqL,YAAA,W,IAAY,sDAERrL,KAAK0J,MAAK,SAAA4B,GAGN,IAFA,IAAIC,EAAkBD,EAAa5J,UAAU,GAAGpB,MAC5CW,EAAWsK,EAAgBpF,W,WACtB5F,GACL,IAAIiL,EAA4BD,EAAgBC,YAChDC,EAAelL,GAAKkC,UAAS,SAAAiJ,GACrBF,GACAvK,EAAS0K,aAAaD,EAAYF,GAClCD,EAAkBC,GAElBvK,EAASgJ,YAAYyB,OAPxBnL,EAAM,EAAGA,EAAMkL,EAAerL,OAAQG,I,EAAtCA,MAcb,IAAI+F,EAAM,GAGV,OAFAA,EAAI7E,KAAKzB,MACTsG,EAAMA,EAAIhD,OAAOmI,GACV,IAAIlK,EAAQ,WAARA,EAAQ,WAAI+E,MAG3B,YAAAqF,aAAA,W,IAAa,sDACT3L,KAAK0J,MAAK,SAAA4B,GAGN,IAFA,IAAIC,EAAkBD,EAAa5J,UAAU,GAAGpB,MAC5CW,EAAWsK,EAAgBpF,WACtB5F,EAAM,EAAGA,EAAMkL,EAAerL,OAAQG,IAC3CkL,EAAelL,GAAKkC,UAAS,SAAAiJ,GACzBzK,EAAS0K,aAAaD,EAAYH,SAI9C,IAAIjF,EAAM,GAGV,OAFAA,EAAI7E,KAAKzB,MACTsG,EAAMA,EAAIhD,OAAOmI,GACV,IAAIlK,EAAQ,WAARA,EAAQ,WAAI+E,MAG3B,YAAApG,OAAA,W,IAAO,sDACH,OAAIF,KAAKiC,YACEjC,KAEA,IAAIuB,EAAQ,WAARA,EAAQ,WAAIqK,MAI/B,YAAAzB,WAAA,SAAWX,GACP,OAAIxJ,KAAKiC,YACEjC,KAEA,IAAIuB,EAASiI,MAI5B,YAAAqC,QAAA,SAAQ/J,GACJ,IAAMgK,EAAuB,IAAIC,IAC3B1D,EAAyB,GACzB2D,EAAelK,EAAQE,cAEzBiK,EAAc,SAAC7I,IACVA,EAAKtB,SAAW,IAAIE,eAAiBgK,GAAiBF,EAAOI,IAAI9I,KAClE0I,EAAOtE,IAAIpE,GACXiF,EAAO5G,KAAK2B,KAgBpB,OAZApD,KAAKyC,UAAS,SAACW,GACX,I,QAAOA,EAAK+C,YAAqB/C,EAAM+I,MAKnC,GAJA/I,EAAgC,QAA5B,EAAYA,aAAI,EAAJA,EAAM+C,kBAAU,QAAe,QAAf,EAAU/C,SAAK,eAAE+I,KAEjDF,EAAY7I,GAEG,QAAXtB,GAAqBuG,EAAOjI,OAC5B,OAAO,KAKZ,IAAImB,EAAQ,WAARA,EAAQ,WAAI8G,MAG3B,YAAA+D,UAAA,SAAUC,GAAV,WAsBI,OArBAA,EAAW5J,UAAS,SAAC6J,G,QACbC,EAAqB9M,EAAW6M,EAAWE,Y,IAC/C,IAAiB,QAAAD,GAAK,8BAAE,CAAnB,IAAInJ,EAAI,QACL9C,EAAgB8C,EAAK9C,MACrB,EAAe8C,EAAKvD,KAExB,OAAQ,GACJ,IAAK,KACD,EAAK+G,GAAGtG,MAAQA,EAChB,MACJ,IAAK,WACD,EAAKmM,uBAAuB,YAAYvJ,SAAW5C,EACnD,MACJ,IAAK,UACD,EAAKmM,uBAAuB,WAAWlK,QAAUjC,EACjD,MACJ,QACI,EAAK2C,KAAK,GAAM3C,MAAQA,I,qGAIjCN,MAOH,YAAAyM,uBAAR,SAA+BC,QAAA,IAAAA,MAAA,SAC3B,IAAIC,EAAM,GAEV,OADAA,EAAID,GAAY,KACRA,KAAY1M,KAAK0B,UAAU,GAAGpB,MAClCN,KAAK0B,UAAU,GAAGpB,MAClBqM,GAaR,YAAAC,UAAA,SAAUlI,EAAgBmI,EAA+BC,EAA2B3I,G,MAChF,QADgF,IAAAA,OAAA,IAC5EnE,KAAKqB,WAAT,CAIA,IAAI0L,EAAwC,QAA1B,EAAW,OAAR/I,eAAQ,IAARA,cAAQ,EAARA,SAAUgJ,qBAAa,eAAEpG,GAC1CqG,EAAgB,EAAmB1L,EAAS2L,iBAAiBlJ,SAASgJ,eAAiB,KACvF3G,EAAQ9E,EAASkD,WAAWC,GAC5B4B,EAAM,GACN6G,EAAYnN,KAAK0B,UAAU,GAAGpB,MAC9B8M,EAAc/G,EAAMpG,IAAI,GACxBkG,EAAagH,EAAUhH,WACvBkH,EAAWD,EAAY1L,UAAU,GAAGpB,MAIxC,GAHA6F,EAAWmH,aAAaD,EAAUF,GAClC7G,EAAI7E,KAAK,IAAIF,EAAS8L,IAElBrN,KAAKqB,WACL,OAAOrB,KAGX,IAAIuN,EAAwB,GAExBlH,EAAMjG,OAAS,IACfmN,EAAwBA,EAAsBjK,OAAM,MAA5BiK,EAAqB,EAAWlH,EAAMlG,OAAOqN,MAAM,KAC3ElH,EAAI7E,KAAKF,EAASqC,KAAKyJ,GAAUhC,YAAY,IAAI9J,EAAQ,WAARA,EAAQ,WAAIgM,QAG7DV,GACA7M,KAAKyN,aAELX,GACA9M,KAAK0N,SAGT,IAAIC,EAAepM,EAASqC,KAAKmJ,GAMjC,OALIA,GAAkBY,EAAa1L,aACd,MAAjBgL,QAAyB,IAAsBA,GAC/CU,EAAalL,UAAS,SAAAW,GAAQ,OAAA7B,EAASqM,iBAAiBxK,EAAM6J,MAG3D5G,IAQX,YAAAoH,WAAA,SAAWI,GAAX,gBAAW,IAAAA,MAAA,GACP,IAAIC,EAAe,GACfC,EAAOpO,EACPqO,EAAY,SAAC5K,GACT,IAAItB,EAAUsB,EAAKtB,QACfmM,EAAW7K,EAAK2G,MAAQ,GAC5B,GAAIjI,GAAWiM,EAAKjM,EAAS,YACX,KAAbmM,GAAmBF,EAAKE,EAAU,oBAC/BF,EAAKE,EAAU,eACfF,EAAKE,EAAU,oBACfF,EAAKE,EAAU,eAAgB,CACnC,IAAIlN,EAAMqC,EAAK/C,aAAa,OAC5B,QAAI,IAAsBU,GACnB,MAAQA,GACRA,EAAIX,OAAS,EAKZyN,EAAa9M,KACT+M,EAAa1N,SAGb,EAAKkE,WAAWwJ,EAAa1I,KAAK,OAElC0I,EAAe,IAEnB,EAAKzD,eAAetJ,EAAK,EAAG,cAG7B,CAOH,IAHA,IAAImN,EAAW3O,EAAK6D,EAAK+K,MAAQ/K,EAAKgL,WAAahL,EAAK4B,WACpDqJ,GAAK,EAEFA,GACHA,GAAK,EAC2B,WAA5BH,EAASI,UAAU,EAAG,KACtBJ,EAAWA,EAASI,UAAU,GAC9BD,GAAK,GAEuB,aAA5BH,EAASI,UAAU,EAAG,KACtBJ,EAAWA,EAASI,UAAU,GAC9BD,GAAK,GAEwB,eAA7BH,EAASI,UAAU,EAAG,MACtBJ,EAAWA,EAASI,UAAU,IAC9BD,GAAK,GAKbP,EAAarM,KAAKyM,MAKlC,IACyB,IAAI3M,EAASvB,KAAKoJ,eAAe,UAAWpJ,KAAKwB,iBAAiB,WAExEoG,OACV2G,SAAQ,SAAAnL,GAAQ,SAAAjB,OAAOC,GAAGgB,EAAKjD,WAC/BqO,MAAK,SAACC,EAAOC,GAAU,OAAAD,EAAME,wBAAwBD,GAAS,KAC9DhF,MAAK,SAAAtG,GAAQ,OAAA4K,EAAU5K,MAExB0K,EAAa1N,QACbJ,KAAKsE,WAAWwJ,EAAa1I,KAAK,OAExC,MAAOwJ,GACD3F,OAAO4F,SAAW5F,OAAO4F,QAAQC,OAOjCD,QAAQC,MAAMF,EAAEG,SAAWH,EAAEI,a,QAQjChB,EAAY,KAEhB,OAAOhO,MAGX,YAAA0N,OAAA,WAEI,IAAMuB,EAAa,SAAC7L,EAAe8L,G,YACvBC,EAA0BnL,SAASuB,cAAc,SACrDvB,SAAS6F,qBAAqB,QAAQ,GAAGI,YAAYkF,GAErD,IAAIC,EAAwB,QAAd,EAAGD,EAAME,aAAK,QAAUF,EAAOC,WAE7CD,EAAM3O,aAAa,MAA+B,QAA1B,EAAE4C,EAAK/C,aAAa,cAAM,QAAI,cACtD8O,EAAM3O,aAAa,OAAiC,QAA3B,EAAE4C,EAAK/C,aAAa,eAAO,QAAI,YAEjC,QAAvB,EAAI+O,aAAU,EAAVA,EAAYE,eAAO,SACnBF,EAAWE,QAAUJ,EAErBC,EAAMlF,YAAYjG,SAASuL,eAAeL,KA8BtD,OAPiC,IAAI3N,EAASvB,KAAKoJ,eAAe,eAAgBpJ,KAAKwB,iBAAiB,gBAEzFoG,OACV2G,SAAQ,SAAAnL,GAAQ,SAAAjB,OAAOC,GAAGgB,EAAKjD,WAC/BqO,MAAK,SAACC,EAAOC,GAAU,OAAAD,EAAME,wBAAwBD,GAAS,KAC9DhF,MAAK,SAAAtG,GAAQ,OAxBJ,SAACA,GACP,IAAMtB,EAAUsB,EAAKtB,QACrB,GAAIA,GAAWnC,EAAiBmC,EAAS,SAAWnC,EAAiByD,EAAK/C,aAAa,QAAS,YAC5F4O,EAAW7L,EAAM,gBAAkBA,EAAK/C,aAAa,QAAU,YAC5D,GAAIyB,GAAWnC,EAAiBmC,EAAS,UAAYnC,EAAiByD,EAAK/C,aAAa,QAAS,YAAa,CACjH,IAAI,EAAY,GAEZkD,EAA0BiM,MAAMC,UAAUjC,MAAMzH,KAAK3C,EAAKG,YAC1DA,EACAA,EAAWmM,SAAQ,SAAAC,GAAS,SAAUlO,KAAekO,EAAO3K,WAA6B2K,EAAOxE,SAEzF/H,EAAK4B,WACZ,EAAUvD,KAAK2B,EAAK4B,WAGxBiK,EAAW7L,EAAM,EAAUgC,KAAK,MAS1BwK,CAAQxM,MAEnBpD,MAMX,YAAA6P,MAAA,WAEI,OADA7P,KAAK8P,UAAU,SACR9P,MAGX,YAAA+P,iBAAA,SAAiBhG,EAAciG,EAAgCC,GAE3D,OADAjQ,KAAKyC,UAAS,SAACyD,GAAkB,OAAAA,EAAK6J,iBAAiBhG,EAAMiG,EAAUC,MAChEjQ,MAGX,YAAAkQ,oBAAA,SAAoBnG,EAAciG,EAAgCC,GAE9D,OADAjQ,KAAKyC,UAAS,SAACyD,GAAkB,OAAAA,EAAKgK,oBAAoBnG,EAAMiG,EAAUC,MACnEjQ,MAMX,YAAA8P,UAAA,SAAUK,GACNnQ,KAAKyC,UAAS,SAACyD,GACX,IAAIvB,EACJ,GAAIuB,EAAKgD,cACLvE,EAAMuB,EAAKgD,kBACR,IAAqB,GAAjBhD,EAAKkK,SAIZ,MAAM,IAAIhF,MAAM,qCAAuClF,EAAKU,IAF5DjC,EAAMuB,EAKV,GAAIA,EAAKgC,cAAe,CAEpB,IAAImI,EAAa,GAKjB,OAAQF,GACJ,IAAK,QACL,IAAK,YACL,IAAK,UACDE,EAAa,cACb,MAEJ,IAAK,QACL,IAAK,SACL,IAAK,OACL,IAAK,SACDA,EAAa,aACb,MAEJ,QACI,KAAM,sDAAwDF,EAAY,KAGlF,IAAI,EAAQxL,EAAI2L,YAAYD,GAC5B,EAAME,UAAUJ,GAAW,GAAM,GAEjC,EAAMK,WAAY,EAElBtK,EAAKgC,cAAc,QAChB,GAAUhC,EAAM4J,UAAW,CAE9B,IAAI,EAAQnL,EAAI8L,oBAChB,EAAMD,WAAY,EACZtK,EAAM4J,UAAU,KAAOK,EAAW,QAKpD,YAAAO,YAAA,SAAYC,GACR,YADQ,IAAAA,MAAA,IACD3Q,KAAK4H,OACPjE,KAAI,SAACrD,GAMF,OALWA,EAAMoB,UAAU,GAAGyI,YAAW,WACrC,MAAY,CACRuG,YAAa,OAElBpQ,MACgBoQ,aAAe,MAErC3J,QAAO,SAAC6J,EAAOC,GAAU,OAAAD,EAAQD,EAAUE,IAAO,IAAIvQ,OAG/D,YAAA8N,UAAA,SAAUuC,GACN,YADM,IAAAA,MAAA,IACC3Q,KAAK4H,OACPjE,KAAI,SAACrD,GAMF,OALWA,EAAMoB,UAAU,GAAGyI,YAAW,WACrC,MAAY,CACRiE,UAAW,OAEhB9N,MACgB8N,WAAa,MAEnCrH,QAAO,SAAC6J,EAAOC,GAAU,OAACD,EAAOC,GAAOzL,KAAKuL,KAAU,IAAIrQ,OAapE,YAAAwQ,kBAAA,SAAkBC,GAId,QAJc,IAAAA,MAAA,IAAc,EAAAC,OAAO,MAI/BhR,KAAKH,KAAKwB,WAAd,CAKA,IAAI4P,EAASF,EAAQG,YA0ErB,OAxEAlR,KAAK0J,MAAK,SAAC9J,G,QACP,IAAIA,EAAQC,KAAKwB,WAAjB,CAGA,IAAIxB,EAAOD,EAAQC,KAAKS,MACpBwB,EAAUlC,EAAQkC,QAAQ5B,OAAO,YAAYI,MAAM0B,cACnDmP,EAAWvR,EAAQmK,KAAK7J,OAAO,YAAYI,MAAM0B,cASrD,GAPAmP,EAAWA,EAASnP,eAOH,SAAXF,GAAiC,YAAXA,GAAoC,UAAXA,IACxC,MAARjC,GAAwB,IAARA,IAAiBD,EAAQsD,SAAU,CAUpD,GAAe,UAAXpB,EAAqB,CAErB,IAAIsP,EAAmDxR,EAAQ8B,UAAU,GAAGpB,MAC5E,GAAI8Q,EAAWC,eAAiB,EAE5B,IADA,IAAIC,EAAOF,EAAWnB,QAAQ7P,OACrBmR,EAAI,EAAGA,EAAID,EAAMC,IAGtB,GAAIH,EAAWnB,QAAQsB,GAAGC,SAAU,CAChC,IAAIC,EAAgBL,EAAWnB,QAAQsB,GACvCN,EAAOS,OAAO7R,GAAMS,MAAgD,MAAvCmR,EAAcpR,aAAa,SACpDoR,EAAcnR,MAAQmR,EAActD,MAUxD,GAEQrM,GAAWxC,EAAaqS,QACxBR,GAAY7R,EAAasS,QACzBT,GAAY7R,EAAauS,OACzBV,GAAY7R,EAAawS,QACzBX,GAAY7R,EAAayS,QAGrBZ,GAAY7R,EAAa0S,UAAYb,GAAY7R,EAAa2S,OAClErS,EAAQ2C,SAEd,CACE,IAAIsD,EAA8C,QAAzC,EAAkC,QAAlC,EAAcjG,EAAQU,MAAOA,aAAK,eAAEuF,aAAK,QAAI,IAClDA,aAAK,EAALA,EAAOzF,QAEP6Q,EAAOS,OAAO7R,GAAMS,MAAQuF,EAAM,GAElCoL,EAAOS,OAAO7R,GAAMS,MAAQV,EAAQsS,WAAW5R,YAOxD2Q,IAGX,sBAAI,4BAAa,C,IAAjB,WAcI,OAVejR,KAAKmS,WAAW5D,SAAQ,SAAAnL,GACnC,OAAOA,EAAKG,WAAWqE,UACxBlE,QAAO,SAAAN,G,QACN,OALmB,IAKM,QAAlB,EAAW,QAAX,EAAAA,aAAI,EAAJA,EAAM9C,aAAK,eAAEA,aAAK,eAAE8P,aAC5BrJ,QAAO,SAACqL,EAAqBhP,G,UAE5B,OADAgP,EAAQ3Q,KAAoC,QAA9B,EAAwB,QAA1B,EAAkB,QAAhB,EAAK2B,aAAI,EAAJA,EAAM9C,aAAK,eAAEA,aAAM,eAAE6K,YAAI,QAAI,IACzCiH,IACR,IAAI9R,MAGI8E,KAAK,K,gCAGpB,YAAAiN,SAAA,SAASC,EAAcC,GAInB,OAHI,EAAAnR,SAAST,aAAa4R,GAAIlR,aAC1BkR,EAAKvS,KAAKI,QAEP,IAAImB,EAAQ,WAARA,EAAQ,WAAIvB,KAAKiB,SAASuM,MAAM8E,EAAME,KAAKC,IAAIF,EAAIvS,KAAKI,aAOvE,YAAAsS,OAAA,SAAOC,GAEH,OADA3S,KAAKmB,QAAUwR,EACH3S,MAIhB,YAAA4S,QAAA,WACI,IAAIC,GAAmC,GAAjB7S,KAAKmB,SAAiBnB,KAAKkB,KAAOlB,KAAKmB,QAAU,EACnE2R,EAAe9S,KAAKkB,KAAOlB,KAAKG,OAAOC,OAAS,EACpD,QAASyS,GACLC,IAGR,YAAAC,KAAA,WACI,OAAK/S,KAAK4S,WAGV5S,KAAKkB,MACE,IAAIK,EAASvB,KAAKG,OAAOH,KAAKkB,OAH1B,MAMf,YAAA8R,MAAA,WACIhT,KAAKkB,KAAO,GAGhB,YAAA+R,aAAA,SAAaC,QAAA,IAAAA,MAAA,CAAqCC,KAAM,SACpD,IAAIrQ,EAA0B,GAU9B,OATA9C,KAAKyC,UAAS,SAACW,G,MACPgQ,EACJ,KAAe,QAAV,EAAKhQ,SAAK,eAAE6P,cAIb,MAAM,IAAI7H,MAAM,mGAHhBgI,EAAgB7R,EAASqC,KAAWR,EAAM6P,aAAaC,IACvDpQ,EAAYrB,KAAK2R,MAKlB,IAAI7R,EAAQ,WAARA,EAAQ,WAAIuB,MAM3B,sBAAI,6BAAc,C,IAAlB,WACI,IAIIuQ,GAJiBrT,KAAKwB,iBAAiB,KACtCkC,QAAO,SAAAN,GAAQ,OAAAA,EAAKkQ,aAGuB3R,YAAc,IAAIgC,KAAI,SAAA/D,GAAW,OAAAA,EAAQmD,cACzF,OAAO,IAAIxB,EAAQ,WAARA,EAAQ,WAAI8R,M,gCAG3B,sBAAI,yBAAU,C,IAAd,WAEI,IADA,IAAIvQ,EAAc,GACTvC,EAAM,EAAGA,EAAMP,KAAKiB,SAASb,OAAQG,IACtCP,KAAKiB,SAASV,GAAKwC,YACnBD,EAAYrB,KAAKzB,KAAKiB,SAASV,GAAKwC,YAG5C,OAAO,IAAIxB,EAAQ,WAARA,EAAQ,WAAIuB,M,gCAG3B,sBAAI,wBAAS,C,IAAb,WACI,IAAK,IAAIvC,EAAM,EAAGA,EAAMP,KAAKiB,SAASb,OAAQG,IAC1C,GAAIP,KAAKiB,SAASV,GAAKwC,WACnB,OAAO,EAGf,OAAO,G,gCAKJ,EAAAmK,iBAAP,SAAwBqG,G,MAChBC,EAAW,EAEf,IACI,GAAmB,QAAd,EAAKxP,gBAAS,eAAEyP,UAAW,CAC5BF,EAAKG,QACL,IAAID,EAAkBzP,SAAUyP,UAAUE,cAE1CF,EAAUG,UAAU,aAAcL,EAAKjT,MAAMF,QAE7CoT,EAAWC,EAAUtF,KAAK/N,QAEhC,MAAOwO,IAIT,OAAO4E,GAaJ,EAAA5F,iBAAP,SAAwB2F,EAAWrS,IAC/BqS,aAAI,EAAJA,EAAMG,SAAQH,WAAMG,UAGpBH,aAAI,EAAJA,EAAMM,sBAAqBN,WAAMM,mBAAmB3S,EAAKA,KAl8CtD,EAAAgB,OAAS,IAAIX,EAs8CxB,EAx8CA,GAAa,EAAAA,WAo9Cb,8BAEI,KAAA4J,KAAmB,GASvB,OAPI,YAAAtH,QAAA,SAAQjE,GACJI,KAAKmL,KAAK1J,KAAK7B,IAGnB,sBAAI,yBAAU,C,IAAd,WACI,OAAO,IAAI2B,EAAQ,WAARA,EAAQ,WAAIvB,KAAKmL,S,gCAEpC,EAXA,GAAa,EAAA2I,oBAgBA,EAAAC,GAAKxS,G,mFCr9DlB,cAKA,SAAc/B,GA2DV,SAAgBD,EAAK2F,GAIjB,IAFA,IAAI8O,EAAK,KAAM7K,GADfjE,EAAMA,EAAI+F,QAAQ,SAAU,KACL7K,OAEhB4T,EAAGC,KAAK/O,EAAIgP,SAAS/K,MAG5B,OAAOjE,EAAIsI,MAAM,EAAGrE,EAAI,GAsD5B,SAAgBzJ,EAASyU,GAGrB,QAASC,UAAUhU,QAAgB,MAAN+T,IAA4B,iBAANA,GAAkBA,aAAcE,QAtGvE,EAAAC,YAAhB,SAA+BC,EAA2BtN,QAAA,IAAAA,MAAA,MACtD,IACI,IAAIuN,EAASD,IACb,OAAO,EAAAnT,SAAST,aAAa6T,UAAUvN,GACzC,MAAO2H,GACL,OAAO,EAAAxN,SAASc,SAIR,EAAAuS,gBAAhB,SAAmCF,EAA2BtN,QAAA,IAAAA,MAAA,MAC1D,IACI,IAAIuN,EAASD,IACb,OAAO,EAAAnT,SAAST,aAAa6T,UAAUvN,KACzC,MAAO2H,GACL,OAAO,EAAAxN,SAASc,SAUR,EAAAwS,WAAhB,SAA2BP,EAAYQ,QAAA,IAAAA,MAAA,QAEnC,IAAIhI,EAAM,GAIV,OAHAwH,EAAG1N,MAAMkO,GAAUjF,SAAQ,SAAC9P,GACxB+M,EAAIlL,KAAKlC,EAAKK,OAEX+M,GAQK,EAAApN,KAAI,EAkBJ,EAAAE,WAAhB,SAA8BmV,EAAUC,EAAoBC,GACxD,YADoC,IAAAD,MAAA,QAAoB,IAAAC,MAAA,IACxB,kBAA3BF,UAAO,iBACDE,UAAQ,KAITF,aAAgBpF,QAAUqF,IAAWC,EAAaF,EAErDE,EAAKxR,OAAOkM,MAAMC,UAAUjC,MAAMzH,KAAK6O,EAAKC,KASvC,EAAAlV,iBAAhB,SAAiCoV,EAAiBC,GAC9C,IACIC,EAAYD,UAAe,gBAG/B,OAJkBD,UAAU,iBAIT/S,gBAAkBiT,EAAUjT,eAUnC,EAAAkT,WAAhB,SAA2BC,EAAYC,GACnC,OAAO1V,EAAS0V,UAAkBD,GAASC,EAAUD,aAAiBC,GAU1D,EAAA1V,SAAQ,EAMR,EAAA2V,OAAhB,SAAuBlB,GACnB,OAAOA,aAAcmB,UAA0B,mBAAPnB,GAK5B,EAAAoB,UAAhB,SAA0BtE,G,IAAa,wDACnC,GAAc,MAAVA,EACA,MAAM,IAAIuE,UAAU,8CAGxB,IAAIjD,EAAKkD,OAAOxE,GAChB,OAASwE,OAAQC,QACbC,EAAQjG,SAAQ,SAAAtM,GAAQ,OAAMqS,OAAQC,OAAOnD,EAAInP,MAC1CmP,IAGXoD,EAAQjS,QAAO,SAAAN,GAAQ,OAAQ,MAARA,KAAcsM,SAAQ,SAAAtM,GACzC,IAAIwS,EAAaxS,EACjBqS,OAAOI,KAAKD,GACPlS,QAAO,SAAAoS,GAAW,OAAAL,OAAOhG,UAAUsG,eAAehQ,KAAK6P,EAAYE,MACnEpG,SAAQ,SAAAoG,GAAW,OAAAvD,EAAGuD,GAAWF,EAAWE,SAE9CvD,IArJf,CAAc,EAAA/S,OAAA,EAAAA,KAAI,M,wBChBNwW,E,idAAAA,EAAA,EAAAA,YAAA,EAAAA,UAAS,KACjB,aAAI,mBAAM,iBAMD,EAAAC,QAMT,SAAmBlH,EAAmBmH,QAAnB,IAAAnH,MAAA,SAAmB,IAAAmH,MAAA,KAAnB,KAAAnH,UACf/O,KAAKkW,aAAeA,EACpBlW,KAAKmW,cAAe,IAAIC,MAAOC,kBAC/BrW,KAAKsW,YAAa,IAAIF,MAAOC,kBAAoB,IAAM7D,KAAK+D,SAAW,IAAM/D,KAAK+D,UAO1F,IAqBKC,EArBL,EASI,SAAYC,EAAiB1H,GACzB/O,KAAK0W,OAAS3H,EACd/O,KAAK2W,SAAU,EACf3W,KAAK4W,YAAa,EAClB5W,KAAK6W,UAAW,EAChB7W,KAAKyW,QAAUA,IAOvB,SAAKD,GACD,eAAI,mBAAM,iCAAa,qCAD3B,CAAKA,MAAiB,KA4BtB,8BAOc,KAAAM,iBAAwB,GACxB,KAAAC,kBAAyB,GACzB,KAAAC,WAAa,EAIJ,KAAAC,cAAgB,IAChB,KAAAC,UAAY,UAuGnC,OA1FI,YAAAC,iBAAA,SAAiBV,EAAiBzG,GAAlC,WACIhQ,KAAKoX,kBAAkBX,GAIvBzW,KAAK8W,iBAAiBL,GAAShV,MAAK,SAAC4V,GAC7BA,EAAIf,cAAc,EAAKS,mBAG3B/G,EAASqH,OAST,YAAAD,kBAAR,SAA0Bd,GACjBtW,KAAK8W,iBAAiBR,KACvBtW,KAAK8W,iBAAiBR,GAAc,IAEnCtW,KAAK8W,iBAAiB,OACvB9W,KAAK8W,iBAAiB,KAAO,KAUrC,YAAAQ,mBAAA,SAAmBb,EAAiBzG,GAChChQ,KAAK8W,iBAAiBL,IAAYzW,KAAK8W,iBAAiBL,IAAY,IAAI/S,QAAO,SAACN,GAAc,OAAAA,IAAS4M,MAgB3G,YAAAuH,OAAA,SAAOd,EAAiBe,EAAkBD,GACG,GAArCC,EAAQlB,WAAWtV,QAAQ,SAG/BuW,EAAOjB,WAAa,MAAQkB,EAAQlB,WACpCtW,KAAKyX,UAAUhB,EAASc,KAa5B,YAAAC,QAAA,SAAQf,EAAiB1H,GAAzB,WAEQ2I,EAAY3I,EAAQuH,WACpB3J,EAAM,IAAIgL,SAAiB,SAACC,EAASC,GACrC,IAAIC,EAAU,KACV9H,EAAW,SAAC+H,GACRA,EAASzB,YAAc,MAAQoB,IAC/BM,aAAaF,GACb,EAAKR,mBAAmBb,EAASzG,GACjC4H,EAAQG,KAGhBD,EAAU/M,YAAW,WACjB,EAAKuM,mBAAmBb,EAASzG,GACjC6H,EAAO,qBACR,KACH,EAAKV,iBAAiBV,EAASzG,MAInC,OADAjF,YAAW,WAAM,SAAK0M,UAAUhB,EAAS1H,KAAU,GAC5CpC,GAjHK,EAAAsL,WAAa,cAmHjC,EArHA,GA2HA,cAOI,WAAoBC,EAMTC,QANS,IAAAD,MAAA,SAA2BrY,GAC3C,GAAS,OAANoJ,aAAM,IAANA,YAAM,EAANA,OAAQmP,iBACR,OAAO,IAAInP,OAAOmP,iBAAiBvY,GAEtC,MAAMuL,MAAM,0GAEL,IAAA+M,MAAA,SANX,MAOI,cAAO,K,OAPS,EAAAD,gBAMT,EAAAC,eAZH,EAAAE,aAAwD,GAgB5D,EAAKC,YAAe,SAACC,G,QACbC,EAAQD,EAAY7B,OAEpBD,EAAkB8B,EAAY9B,SAEV,QAAxB,EAAG,EAAKK,wBAAgB,eAAGL,MACF,QAArB,IAAKK,wBAAgB,SAAGL,GAAS/G,SAAQ,SAAAM,GACrCA,EAASwI,Q,EA8C7B,OAtE4C,OA8BxC,YAAAf,UAAA,SAAUhB,EAAiB1H,EAAkB0J,QAAA,IAAAA,OAAA,GACzC,IAAIC,EAAsB1Y,KAAK2Y,uBAAuBlC,GACtDzW,KAAK4Y,iBAAiBF,GACtB,IAAIG,EAAiB,IAAIC,EAAerC,EAAS1H,GACjD/O,KAAKqY,aAAaK,GAAqBK,YAAYF,GAChDJ,GACCzY,KAAKsY,YAAYO,IAKjB,YAAAD,iBAAR,SAAyBF,G,OACC,QAAlB,EAAC1Y,KAAKqY,oBAAY,eAAGK,MACrB1Y,KAAKqY,aAAaK,GAAwB1Y,KAAKkY,cAAclY,KAAKmY,cAClEnY,KAAKqY,aAAaK,GAAqB3I,iBAAiB,UAAW/P,KAAKsY,eAIhF,YAAAnB,iBAAA,SAAiBV,EAAiBzG,GAC9B,IAAI0I,EAAsB1Y,KAAK2Y,uBAAuBlC,GACtDzW,KAAK4Y,iBAAiBF,GACtB,YAAMvB,iBAAgB,UAACV,EAASzG,IAGpC,YAAAgJ,SAAA,WACI,IAAIN,EAAsB1Y,KAAK2Y,uBAAuB,KACtD3Y,KAAKqY,aAAaK,GAAuB1Y,KAAKkY,cAAclY,KAAKmY,cACjEnY,KAAKqY,aAAaK,GAAqB3I,iBAAiB,UAAW/P,KAAKsY,cAGpE,YAAAK,uBAAR,SAA+B9Y,GAC3B,OAAOG,KAAKmY,aAAetY,GAG/B,YAAAoZ,WAAA,sBACIxD,OAAOI,KAAK7V,KAAKqY,cAAc3I,SAAQ,SAACwJ,GAAQ,SAAKb,aAAaa,GAAKC,WACvEnZ,KAAKqY,aAAqB,IAIlC,EAtEA,CAA4Ce,GAA/B,EAAAC,yBAqHb,kBASI,WAAYC,EAAiEzZ,QAAjE,IAAAyZ,MAAA,aAAiE,IAAAzZ,MAAA,SAA7E,MAEI,cAAO,K,OAFkE,EAAAA,OAuBzE,EAAK0Z,WAAa,SAACpR,GAAsB,OAfxB,SAACqQ,G,oBACVgB,EAA8B,QAAnB,EAAW,QAAf,EAAShB,SAAM,eAAE9B,cAAM,QAA+B,QAA/B,EAAyB,QAAzB,EAAmB8B,SAAM,eAAErN,YAAI,eAAEuL,OAC/DD,EAAuC,QAA5B,EAAkB,QAAjB,EAAW,QAAb,EAAO+B,SAAM,eAAErN,YAAI,eAAEsL,eAAQ,QAAiB,QAAX,EAAK+B,SAAM,eAAE/B,QAG9D,IAAI+C,aAAO,EAAPA,EAASlD,cAAckD,aAAO,EAAPA,EAASzK,SAAS,CACzC,IAAIsI,EAAemC,EACnB,GAAInC,EAAIf,cAAc,EAAKS,kBACvB,OAIJ,EAAKU,UAAUhB,EAASY,IAGSoC,CAAWtR,IACpD,EAAK6Q,SAASM,G,EA4JtB,OA7L4B,OAwCxB,YAAAN,SAAA,SAASM,GACLtZ,KAAK0Z,SAAiBJ,EAAcnN,KAAamN,EAAcnN,KAAOmN,EAC5DA,EAAcnN,KACImN,EAAcnN,KACjC3L,aAAa,cAAe,MAE7B8Y,aAAY,EAAZA,EAA6B,eACvBA,EAAc9Y,aAAa,cAAe,KAGxDR,KAAK0Z,SAAS3J,iBAAiB4J,EAAO1B,WAAYjY,KAAKuZ,WAAY,CAACK,SAAS,IAE7E5Z,KAAK0Z,SAAS3J,iBAAiB/P,KAAKkX,UAAWlX,KAAKuZ,WAAY,CAACK,SAAS,KAO9E,YAAAX,WAAA,WACIjZ,KAAK0Z,SAASxJ,oBAAoByJ,EAAO1B,WAAYjY,KAAKuZ,YAC1DvZ,KAAK0Z,SAASxJ,oBAAoBlQ,KAAKkX,UAAWlX,KAAKuZ,aAkB3D,YAAA9B,UAAA,SAAUhB,EAAiB1H,GACvB,IACI/O,KAAK6Z,WAAWpD,EAAS1H,GAAS,GAAO,GAEzC/O,KAAK8Z,aAAarD,EAAS1H,GAAS,GAAM,G,QAE1C/O,KAAK+Z,wBAaL,YAAAA,oBAAR,WACI,KAAO/Z,KAAKgX,WAAc,IAAM,EAAhC,CAGA,IAAIgD,EAA4B,GAChC,IAAK,IAAId,KAAOlZ,KAAK+W,kBACb/W,KAAKia,mBAAmBf,KAC5Bc,EAAqBd,GAAOlZ,KAAK+W,kBAAkBmC,IAEvDlZ,KAAK+W,kBAAoBiD,IAGrB,YAAAH,WAAR,SAAmBpD,EAAiB1H,EAAkBmL,EAAwBC,GAK1E,QALkD,IAAAD,OAAA,QAAwB,IAAAC,OAAA,GACrED,GACDla,KAAKoa,iBAAiB3D,EAAS1H,GAEnC/O,KAAK+W,kBAAkBhI,EAAQuH,YAAcvH,EAAQoH,aAChC,MAAjBlN,OAAOoR,OAAgB,CAEvB,IAAIxB,EAAiB,IAAIC,EAAerC,EAAS1H,GACjD9F,OAAOoR,OAAOtB,YAAYuB,KAAKC,MAAMD,KAAKE,UAAU3B,IAAkB9J,EAAQmH,cAE9EiE,GACAna,KAAKya,kBAAkBhE,EAAS1H,IAIhC,YAAA0L,kBAAR,SAA0BhE,EAAiB1H,GACvC,IAAIyJ,EAAQxY,KAAK0a,iBAAiBjE,EAAS1H,GAAS,GAEpD9F,OAAOf,cAAcsQ,IAIjB,YAAAsB,aAAR,SAAqBrD,EAAiB1H,EAAkBmL,EAAwBC,QAAxB,IAAAD,OAAA,QAAwB,IAAAC,OAAA,GACvED,GACDla,KAAKoa,iBAAiB3D,EAAS1H,GAEnC/O,KAAK+W,kBAAkBhI,EAAQuH,YAAcvH,EAAQoH,aACrD,IAAIhO,EAAMnI,KAAK0a,iBAAiBjE,EAAS1H,GAGzCS,MAAMC,UAAUjC,MAAMzH,KAAK/B,SAASxC,iBAAiB,WAAWkO,SAAQ,SAAC9P,GACrE,IAAIiZ,EAAiB,IAAIC,EAAerC,EAAS1H,GACjDnP,EAAQ+a,cAAc5B,YAAYuB,KAAKC,MAAMD,KAAKE,UAAU3B,IAAkB9J,EAAQmH,iBAG1F1G,MAAMC,UAAUjC,MAAMzH,KAAK/B,SAASxC,iBAAiB,sBAAsBkO,SAAQ,SAAC9P,GAAyB,OAAAA,EAAQsI,cAAcC,MAE/HgS,GACAna,KAAKya,kBAAkBhE,EAAS1H,IAKhC,YAAAqL,iBAAR,SAAyB3D,EAAiB1H,GACtC,IAAI6L,EAAY5a,KAAK8W,iBAAiBL,IAClCmE,aAAS,EAATA,EAAWxa,SAKXwa,EAAUlL,SAJQ,SAAC9P,GACfA,EAAQmP,OAOZ,YAAA2L,iBAAR,SAAyBjE,EAAiB1H,EAAkB4H,QAAA,IAAAA,OAAA,GACxD,IAAIkC,EAAiB,IAAIC,EAAerC,EAAS1H,GAEjD,OADA8J,EAAelC,QAAUA,EAClB3W,KAAK6a,kBAAkBlB,EAAO1B,WAAYY,IAG7C,YAAAgC,kBAAR,SAA0Bhb,EAAcib,GACpC,GAAI,mBAAqB7R,OAAO8R,YAAa,CACzC,IAAInM,EAAS5K,SAASsM,YAAY,cAIlC,OAHA1B,EAAE8H,OAASoE,EAAQpE,OACnB9H,EAAE6H,QAAUqE,EAAQrE,QACpB7H,EAAE2B,UAAU1Q,EAAMib,EAAQnE,QAASmE,EAAQlE,YACpChI,EAGP,IAAIoM,EAAc,IAAI/R,OAAO8R,YAAYlb,EAAMib,GAE/C,OADME,EAAavE,QAAUqE,EAAQrE,QAC9BuE,GAKP,YAAAf,mBAAR,SAA2Bf,GACvB,OAAOlZ,KAAK+W,kBAAkBmC,IAAQ,IAAK9C,MAAQC,kBAAoBrW,KAAKiX,eAEpF,EA7LA,CAA4BmC,GAAf,EAAAO,U,23BCtSb,aACA,SACA,SACOpE,EAAY,EAAA/V,KAAK+V,UA6CxB,aACI,WAAYjV,GACRN,KAAKib,OAAS3a,EAyBtB,OApBI,sBAAI,oBAAK,C,IAAT,WACI,OAAON,KAAKib,Q,gCAGhB,YAAAtX,IAAA,SAAOuX,GAKH,OAJKA,IACDA,EAAK,SAAClT,GAAe,OAAGA,IAGrB,IAAImT,EADKD,EAAGlb,KAAKM,SAI5B,YAAAiO,QAAA,SAAW2M,GAEP,IADA,IAAI7H,EAAqBrT,KAAK2D,IAAIuX,IAC3B7H,aAAM,EAANA,EAAQ/S,iBAAiB6a,GAC5B9H,EAASA,EAAO/S,MAEpB,OAAO+S,GAGf,EA3BA,GAAa,EAAA8H,QAkCb,kBAKI,WAAY7a,G,OACR,YAAMA,IAAM,KAwNpB,OA9NiC,OAS7B,sBAAI,oBAAK,C,IAAT,WACI,OAAIN,KAAKib,kBAAkBE,EAChBnb,KAAKib,OAAO1M,UAAUjO,MAE1BN,KAAKib,Q,gCAGT,EAAAta,aAAP,SAA8CL,GAC1C,OAAW,IAAIc,EAASd,IAI5B,YAAAe,SAAA,WACI,YAAO,IAAsBrB,KAAKM,OAAS,MAAQN,KAAKM,OAM5D,YAAA2B,UAAA,SAAU6D,GACN,IAAI5D,EAASlC,KAAKqB,WAIlB,OAHKa,GAAU4D,GACXA,EAAgBC,KAAK/F,KAAMA,OAEvBkC,GAGZ,YAAA8D,cAAA,SAAcF,GAGV,YAHU,IAAAA,MAAA,cAEV9F,KAAKiC,UAAU8D,KAAK/F,KAAM8F,GACnB9F,MAGX,YAAAE,OAAA,SAAO0L,GACH,OAAI5L,KAAKiC,YACEjC,KAGU,MAAb4L,EACOxK,EAASc,OAEblC,KAAKuO,SAAQ,WAAM,OAAA3C,MASlC,YAAAzB,WAAA,SAAWX,GACP,OAAIxJ,KAAKiC,YACEjC,KAEAA,KAAKuO,QAAQ/E,IAQ5B,YAAA+E,QAAA,SAAW2M,GACP,IAAInb,EAAM,YAAMwO,QAAO,UAAC2M,GACxB,OAAMnb,aAAeqB,EAICrB,EAAIwO,UAHfnN,EAAST,aAAaZ,EAAIO,QAUzC,YAAAsB,MAAA,W,IAAS,sDAGL,IADA,IAAIwZ,EAA4Bpb,KACvBO,EAAM,EAAGA,EAAM2Y,EAAI9Y,OAAQG,IAAO,CACvC,IAAI8a,EAAUrb,KAAKsb,OAAOpC,EAAI3Y,IAC1Bgb,EAASvb,KAAKwb,WAAWtC,EAAI3Y,IAEjC,GAAgB,KAAZ8a,GAAkBE,GAAU,GAE5B,IADAH,EAAapb,KAAKS,WAAWE,aAAeya,EAAW9a,iBAAiBkP,MAAiB4L,EAAW9a,MAAMF,OAASmb,EAAS,KAAOH,EAAW9a,MAAMib,GAAnE,OAClEla,WACX,OAAO+Z,OAGR,GAAIC,GAAWE,GAAU,EAAzB,CACH,GAAIH,EAAWK,aAAaJ,GAASha,WACjC,OAAO+Z,EAGX,IADAA,EAAcA,EAAWK,aAAaJ,GAAS/a,iBAAiBkP,MAASxP,KAAKS,WAAWE,aAAaya,EAAWK,aAAaJ,GAAS/a,MAAMib,IAAWvb,KAAKS,WAAWyB,QACzJb,WACX,OAAO+Z,MANR,CAaP,IAFIA,EAAaA,EAAWK,aAAaJ,IAE1Bha,WACX,OAAO+Z,EACAG,GAAU,IACjBH,EAAapb,KAAKS,WAAWE,aAAaya,EAAW9a,MAAMib,MAKnE,OAFaH,GAYjB,YAAAM,MAAA,SAAMR,GACF,OAAIlb,KAAKqB,YAGF6Z,EAAGlb,KAAKM,QAUnB,YAAAL,IAAA,SAAOH,GACH,YADG,IAAAA,MAAkBsB,EAASc,QAC1BlC,KAAKqB,WACErB,KAAKS,WAAWE,aAAab,GAAYyO,UAG7CvO,KAAKS,WAAWE,aAAaX,KAAKM,OAAOiO,WAGpD,YAAAoN,OAAA,WACI,OAAOrB,KAAKE,UAAUxa,KAAKM,QAUrB,YAAAG,SAAV,WACI,OAAOW,GAID,YAAAoa,WAAV,SAAqBtC,GACjB,IAAI0C,EAAQ1C,EAAIlY,QAAQ,KACpB2R,EAAMuG,EAAIlY,QAAQ,KACtB,OAAI4a,GAAS,GAAKjJ,EAAM,GAAKiJ,EAAQjJ,EAC1BkJ,SAAS3C,EAAI5K,UAAUsN,EAAQ,EAAGjJ,KAEjC,GAKN,YAAA2I,OAAV,SAAiBpC,GACb,IAAI0C,EAAQ1C,EAAIlY,QAAQ,KAExB,OAAI4a,GAAS,EACF1C,EAAI5K,UAAU,EAAGsN,GAEjB1C,GASf,YAAAuC,aAAA,SAAgBvC,GACZ,OAAIlZ,KAAKqB,WACErB,KAAKS,WAAWyB,OAEpBlC,KAAKS,WAAWE,aAAaX,KAAKM,MAAM4Y,IAAM3K,WAezD,YAAAqJ,QAAA,SAAWkE,GACP,GAAI9b,KAAKqB,WACL,OAAOD,EAASc,OAEpB,IACI,OAAOd,EAAST,aAAamb,EAAS9b,KAAKM,QAC7C,MAAOsO,GACL,OAAOxN,EAASc,SAvNjB,EAAAA,OAASd,EAAST,aAAa,MA2N1C,EA9NA,CAAiCwa,GAApB,EAAA/Z,WA0Ob,kBAOI,WAAYsY,EAAe9Y,QAAA,IAAAA,MAAA,SAA3B,MACI,YAAM8Y,IAAS,K,OAEf,EAAKR,IAAMtY,E,EA6CnB,OAvDsC,OAalC,sBAAI,oBAAK,C,IAAT,WACI,OAAOZ,KAAKib,OAAYjb,KAAKib,OAAOjb,KAAKkZ,KAAO,M,IAGpD,SAAU6C,GACD/b,KAAKib,SAGVjb,KAAKib,OAAOjb,KAAKkZ,KAAO6C,I,gCAG5B,YAAA7b,OAAA,SAAO0L,GACH,IAAIoQ,EAAc,GAElB,OADAA,EAAYhc,KAAKkZ,KAAOtN,EACjB5L,KAAKiC,YAAcjC,KAAO,IAAIa,EAAcmb,EAAahc,KAAKkZ,MAGzE,YAAA/O,WAAA,SAAWX,GACP,GAAIxJ,KAAKiC,YACL,OAAOjC,KAEP,IAAIgc,EAAc,GAElB,OADAA,EAAYhc,KAAKkZ,KAAO1P,IACjB,IAAI3I,EAAcmb,EAAahc,KAAKkZ,MAWzC,YAAAzY,SAAV,WACI,OAAOI,GAGJ,EAAAF,aAAP,SAA6CL,EAAaM,GACtD,YADsD,IAAAA,MAAA,SACzC,IAAIC,EAAiBP,EAAOM,IAjDtC,EAAAsB,OAASrB,EAAcF,aAAa,MAoD/C,EAvDA,CAAsCS,GAAzB,EAAAP,gBA6Db,kBAUI,WAAY6Y,EAAeR,EAAUqC,GAArC,MACI,YAAM7B,EAAUR,IAAI,K,OAEpB,EAAKqC,OAASA,WAAW,E,EAsBjC,OAnC6B,OAgBzB,sBAAI,oBAAK,C,IAAT,WACI,MAAgB,IAAZvb,KAAKkZ,KAAalZ,KAAKub,QAAU,EAC1Bvb,KAAKib,OAAOjb,KAAKub,QACjBvb,KAAKkZ,KAAOlZ,KAAKub,QAAU,EAC3Bvb,KAAKib,OAAOjb,KAAKkZ,KAAKlZ,KAAKub,QAE/Bvb,KAAKib,OAAOjb,KAAKkZ,M,IAG5B,SAAUnZ,GACU,IAAZC,KAAKkZ,KAAalZ,KAAKub,QAAU,EACjCvb,KAAKib,OAAOjb,KAAKub,QAAUxb,EAEpBC,KAAKkZ,KAAOlZ,KAAKub,QAAU,EAClCvb,KAAKib,OAAOjb,KAAKkZ,KAAKlZ,KAAKub,QAAUxb,EAGzCC,KAAKib,OAAOjb,KAAKkZ,KAAOnZ,G,gCA9BrB,EAAAmC,OAAS+Z,EAAYtb,aAAa,MAgC7C,EAnCA,CAA6BE,GA2C7B,cACI,WAAYqb,G,OACR,YAAMA,IAAK,KA2LnB,OA7L4B,OAKxB,sBAAI,0BAAW,C,IAAf,WACI,OAAO,IAAIlL,EAAO,EAAA7O,OAAOga,QAAQnc,KAAKM,OAAOuD,QAAQ,IAAI,EAAAuY,uB,gCAG7D,sBAAI,uBAAQ,C,IAAZ,WACI,OAAO,IAAIpL,EAAOuE,EAAU,GAAIvV,KAAKM,S,gCAGlC,EAAAK,aAAP,SAAuBL,GACnB,OAAO,IAAI0Q,EAAO1Q,IAMtB,YAAA+b,aAAA,SAAaC,EAAeC,EAAkBC,GAA9C,gBAA4B,IAAAD,OAAA,QAAkB,IAAAC,OAAA,G,eACjCtD,IACDqD,GAAerD,KAAO,EAAK5Y,QACtBkc,EAGGhN,MAAMiN,QAAQH,EAAM1a,MAAMsX,GAAK5Y,OAC/B,EAAA6B,OAAOC,GAAE,MAAT,EAAAD,OAAM,EAAOma,EAAM1a,MAAMsX,GAAK5Y,QAAOoJ,MAAK,SAAAtG,GAAQ,SAAKsO,OAAOwH,GAAK5Y,MAAQ8C,KAE3E,EAAKsO,OAAOwH,GAAK5Y,MAAQgc,EAAM1a,MAAMsX,GAAK5Y,MAL9C,EAAKoV,OAAOwD,GAAK5Y,MAAQgc,EAAM1a,MAAMsX,GAAK5Y,Q,OAHtD,IAAK,IAAI4Y,KAAOoD,EAAMhc,M,EAAb4Y,IA2Bb,YAAAxH,OAAA,W,IAAO,sDACH,IAAIgL,EAAS7G,EAAKzV,OAAS,EAC3B,IAAIsc,EAAJ,CAIA,IAAIC,EAAU9G,EAAKA,EAAKzV,OAAS,GAG7Bwc,GAFoB5c,KAAKsb,OAAOqB,GAEnB3c,KAAK4B,MAAK,MAAV5B,KAAI,EAAU6V,IAAM5T,aACrCjC,KAAK6c,UAAUhH,GAEf,IAAIiH,EAAiB9c,KAAKwb,WAAWmB,GACrC,GAAIG,GAAkB,EAClB,MAAM1R,MAAM,4EAEhB,IAAI9K,EAAaN,KAAK4B,MAAK,MAAV5B,KAAI,EAAU6V,IAAMvV,MAChCkP,MAAMiN,QAAQnc,KACfA,EAAQN,KAAK0V,OAAM,MAAX1V,KAAI,EAAW6V,IAAMvV,MAAQ,CAACA,IAEtCsc,GACAtc,EAAMmB,KAAK,IAEfqb,EAAiBxc,EAAMF,OAAS,EAEhC,IAAI2c,EAAS,IAAId,EAA2B,GAAfpG,EAAKzV,OAAcJ,KAAKM,MAAQN,KAAK4B,MAAMob,MAAMhd,KAAM6V,EAAKrI,MAAM,EAAGqI,EAAKzV,OAAS,IAAIE,MAChHqc,EAASG,GAGb,OAAOC,IAGX,YAAAE,SAAA,SAASC,G,IAAoB,wDACzB,OAAKA,EAGEld,KAAK0R,OAAM,MAAX1R,KAAI,EAAW6V,IAFX,CAACvV,MAAO,OAKvB,YAAAoV,OAAA,W,IAAO,sDACH,KAAIG,EAAKzV,OAAS,GAAlB,CAIAJ,KAAK6c,UAAUhH,GAEf,IAAIwF,EAAUrb,KAAKsb,OAAOzF,EAAKA,EAAKzV,OAAS,IACzCmb,EAASvb,KAAKwb,WAAW3F,EAAKA,EAAKzV,OAAS,IAC5C2c,EAAS,IAAId,EAA2B,GAAfpG,EAAKzV,OAAcJ,KAAKM,MAAQN,KAAK4B,MAAMob,MAAMhd,KAAM6V,EAAKrI,MAAM,EAAGqI,EAAKzV,OAAS,IAAIE,MAChH+a,EAASE,GAGb,OAAOwB,IAGX,YAAAI,SAAA,SAASD,G,IAAoB,wDACzB,OAAOA,EAAYld,KAAK0V,OAAM,MAAX1V,KAAI,EAAW6V,IAAQ,CAACvV,MAAO,OAGtD,YAAAsB,MAAA,W,IAAM,sDACF,OAAO5B,KAAKS,WAAWE,aAAa,YAAMiB,MAAMob,MAAMhd,KAAM6V,GAAMvV,QAGtE,YAAAL,IAAA,SAAIH,GACA,OAAOE,KAAKS,WAAWE,aAAa,YAAMV,IAAG,UAACH,GAAYQ,QAI9D,YAAA2F,OAAA,SAAOiT,GAIH,OAHIA,KAAOlZ,KAAKM,cACLN,KAAKM,MAAM4Y,GAEflZ,MAGX,YAAA2b,OAAA,WACI,OAAOrB,KAAKE,UAAUxa,KAAKM,QAGrB,YAAAG,SAAV,WACI,OAAOuQ,GAGH,YAAAoM,OAAR,SAAerd,GACXC,KAAKib,OAASlb,GAQV,YAAA8c,UAAR,SAAkBhH,GAYd,IAXA,IAAI9V,EAAMC,KACNqd,EAAYrd,KAAKS,WAAWE,aAAa,MACzC2c,GAAa,EACbC,EAAQ,SAAUC,EAAiBpd,GAGnC,IAFA,IAAIqd,EAAUD,EAAIpd,OACdsd,EAAUD,EAAUrd,EACfG,EAAMkd,EAASld,EAAMmd,EAASnd,IACnCid,EAAI/b,KAAK,KAIRlB,EAAM,EAAGA,EAAMsV,EAAKzV,OAAQG,IAAO,CACxC,IAAI8a,EAAUrb,KAAKsb,OAAOzF,EAAKtV,IAC3Bgb,EAASvb,KAAKwb,WAAW3F,EAAKtV,IAElC,GAAgB,KAAZ8a,GAAkBE,GAAU,EAE5Bxb,EAAIqd,OAAQrd,EAAIO,iBAAiBkP,MAASzP,EAAIO,MAAQ,IACtDid,EAAMxd,EAAIO,MAAOib,EAAS,GACtB+B,GAAa,IACbD,EAAU/c,MAAMgd,GAAavd,EAAIO,OAErC+c,EAAYtd,EACZud,EAAY/B,EACZxb,EAAMC,KAAKS,WAAWE,aAAaZ,EAAIO,MAAMib,QATjD,CAaA,IAAIoC,EAAkB5d,EAAI6B,MAAMyZ,GAChC,IAAe,GAAXE,EACIoC,EAAQtc,WACRsc,EAAkB3d,KAAKS,WAAWE,aAAaZ,EAAIO,MAAM+a,GAAW,IAEpEtb,EAAW4d,MAEZ,CACH,IAAIH,EAAOG,EAAQrd,iBAAiBkP,MAASmO,EAAQrd,MAAQ,GAC7Did,EAAMC,EAAKjC,EAAS,GACpBxb,EAAIO,MAAM+a,GAAWmC,EACrBG,EAAU3d,KAAKS,WAAWE,aAAa6c,EAAIjC,IAE/C8B,EAAYtd,EACZud,EAAY/B,EACZxb,EAAW4d,GAGf,OAAO3d,MAEf,EA7LA,CAA4BoB,GAAf,EAAA4P,U,sfC3bb,IAEY4M,EAFZ,UAEA,SAAYA,GACR,yBAAS,+BAAY,2BADzB,CAAYA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KAgBzB,mBAAwB9F,GACpB,IAAI+F,EAAe,KACnB,OAAO,IAAIC,GAAmB,SAACd,EAAiBnF,GAC5CgG,EAAU9S,YAAW,WAAM,OAAAiS,MAASlF,MACrC,WACK+F,IACA7F,aAAa6F,GACbA,EAAU,UAKtB,oBAAyB/F,GACrB,IAAI+F,EAAe,KACnB,OAAO,IAAIC,GAAmB,SAACd,EAAiBnF,GAC5CgG,EAAUE,aAAY,WAClBf,MACDlF,MACJ,WACK+F,IACAG,cAAcH,GACdA,EAAU,UAYtB,iBAMI,WAAYI,GAAZ,WAJA,KAAAC,OAASN,EAAcO,QACb,KAAAC,SAAuB,GAK7Bpe,KAAKM,MAAQ2d,EACbje,KAAKM,OAAM,SAAC6K,GAAc,SAAKyM,QAAQzM,MAAO,SAACA,GAAc,SAAK0M,OAAO1M,MAoNjF,OAjNW,EAAAkT,IAAP,W,IAAW,sDAEP,IACIC,EADAC,EAAa,EAGbC,EAAY,IAAI7G,GAAQ,SAACqF,EAAiBnF,GAC1CyG,EAAUtB,KAEViB,EAAW,WACXM,IAEIE,EAASre,QAAUme,GACnBD,KAGFL,EAAUS,UAAW,EAE3B,IAAK,IAAIne,EAAM,EAAGA,EAAMke,EAASre,OAAQG,IACrCke,EAASle,GAAKoe,QAAQV,GAE1B,OAAOO,GAGJ,EAAAI,KAAP,W,IAAY,sDAER,IACIN,EACAO,EAEAL,EAAY,IAAI7G,GAAQ,SAACqF,EAAiBnF,GAC1CyG,EAAUtB,EACV6B,EAAWhH,KAGXiH,EAAe,WAMf,OALMR,GACFA,IAEJA,EAAU,KACVO,EAAW,KACJ,MAELC,EAAcJ,UAAW,EAE/B,IAAIK,EAAe,WAMf,OALMF,GACFA,IAEJA,EAAW,KACXP,EAAU,KACH,MAELS,EAAcL,UAAW,EAE/B,IAAK,IAAIne,EAAM,EAAGA,EAAMke,EAASre,OAAQG,IACrCke,EAASle,GAAKye,KAAKF,GACnBL,EAASle,GAAK0e,MAAMF,GAExB,OAAOP,GAGJ,EAAA3G,OAAP,SAAcqH,GAcV,OAba,IAAIvH,GAAQ,SAACC,EAAcC,GAEhCqH,aAAkBvH,EAClBuH,EAAOF,MAAK,SAACjf,GACT8X,EAAO9X,MAGXgL,YAAW,WACP8M,EAAOqH,KACR,OAOR,EAAAtH,QAAP,SAAesH,GAYX,OAXa,IAAIvH,GAAQ,SAACC,EAAcC,GAEhCqH,aAAkBvH,EAClBuH,EAAOF,MAAK,SAACjf,GAAQ,OAAA6X,EAAQ7X,MAE7BgL,YAAW,WACP6M,EAAQsH,KACT,OAOf,YAAAF,KAAA,SAAKG,EAAkCC,GAMnC,OALApf,KAAKoe,SAAS3c,KAAK,CAAC,KAAQ0d,IACxBC,GACApf,KAAKoe,SAAS3c,KAAK,CAAC,MAAS2d,IAEjCpf,KAAKqf,kBACErf,MAGX,YAAAif,MAAA,SAAME,GAGF,OAFAnf,KAAKoe,SAAS3c,KAAK,CAAC,MAAS0d,IAC7Bnf,KAAKqf,kBACErf,MAGX,YAAA2e,QAAA,SAAQQ,GACJ,IAAUnf,KAAMsf,WAOhB,OAFAtf,KAAKoe,SAAS3c,KAAK,CAAC,QAAW0d,IAC/Bnf,KAAKqf,kBACErf,KANGA,KAAMsf,WAAWX,QAAQQ,IAS7B,YAAAvH,QAAV,SAAkB7X,GAEd,KAAOC,KAAKoe,SAAShe,QACZJ,KAAKoe,SAAS,GAAGY,MADG,CAIzB,IAAI9D,EAAKlb,KAAKoe,SAASmB,QAEnBC,EAAa,EAAApe,SAAST,aAAaua,EAAG8D,KAAKjf,IAE/C,IAAIyf,EAAWvd,YAYX,MATA,IADAlC,GADAyf,EAAaA,EAAWjR,WACPjO,iBACEqX,EAMf,YAFA3X,KAAKyf,uBAAuB1f,GASxCC,KAAK0f,cACL1f,KAAKke,OAASN,EAAc+B,YAGtB,YAAA9H,OAAV,SAAiB9X,GAEb,KAAOC,KAAKoe,SAAShe,SACbJ,KAAKoe,SAAS,GAAGO,SADI,CAIzB,IAAIzD,EAAKlb,KAAKoe,SAASmB,QACvB,GAAIrE,EAAG+D,MAAO,CACV,IAAIO,EAAa,EAAApe,SAAST,aAAaua,EAAG+D,MAAMlf,IAChD,GAAIyf,EAAWvd,YAAa,CAGxB,IADAlC,GADAyf,EAAaA,EAAWjR,WACPjO,iBACEqX,EAGf,YADA3X,KAAKyf,uBAAuB1f,GAGhCC,KAAKke,OAASN,EAAcgC,SAC5B,MAEA,OAKZ5f,KAAKke,OAASN,EAAcgC,SAC5B5f,KAAK0f,eAGC,YAAAA,YAAV,WACI,KAAO1f,KAAKoe,SAAShe,QAAQ,CACzB,IAAI8a,EAAKlb,KAAKoe,SAASmB,QACnBrE,EAAGyD,SACHzD,EAAGyD,YAKP,YAAAU,gBAAR,WAGI,IAFA,IAAIQ,EAAY,GACZC,EAAO,GACFvf,EAAM,EAAGA,EAAMP,KAAKoe,SAAShe,OAAQG,IAC1C,IAAK,IAAI2Y,KAAOlZ,KAAKoe,SAAS7d,GACtBP,KAAKoe,SAAS7d,GAAK2Y,GAAKwF,SACxBmB,EAAUpe,KAAKzB,KAAKoe,SAAS7d,IAE7Buf,EAAKre,KAAKzB,KAAKoe,SAAS7d,IAIpCP,KAAKoe,SAAW0B,EAAKxc,OAAOuc,IAGxB,YAAAJ,uBAAR,SAA+B1f,GAC3B,IAAK,IAAIQ,EAAM,EAAGA,EAAMP,KAAKoe,SAAShe,OAAQG,IAC1C,IAAK,IAAI2Y,KAAOlZ,KAAKoe,SAAS7d,GAC1BR,EAAImZ,GAAKlZ,KAAKoe,SAAS7d,GAAK2Y,KAI5C,EA7NA,GAAa,EAAAvB,UAwOb,kBAMI,WAAYsG,EAA+E8B,GAA3F,MACI,YAAM9B,IAAS,K,OAuBX,EAAA8B,YAAc,aAtBlB,EAAKA,YAAcA,E,EAwB3B,OAhCwC,OAWpC,YAAAC,OAAA,WACIhgB,KAAKke,OAASN,EAAcgC,SAC5B5f,KAAK0f,cAEL1f,KAAKoe,SAAW,IAGpB,YAAAY,KAAA,SAAKG,EAAkCC,GACnC,OAA2B,YAAMJ,KAAI,UAACG,EAAcC,IAGxD,YAAAH,MAAA,SAAME,GACF,OAA2B,YAAMF,MAAK,UAACE,IAG3C,YAAAR,QAAA,SAAQQ,GACJ,OAA2B,YAAMR,QAAO,UAACQ,IAKjD,EAhCA,CAAwCxH,GAA3B,EAAAmG,sB,wvBC3Qb,aAmDA,aAMI,WAAYlC,EAAeqE,GACvBjgB,KAAKigB,MAAQA,EACbjgB,KAAK4b,MAAQA,EACb5b,KAAKM,MAAQsb,EAerB,OAXI,YAAAhJ,QAAA,WACI,OAAO5S,KAAKM,MAAQN,KAAKigB,OAG7B,YAAAlN,KAAA,WACI,OAAOP,KAAKC,IAAIzS,KAAKM,QAASN,KAAKigB,MAAQ,IAG/C,YAAAjN,MAAA,WACIhT,KAAKM,MAAQ,GAErB,EAxBA,GAAa,EAAA4f,qBA8Bb,iBAII,a,IAAY,sDAFZ,KAAAC,SAAW,EAGPngB,KAAKM,MAAQA,EAerB,OAZI,YAAAsS,QAAA,WACI,OAAO5S,KAAKM,MAAMF,OAAS,EAAIJ,KAAKmgB,SAGxC,YAAApN,KAAA,WAEI,OADA/S,KAAKmgB,UACEngB,KAAKM,MAAMN,KAAKmgB,UAG3B,YAAAnN,MAAA,WACIhT,KAAKmgB,SAAW,GAExB,EApBA,GAAa,EAAAC,wBA4Bb,iBAOI,WAAYC,EAA4BhG,GAFxC,KAAAiG,aAAkB,KAGdtgB,KAAKqgB,WAAaA,EAClBrgB,KAAKugB,gBAAkBlG,EAuC/B,OA9BI,YAAAzH,QAAA,WACI,KAA4B,MAArB5S,KAAKsgB,cAAwBtgB,KAAKugB,gBAAgB3N,WAAW,CAChE,IAAIG,EAAa/S,KAAKugB,gBAAgBxN,OACtC,GAAI/S,KAAKqgB,WAAWtN,GAEhB,OADA/S,KAAKsgB,aAAevN,GACb,EAEP/S,KAAKsgB,aAAe,KAG5B,OAA4B,MAArBtgB,KAAKsgB,cAMhB,YAAAvN,KAAA,WACI,IAAIpG,EAAM3M,KAAKsgB,aAMf,OALAtgB,KAAKsgB,aAAe,KAIpBtgB,KAAK4S,UACEjG,GAGX,YAAAqG,MAAA,WACIhT,KAAKsgB,aAAe,KACpBtgB,KAAKugB,gBAAgBvN,SAE7B,EAhDA,GAAa,EAAAwN,2BAsDb,iBAKI,WAAYC,EAAmBpG,GAC3Bra,KAAKygB,QAAUA,EACfzgB,KAAKugB,gBAAkBlG,EAc/B,OAXI,YAAAzH,QAAA,WACI,OAAO5S,KAAKugB,gBAAgB3N,WAGhC,YAAAG,KAAA,WACI,OAAO/S,KAAKygB,QAAQzgB,KAAKugB,gBAAgBxN,SAG7C,YAAAC,MAAA,WACIhT,KAAKugB,gBAAgBvN,SAE7B,EArBA,GAAa,EAAA0N,yBA0Bb,iBAeI,WAAYlX,EAAuB6Q,GAC/Bra,KAAKygB,QAAUjX,EACfxJ,KAAKugB,gBAAkBlG,EAoC/B,OAjCI,YAAAzH,QAAA,WACI,OAAO5S,KAAK2gB,sBAAwB3gB,KAAK4gB,mBAGrC,YAAAD,mBAAR,WACI,IAAI5N,GAAO,EAIX,OAHI/S,KAAK6gB,mBACL9N,EAAO/S,KAAK6gB,iBAAiBjO,WAE1BG,GAGH,YAAA6N,gBAAR,WAEI,IADA,IAAI7N,GAAO,GACHA,GAAQ/S,KAAKugB,gBAAgB3N,WAAW,CAC5C,IAAIS,EAASrT,KAAKygB,QAAQzgB,KAAKugB,gBAAgBxN,QAC3CvD,MAAMiN,QAAQpJ,GACdrT,KAAK6gB,iBAAmB,IAAIT,EAAqB,WAArBA,EAAqB,WAAI/M,KAErDrT,KAAK6gB,iBAAmBxN,EAE5BN,EAAO/S,KAAK6gB,iBAAiBjO,UAEjC,OAAOG,GAGX,YAAAA,KAAA,WACI,OAAO/S,KAAK6gB,iBAAiB9N,QAGjC,YAAAC,MAAA,WACIhT,KAAKugB,gBAAgBvN,SAE7B,EArDA,GAAa,EAAA8N,0BA2Db,8BACY,KAAA3V,KAAiB,GAS7B,OAPI,YAAAtH,QAAA,SAAQjE,GACJI,KAAKmL,KAAK1J,KAAK7B,IAGnB,sBAAI,yBAAU,C,IAAd,WACI,OAAOI,KAAKmL,M,gCAEpB,EAVA,GAAa,EAAArH,iBAgBb,8BACI,KAAAid,WAAkC,GAOtC,OALI,YAAAld,QAAA,SAAQjE,G,YACAsZ,EAAiB,QAAd,EAAGtZ,aAAO,EAAPA,EAAU,UAAC,QAAcA,EACnCI,KAAK+gB,WAAW7H,GAA4B,QAAxB,EAAkB,QAAlB,EAAGlZ,KAAK+gB,kBAAU,eAAG7H,UAAG,QAAK,GACjDlZ,KAAK+gB,WAAW7H,GAAKzX,KAAgB,QAAZ,EAAC7B,aAAO,EAAPA,EAAU,UAAC,WAE7C,EARA,GAAa,EAAAohB,2BAcb,+BAQA,OAPI,YAAAnd,QAAA,SAAQjE,KAIR,sBAAI,yBAAU,C,IAAd,WACI,OAAO,M,gCAEf,EARA,GAAa,EAAAqhB,MAab,8BAEI,KAAAF,WAAqC,GAKzC,OAHI,YAAAld,QAAA,SAAQjE,G,QACJI,KAAK+gB,WAAqB,QAAX,EAACnhB,EAAQ,UAAE,QAAYA,GAAqB,QAAb,EAAGA,EAAQ,UAAE,UAEnE,EAPA,GAAa,EAAAwc,sBAYb,8BACI,KAAA2E,WAAuB,IAAIG,SAK/B,OAHI,YAAArd,QAAA,SAAQjE,GACJI,KAAK+gB,WAAWrP,OAAO9R,EAAQsZ,IAAKtZ,EAAQU,QAEpD,EANA,GAAa,EAAA6gB,oBAWb,8BACI,KAAAJ,WAAuB,IAAIG,SAQ/B,OANI,YAAArd,QAAA,SAAQjE,GACJ,IAAImR,EAAUnR,EAAQkR,oBAClBC,EAAQ9O,aACRjC,KAAK+gB,WAAWrP,OAAO9R,EAAQC,KAAKS,MAAOyQ,EAAQ9Q,IAAIL,EAAQC,MAAMS,QAGjF,EATA,GAAa,EAAA8gB,yBAcb,8BAEI,KAAAC,SAAoC,GAexC,OAbI,YAAAxd,QAAA,SAAQjE,GACJ,IAAImR,EAAUnR,EAAQkR,oBAClBC,EAAQ9O,aACRjC,KAAKqhB,SAAS5f,KAAK,CAAC7B,EAAQC,KAAKS,MAAOyQ,EAAQ9Q,IAAIL,EAAQC,MAAMS,SAI1E,sBAAI,yBAAU,C,IAAd,WACI,OAAO,EAAA6B,OAAOC,GAAE,MAAT,EAAAD,OAAM,EAAOnC,KAAKqhB,WACpB1d,KAAY,SAAA2X,GAAU,OAAAA,EAAOlW,KAAK,QAClC2B,QAAO,SAACua,EAAOC,GAAU,OAACD,EAAOC,GAAOnc,KAAK,QAC7ClF,OAAO,IAAII,O,gCAExB,EAjBA,GAAa,EAAAkhB,4B,mgBCrUb,aACA,SAyJA,aAOI,a,IAAY,sDAJZ,KAAArgB,SAAW,EAEH,KAAAD,KAAO,EAGXlB,KAAKM,MAAQA,EAyKrB,OAtKW,EAAA8B,GAAP,W,IAAa,sDACT,OAAO,IAAID,EAAM,WAANA,EAAM,WAAOgJ,MAGrB,EAAAgR,QAAP,SAAkBhR,GACd,OAAOnL,KAAKoC,GAAE,MAAPpC,KAAI,EAAOyV,OAAOI,KAAK1K,KAAOxH,KAAI,SAAAuV,GAAO,OAACA,EAAK/N,EAAK+N,QAGxD,EAAAuI,aAAP,SAAuBC,GAEnB,IADA,IAAIphB,EAAa,GACVohB,EAAW9O,WACdtS,EAAMmB,KAAKigB,EAAW3O,QAG1B,OAAO,IAAI5Q,EAAM,WAANA,EAAM,WAAI7B,MAGzB,YAAAoS,OAAA,SAAOC,GAEH,OADA3S,KAAKmB,QAAUwR,EACR3S,MAOX,YAAAsD,OAAA,W,IAAO,sDAIH,OAAOnB,EAAOC,GAAE,MAATD,EAAM,GAAiBnC,MAAS2hB,IAAUpT,SAAQ,SAAAnL,GAAQ,OAAAA,MAIrE,YAAAwe,OAAA,SAAO1G,GACH,IAAK,IAAI3a,EAAM,EAAGA,EAAMP,KAAKM,MAAMF,UAA4B,GAAjBJ,KAAKmB,SAAiBZ,EAAMP,KAAKmB,WAC1C,IAA7B+Z,EAAGlb,KAAKM,MAAMC,GAAMA,GAD6DA,KAKzF,OAAOP,MAGX,YAAA0J,KAAA,SAAKwR,GACDlb,KAAK4hB,OAAO1G,IAGhB,YAAAvX,IAAA,SAAOuX,GACEA,IACDA,EAAK,SAAClT,GAAe,OAAGA,IAE5B,IAAI1B,EAAW,GAKf,OAJAtG,KAAK0J,MAAK,SAACtG,EAAM7C,GACb+F,EAAI7E,KAAKyZ,EAAG9X,OAGT,IAAIjB,EAAM,WAANA,EAAM,WAAOmE,MAQ5B,YAAAiI,QAAA,SAA2B2M,GACvB,IAAIvO,EAAM,GAKV,OAJA3M,KAAK0J,MAAK,SAAAtG,GACN,IAAIye,EAAa3G,EAAG9X,GACpBuJ,EAAM6C,MAAMiN,QAAQoF,GAASlV,EAAIrJ,OAAOue,GAASlV,EAAIrJ,OAAM,MAAVqJ,EAAG,EAAWkV,EAAMvhB,WAErD6B,EAAOC,GAAE,MAATD,EAAM,EAAOwK,KAGrC,YAAAjJ,OAAA,SAAOwX,GACH,IAAI5U,EAAgB,GAMpB,OALAtG,KAAK0J,MAAK,SAACyB,GACH+P,EAAG/P,IACH7E,EAAI7E,KAAK0J,MAGV,IAAIhJ,EAAM,WAANA,EAAM,WAAOmE,MAG5B,YAAAS,OAAA,SAAUmU,EAAyB4G,QAAA,IAAAA,MAAA,MAI/B,IAHA,IAAIjN,EAAqB,MAAZiN,EAAmB,EAAI,EAChCC,EAA0B,MAAZD,EAAmBA,EAAW9hB,KAAKM,MAAMF,OAASJ,KAAKM,MAAM,GAAK,KAE3EC,EAAMsU,EAAQtU,EAAMP,KAAKM,MAAMF,UAA4B,GAAjBJ,KAAKmB,SAAiBZ,EAAMP,KAAKmB,SAAUZ,IAC1FwhB,EAAO7G,EAAG6G,EAAM/hB,KAAKM,MAAMC,IAE/B,OAAO,EAAAa,SAAST,aAAmCohB,IAGvD,YAAAha,MAAA,WACI,OAAO/H,KAAKM,OAASN,KAAKM,MAAMF,OAAS,EAAAgB,SAAST,aAAaX,KAAKM,MAAM,IAAM,EAAAc,SAASc,QAG7F,YAAA8f,KAAA,WAEI,IAAI5hB,EAASJ,KAAKmB,QAAU,EAAIqR,KAAKC,IAAIzS,KAAKmB,QAASnB,KAAKM,MAAMF,QAAUJ,KAAKM,MAAMF,OAEvF,OAAO,EAAAgB,SAAST,aAAaP,EAASJ,KAAKM,MAAMF,EAAS,GAAK,OAGnE,YAAA6hB,SAAA,SAAS/G,GACL,IAAK,IAAI3a,EAAM,EAAGA,EAAMP,KAAKM,MAAMF,UAA4B,GAAjBJ,KAAKmB,SAAiBZ,EAAMP,KAAKmB,SAAUZ,IACrF,GAAI2a,EAAGlb,KAAKM,MAAMC,IACd,OAAO,EAGf,OAAO,GAGX,YAAA8B,SAAA,SAAS6Y,GACL,IAAKlb,KAAKM,MAAMF,OACZ,OAAO,EAGX,IADA,IAAI4I,EAAU,EACLzI,EAAM,EAAGA,EAAMP,KAAKM,MAAMF,OAAQG,IACnC2a,EAAGlb,KAAKM,MAAMC,KACdyI,IAGR,OAAOA,GAAWhJ,KAAKM,MAAMF,QAGjC,YAAA8hB,UAAA,SAAUhH,GAEN,IADA,IAAIlS,EAAU,EACLzI,EAAM,EAAGA,EAAMP,KAAKM,MAAMF,OAAQG,IAClC2a,EAAGlb,KAAKM,MAAMC,KACfyI,IAGR,OAAOA,GAAWhJ,KAAKM,MAAMF,QAGjC,YAAAoO,KAAA,SAAK2T,GACD,IAAIC,EAASpiB,KAAKM,MAAMkN,QAAQgB,KAAK2T,GACrC,OAAOhgB,EAAOC,GAAE,MAATD,EAAM,EAAOigB,KAIxB,YAAAve,QAAA,SAAQwe,GAEJ,OADAriB,KAAK0J,MAAK,SAAAyB,GAAQ,OAAAkX,EAAUxe,QAAQsH,MAC7BkX,EAAUtB,YAIrB,YAAAnO,QAAA,WACI,IAAIC,GAAmC,GAAjB7S,KAAKmB,SAAiBnB,KAAKkB,KAAOlB,KAAKmB,QAAU,EACnE2R,EAAe9S,KAAKkB,KAAOlB,KAAKM,MAAMF,OAAS,EACnD,QAASyS,GAAmBC,IAGhC,YAAAC,KAAA,WACI,OAAK/S,KAAK4S,WAGV5S,KAAKkB,MACElB,KAAKM,MAAMN,KAAKkB,MAHZ,MAMf,YAAA8R,MAAA,WACIhT,KAAKkB,KAAO,GAGpB,EAjLA,GAAa,EAAAiB,SA+Mb,iBAwBI,WAAYkY,GArBZ,KAAAlZ,SAAW,EAOX,KAAAD,KAAO,EAeHlB,KAAK0hB,WAAarH,EAgL1B,OA7LW,EAAAjY,GAAP,W,IAAa,sDACT,OAAO,IAAIqB,EAAU,IAAQ,EAAA2c,sBAAqB,WAArB,EAAAA,sBAAqB,WAAIjgB,OAGnD,EAAAgc,QAAP,SAAkBhR,GACd,OAAOnL,KAAKoC,GAAE,MAAPpC,KAAI,EAAOyV,OAAOI,KAAK1K,KAAOxH,KAAI,SAAAuV,GAAO,OAACA,EAAK/N,EAAK+N,QAGxD,EAAAoJ,mBAAP,SAA6BhiB,GACzB,OAAO,IAAImD,EAAWnD,IAQ1B,YAAAsS,QAAA,WACI,OAAI5S,KAAKuiB,gBAIFviB,KAAK0hB,WAAW9O,WAG3B,YAAAG,KAAA,WACI,IAAIA,EAAO/S,KAAK0hB,WAAW3O,OAG3B,OADA/S,KAAKkB,MACE6R,GAGX,YAAAC,MAAA,WACIhT,KAAK0hB,WAAW1O,QAChBhT,KAAKkB,IAAM,EACXlB,KAAKmB,SAAW,GAOpB,YAAAmC,OAAA,W,IAAO,sDAGH,OAAOG,EAAWrB,GAAE,MAAbqB,EAAU,GAAiBzD,MAAS2hB,IAAUpT,SAAQ,SAAAnL,GAAQ,OAAAA,MAGzE,YAAAof,WAAA,SAAWtH,GACP,GAAIlb,KAAK4S,UAAW,CAChB,IAAImJ,EAAY/b,KAAK+S,OACrB,OAAKmI,EAAGa,GAGEA,EAFC/b,KAAKwiB,WAAWtH,GAI/B,OAAO,MAGX,YAAAxI,OAAA,SAAO+P,GAEH,OADAziB,KAAKmB,QAAUshB,EACRziB,MAIX,YAAA6D,QAAA,SAAQwe,GACJ,KAAOriB,KAAK4S,WAAW,CACnB,IAAI8P,EAAI1iB,KAAK+S,OACbsP,EAAUxe,QAAW6e,GAEzB,OAAOL,EAAUtB,YAGrB,YAAAa,OAAA,SAAO1G,GAAP,WACI,OAAO,IAAIzX,EAAW,IAAI,EAAAid,wBAAuB,SAACpe,GAI9C,OAHyB,IAArB4Y,EAAG5Y,EAAI,EAAKpB,MACZ,EAAKyhB,OAEFrgB,IACRtC,QAGP,YAAA0D,OAAA,SAAOwX,GACH,OAAsB,IAAIzX,EAAc,IAAI,EAAA+c,yBAA8BtF,EAAIlb,QAGlF,YAAA2D,IAAA,SAAOuX,GACH,OAAO,IAAIzX,EAAW,IAAI,EAAAid,uBAAuBxF,EAAIlb,QAGzD,YAAAuO,QAAA,SAAsB2M,GAElB,OAAO,IAAIzX,EAAgB,IAAI,EAAAqd,wBAA6B5F,EAAIlb,QAIpE,YAAA0J,KAAA,SAAKwR,GACD,KAAOlb,KAAK4S,YACgB,IAApBsI,EAAGlb,KAAK+S,SACR/S,KAAK2iB,QAKjB,YAAA5b,OAAA,SAAUmU,EAAqB4G,GAC3B,QAD2B,IAAAA,MAAA,OACtB9hB,KAAK4S,UACN,OAAO,EAAAxR,SAASc,OAEpB,IAAI0gB,EAAS,KACTC,EAAS,KACb,GAAgB,MAAZf,EACAc,EAASd,EACTe,EAAS7iB,KAAK+S,WACX,CAEH,GADA6P,EAAS5iB,KAAK+S,QACT/S,KAAK4S,UACN,OAAO,EAAAxR,SAAST,aAAaiiB,GAEjCC,EAAS7iB,KAAK+S,OAGlB,IADA6P,EAAS1H,EAAG0H,EAAQC,GACb7iB,KAAK4S,WAERgQ,EAAS1H,EAAG0H,EADZC,EAAS7iB,KAAK+S,QAIlB,OAAO,EAAA3R,SAAST,aAAaiiB,IAGjC,YAAAZ,KAAA,WACI,OAAKhiB,KAAK4S,UAGH5S,KAAK+G,QAAO,SAAC+b,EAAKC,GAAQ,OAAAA,KAFtB,EAAA3hB,SAASc,QAKxB,YAAA6F,MAAA,WAEI,OADA/H,KAAKgT,QACAhT,KAAK4S,UAGH,EAAAxR,SAAST,aAAaX,KAAK+S,QAFvB,EAAA3R,SAASc,QAKxB,YAAA+f,SAAA,SAAS/G,GACL,KAAOlb,KAAK4S,WACR,GAAIsI,EAAGlb,KAAK+S,QACR,OAAO,EAGf,OAAO,GAGX,YAAA1Q,SAAA,SAAS6Y,GACL,KAAOlb,KAAK4S,WACR,IAAKsI,EAAGlb,KAAK+S,QACT,OAAO,EAGf,OAAO,GAGX,YAAAmP,UAAA,SAAUhH,GACN,KAAOlb,KAAK4S,WACR,GAAIsI,EAAGlb,KAAK+S,QACR,OAAO,EAGf,OAAO,GAGX,YAAAvE,KAAA,SAAK2T,GACD,IAAI3E,EAAMxd,KAAK6D,QAAQ,IAAI,EAAAC,gBAE3B,OADA0Z,EAAMA,EAAIhP,KAAK2T,GACR1e,EAAWrB,GAAE,MAAbqB,EAAU,EAAO+Z,KAG5B,sBAAI,oBAAK,C,IAAT,WACI,OAAOxd,KAAK6D,QAAQ,IAAI,EAAAC,iB,gCAGpB,YAAA6e,KAAR,WACI3iB,KAAKkB,IAAMlB,KAAKmB,QAAU,KAGtB,YAAAohB,aAAR,WACI,OAAwB,GAAjBviB,KAAKmB,SAAiBnB,KAAKkB,KAAOlB,KAAKmB,QAAU,GAGhE,EAzMA,GAAa,EAAAsC,c,+bC3Wb,aAEI,oBAAsBwF,QACtB,WACI,QAAI,IAAWA,OAAO+Z,cAAW,IAAW/Z,OAAOga,iBAAwBha,OAAOga,eAAgBC,0BAAlG,CACA,IAAMC,EAAIC,YACJna,OAAQma,YAAc,CACxBA,YAAa,WACT,OAAOJ,QAAQK,UAAUF,EAAG,GAAInjB,KAAKsjB,eAE3CF,YAAaA,YAAY3T,UAAY0T,EAAE1T,UAAW2T,YAAY3T,UAAU6T,YAAcF,YAAa3N,OAAO8N,eAAeH,YAAaD,IAP5I,GAqBJ,iBAkBI,WAAYrhB,GAdZ,KAAA0hB,YAAwCJ,YAMxC,KAAAK,cAA0B,GAStBzjB,KAAK8B,QAAUA,EA6IvB,OAnJW,EAAA4hB,YAAP,SAAmB5hB,GACf,OAAO,IAAI6hB,EAAW7hB,IAS1B,YAAA8hB,uBAAA,W,IAAuB,sDACnB5jB,KAAKyjB,cAAgBI,GAIzB,YAAAC,sBAAA,SAAsBC,GAElB,OADA/jB,KAAKgkB,kBAAoBD,EAClB/jB,MAIX,YAAAikB,yBAAA,SAAyBF,GAErB,OADA/jB,KAAKkkB,qBAAuBH,EACrB/jB,MAIX,YAAAmkB,oBAAA,SAAoBJ,GAEhB,OADA/jB,KAAKokB,gBAAkBL,EAChB/jB,MAIX,YAAAqkB,6BAAA,SAA6BN,GAEzB,OADA/jB,KAAKskB,yBAA2BP,EACzB/jB,MAIX,YAAAukB,gBAAA,SAAgBf,GAEZ,OADAxjB,KAAKwjB,YAAcA,EACZxjB,MAIX,YAAAwkB,YAAA,SAAYC,GAER,OADAzkB,KAAKykB,WAAaA,EACXzkB,MAIX,YAAA0kB,UAAA,SAAUvd,GACN,GAAInH,KAAK0E,OACL,MAAM0G,MAAM,2DAGhB,OADApL,KAAKmH,MAAQA,EACNnH,MAIX,YAAA2kB,WAAA,SAAWjgB,GACP,GAAI1E,KAAKmH,MACL,MAAMiE,MAAM,0DAGhB,OADApL,KAAK0E,OAASA,EACP1E,MAIX,YAAAgZ,SAAA,sBACI,IAAKhZ,KAAKmH,QAAUnH,KAAK0E,OACrB,MAAM0G,MAAM,mCAEhB,GAAIpL,KAAKmH,MAAO,CAEZ,IAAIyd,EAAgB,SAAC/kB,GACjB,IAAIglB,EAAgB,EAAKhlB,GACrBilB,EAAsB,EAAK3d,MAAMsI,UAAW5P,GAC5CklB,EAAgBF,GAAiBC,EACjCC,IACM,EAAK5d,MAAMsI,UAAW5P,GAAQ,WAC7BglB,EACCE,EAAc/H,MAAM,EAAAzb,SAASqC,KAAK5D,OAElC8kB,EAAc9H,MAAWhd,SAMzC4kB,EAAc,qBACdA,EAAc,wBACdA,EAAc,mBACdA,EAAc,4BAGV5kB,KAAKyjB,cAAcrjB,QACnBqV,OAAOuP,eAAehlB,KAAKmH,MAAMsI,UAAW,qBAAsB,CAC9DxP,IAAA,WACI,OAAOD,KAAKyjB,iBAKxBxa,OAAOga,eAAegC,OAAOjlB,KAAK8B,QAAS9B,KAAKmH,MAAOnH,KAAKykB,YAAc,UACvE,CACH,IAAI,EAAMzkB,KACN,EAAgB,SAACH,EAAcqlB,GAC3B,EAAIrlB,IACJ,EAAIA,GAAMmd,MAAM,EAAAzb,SAASqC,KAAUshB,KAI3Cjc,OAAOga,eAAegC,OAAOjlB,KAAK8B,QAAO,YACrC,mBACI,cAAO,K,OACP,EAAKkD,UAAY,EAAIN,O,EA4B7B,OA/ByD,OAOrD,sBAAW,uBAAkB,C,IAA7B,WACI,OAAO,EAAI+e,e,gCAIf,YAAAO,kBAAA,WACI,EAAc,oBAAqBhkB,OAIvC,YAAAkkB,qBAAA,WACI,EAAc,uBAAwBlkB,OAI1C,YAAAokB,gBAAA,WACI,EAAc,kBAAmBpkB,OAIrC,YAAAskB,yBAAA,WACI,EAAc,2BAA4BtkB,OAGlD,EA/ByC,CAAgBA,KAAKwjB,aA+B3DxjB,KAAKykB,YAAc,QAGlC,EAhKA,GAAa,EAAAd,c,kcCzBb,aACA,SACOjkB,EAAW,EAAAF,KAAKE,SAOvB,cAEI,WAAYuB,EAAwCkkB,GAApD,IAeoBC,E,YAfgC,IAAAD,MAAA,YA0B5CzlB,EAASuB,GACT,YAXW,OADCmkB,EAYWnkB,GAVZ,KAEgB,EAAAzB,KAAKiV,iBAC5B,WAAM,WAAIxL,OAAOoc,aACjB,WAAiB,OAhBjBC,EAAS,IAAIC,cAAc,qBACxBC,OAAQ,EAEH,CACRC,gBAAiB,SAACtX,EAAcuX,GAC5B,OAAOJ,EAAOK,QAAQxX,KARL,IAGrBmX,KAiBFhlB,MACemlB,gBAAgBL,EAAWD,KAIX,KAEjC,YAAMlkB,IAAS,KAkC3B,OAjE8B,OAmC1B,YAAA2kB,iBAAA,WACI,OAAO5lB,KAAKwB,iBAAiB,eAAeS,aAGhD,YAAA4jB,SAAA,WACI,IAAIlZ,EAAM,GAOV,OANA3M,KAAKyC,UAAS,SAACyD,G,YACP4f,EAAgF,QAAlE,EAAwC,QAA5C,EAA+B,QAA/B,EAAgB,QAAhB,EAAS7c,cAAO,eAAE8c,qBAAa,eAAEzC,qBAAW,eAAI0C,kBAAkB9f,UAAI,QAAKA,aAAI,EAAJA,EAAMkf,IACzFU,GACFnZ,EAAIlL,KAAKqkB,MAGVnZ,EAAIvH,KAAK,KAGpB,YAAA6gB,gBAAA,SAAgBtV,GACZ,OAAO3Q,KAAKwB,iBAAiB,eAAekP,YAAYC,IAGrD,EAAAuV,SAAP,SAAgBC,GACZ,OAAO,IAAIC,EAASD,IAGjB,EAAAE,UAAP,SAAiBF,GACb,OAAO,IAAIC,EAASD,EAAK,cAGtB,EAAAG,WAAP,SAAkBH,EAAaI,GAC3B,YAD2B,IAAAA,MAAA,YACpB,IAAIH,EAASD,EAAKI,IAEjC,EAjEA,CAA8B,EAAAhlB,UAAjB,EAAA6kB,WAmEA,EAAAI,GAAKJ,G,0jBC5FlB,aAAQ,0EAAA7kB,YAAU,kFAAAb,oBAAkB,mFAAAoT,qBAAmB,oEAAAC,MACvD,aAAQ,sEAAAvU,QACR,aAAQ,wEAAAwR,UAAQ,uEAAAmK,SAAkD,0EAAA/Z,YAAU,+EAAAP,iBAC5E,aAAQ,oFAAAid,sBAAoB,yEAAAnG,WAAmB,+EAAAiG,iBAC/C,aAAQ,0EAAAwI,YAAU,oEAAAI,MAClB,aAAQ,wEAAArkB,UAAQ,4EAAAsB,cAChB,aACI,uFAAA2c,yBACA,wFAAAM,0BACA,0FAAAF,4BACA,yFAAAM,2BACA,oFAAAZ,sBACA,0FAAAsB,4BAGA,gFAAA1d,kBACA,qFAAAsY,uBACA,mFAAA+E,qBACA,wFAAAC,0BAIJ,aAAQ,4EAAAuC,cAER,aAAQ,yEAAA1N,WAAS,wEAAA0D,UAAQ,wFAAAN,0BAAwB,2EAAArD,eCvB7CyQ,EAA2B,GCE/B,ODCA,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUC,QAG3C,IAAIC,EAASJ,EAAyBE,GAAY,CAGjDC,QAAS,IAOV,OAHAE,EAAoBH,GAAU5gB,KAAK8gB,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAGpEG,EAAOD,QCjBRF,CAAoB,K","file":"index.js","sourcesContent":["/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {ArrayCollector, ICollector, IStreamDataSource} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\nimport objToArray = Lang.objToArray;\nimport isString = Lang.isString;\nimport equalsIgnoreCase = Lang.equalsIgnoreCase;\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum Submittables {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute,T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any> new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @param src\n * @constructor\n */\nconst DEFAULT_JSF_WHITELIST = (src: string) => {\n    return (src.indexOf(\"ln=scripts\") == -1 &&\n        src.indexOf(\"ln=javax.faces\") == -1) ||\n        (src.indexOf(\"/jsf.js\") == -1 &&\n            src.indexOf(\"/jsf-uncompressed.js\") == -1);\n};\n\ninterface IDomQuery {\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The the value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n    /**\n     * the underlying form elements as domquery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded (highest level)\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchevent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery): void;\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the domquery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n    /**\n     * all parents with TagName\n     * @param tagName\n     */\n    parents(tagName: string): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another domquery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinstr?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinstr?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the subnodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery> {\n\n    static absent = new DomQuery();\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        //a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow doms\n     * separately and runs the query on earch shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if(queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if(shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if(shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        //filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => item != null)\n            .map(item => DomQuery.byId(item)).collect(new ArrayCollector()));\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.indexOf('<!doctype') != -1 ||\n            lowerMarkup.indexOf('<html') != -1 ||\n            lowerMarkup.indexOf('<head') != -1 || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\n            lowerMarkup.indexOf('<body') != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            //table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given elmement\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ?  (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        //We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n\n    /*deep with a selector and a peudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let nodes = [];\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if(subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any> LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        let isCandidate = (item: DomQuery): boolean => {\n            if(item.length == 0) {\n                return false;\n            }\n            if(item.length == 1) {\n                if ((<string>item.tagName.get(\"booga\").value).toLowerCase() == \"input\" &&\n                    (<string>item.attr(\"type\")?.value || \"\").toLowerCase() == \"file\") {\n                    return true;\n                }\n                if (deep) {\n                    return this.querySelectorAllDeep(\"input[type='file']\").firstElem().isPresent();\n                } else {\n                    return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\n                }\n            }\n            return item.isMultipartCandidate(deep);\n        };\n        let ret = this.stream.filter(item => isCandidate(item)).first().isPresent();\n\n        return ret;\n    }\n\n\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHtml) : Optional.absent;\n        }\n        this.innerHtml = inval;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    set innerHtml(inVal: string) {\n        this.eachElem(elem => elem.innerHTML = inVal);\n    }\n\n    get innerHtml(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || (<any>window).ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    matchesSelector(selector: string): boolean {\n        this.eachElem(item => {\n            if (!this._mozMatchesSelector(item, selector)) {\n                return false;\n            }\n        });\n        return true;\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                //we could use a filter, but for the best performance we dont\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery) {\n        this.eachElem((item) => {\n            let value1: Element = <Element>elem.getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: (theItem: any) => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string = \"utf-8\") {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.send(null);\n\n        xhr.onload = (responseData: any) => {\n            //defer also means we have to process after the ajax response\n            //has been processed\n            //we can achieve that with a small timeout, the timeout\n            //triggers after the processing is done!\n            if (!defer) {\n                this.globalEval(xhr.responseText.replace(\"\\n\", \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n            } else {\n                //TODO not ideal we maybe ought to move to something else here\n                //but since it is not in use yet, it is ok\n                setTimeout(() => {\n                    this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                }, defer);\n            }\n        };\n\n        xhr.onerror = (data: any) => {\n            throw Error(data);\n        };\n        //since we are synchronous we do it after not with onReadyStateChange\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        const retSet: Set<Element> = new Set();\n        const retArr: Array<Element> = [];\n        const lowerTagName = tagName.toLowerCase();\n\n        let resolveItem = (item: Element) => {\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName && !retSet.has(item)) {\n                retSet.add(item);\n                retArr.push(item);\n            }\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode || (<any> item).host) {\n                item = <Element>item?.parentNode ?? (<any>item)?.host;\n\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        //no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean = DEFAULT_JSF_WHITELIST): DomQuery {\n        let finalScripts = [],\n            equi = equalsIgnoreCase,\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && equi(tagName, \"script\") &&\n                    (itemType === \"\" || equi(itemType, \"text/javascript\") ||\n                        equi(itemType, \"javascript\") ||\n                        equi(itemType, \"text/ecmascript\") ||\n                        equi(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            if (finalScripts.length) {\n                                //script source means we have to eval the existing\n                                //scripts before running the include\n                                this.globalEval(finalScripts.join(\"\\n\"));\n\n                                finalScripts = [];\n                            }\n                            this.loadScriptEval(src, 0, \"UTF-8\");\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        //TODO this probably needs to be changed due to our new parsing structures\n                        //probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push(evalText);\n\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            //script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) //preceding 2, following == 4)\n                .each(item => execScrpt(item));\n\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        } catch (e) {\n            if (window.console && window.console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ?? (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") ?? \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") ?? \"text/css\");\n\n                if (styleSheet?.cssText ?? false) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n            },\n\n            execCss = (item: Element) => {\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: Array<Node> = Array.prototype.slice.call(item.childNodes);\n                    if (childNodes) {\n                        childNodes.forEach(child => innerText.push((<Element>child).innerHTML || (<CharacterData>child).data));\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinstr), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {//no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != Submittables.SELECT &&\n                        elemType != Submittables.BUTTON &&\n                        elemType != Submittables.RESET &&\n                        elemType != Submittables.SUBMIT &&\n                        elemType != Submittables.IMAGE\n                    ) && (\n                        (\n                            elemType != Submittables.CHECKBOX && elemType != Submittables.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let files: any = (<any>element.value).value?.files ?? [];\n                    if (files?.length) {\n                        //xhr level2\n                        target.append(name).value = files[0];\n                    } else {\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let cDataBlock = [];\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    //TODO this part probably will be removed\n    //because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //from\n    // http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                //the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                //the caretposition is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            //now this is ugly, but not supported input types throw errors for selectionStart\n            //just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        //the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n\n}\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/**\n * Message direction\n */\nimport Base = Mocha.reporters.Base;\n\nexport enum Direction {\n    UP, DOWN, ALL\n}\n\n/**\n * a standardized message to be sent over the message bus\n */\nexport class Message {\n\n    creationDate?: number;\n    identifier?: string;\n    targetOrigin?: string;\n\n    constructor(public message: any = {}, targetOrigin = \"*\") {\n        this.targetOrigin = targetOrigin;\n        this.creationDate = new Date().getMilliseconds();\n        this.identifier = new Date().getMilliseconds() + \"_\" + Math.random() + \"_\" + Math.random();\n    }\n}\n\n/**\n * custom dom event wrapping our messages\n */\nclass MessageWrapper implements CustomEventInit<Message> {\n\n    detail?: Message;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n    channel: string;\n\n\n    constructor(channel: string, message: Message) {\n        this.detail = message;\n        this.bubbles = true;\n        this.cancelable = true;\n        this.composed = true;\n        this.channel = channel;\n    }\n}\n\n/**\n * defines the dispatchdirection for the transport\n */\nenum DispatchDirection {\n    UP, DOWN, BOUNDARY_UP, BOUNDARY_DOWN\n}\n\n/**\n * Transport layer/driver\n */\ninterface ITransport {\n    /**\n     * dispatch message di\n     */\n    dispatch(channel: string, message: Message);\n\n    /**\n     * register the transport into the system\n     */\n    register(scope: any, name: string);\n\n    /**\n     * unregisters the transport into the system\n     */\n    unregister();\n\n}\n\n\n\n\nabstract class BaseBroker {\n\n    static readonly EVENT_TYPE = \"brokerEvent\";\n    /**\n     * we can split the listeners with the system\n     * namespace... and type (aka identifier criteria)\n     */\n    protected messageListeners: any = {};\n    protected processedMessages: any = {};\n    protected cleanupCnt = 0;\n    protected rootElem;\n    protected msgHandler;\n\n    protected readonly TIMEOUT_IN_MS = 1000;\n    protected readonly MSG_EVENT = \"message\";\n\n\n    abstract register(scopeElement?: any);\n    abstract unregister();\n    abstract broadcast(channel: string, message: Message);\n\n\n    /**\n     * registers a listener on a channel\n     * @param channel the channel to register the listeners for\n     * @param listener the listener to register\n     */\n    registerListener(channel: string, listener: (msg: Message) => void) {\n        this.reserveListenerNS(channel);\n\n        //we skip the processed messages, because they originated here\n        //and already are processed\n        this.messageListeners[channel].push((msg: Message) => {\n            if (msg.identifier in this.processedMessages) {\n                return;\n            }\n            listener(msg);\n        });\n    }\n\n    /**\n     * reserves the listener namespace and wildcard namespace for the given identifier\n     * @param identifier\n     * @private\n     */\n    private reserveListenerNS(identifier: string) {\n        if (!this.messageListeners[identifier]) {\n            this.messageListeners[identifier] = [];\n        }\n        if (!this.messageListeners[\"*\"]) {\n            this.messageListeners[\"*\"] = [];\n        }\n    }\n\n    /**\n     * unregisters a listener from this channel\n     *\n     * @param channel the channel to unregister from\n     * @param listener the listener to unregister the channel from\n     */\n    unregisterListener(channel: string, listener: (msg: Message) => void) {\n        this.messageListeners[channel] = (this.messageListeners[channel] || []).filter((item: any) => item !== listener);\n    }\n\n    /**\n     * answers a bidirectional message received\n     * usage, the client can use this method, to answer an incoming message in a precise manner\n     * so that the caller sending the bidirectional message knows how to deal with it\n     * this mechanism can be used for global storages where we have one answering entity per channel delivering the\n     * requested data, the request can be done asynchronously via promises waiting for answers\n     *\n     * @param channel the channel the originating message\n     * @param request the requesting message\n     * @param answer the answer to the request\n     * @param direction the call direction\n     * @param callBrokerListeners same level?\n     */\n    answer(channel: string, request: Message, answer: Message) {\n        if (request.identifier.indexOf(\"_r_\") == 0) {\n            return;\n        }\n        answer.identifier = \"_r_\" + request.identifier;\n        this.broadcast(channel, answer);\n    }\n\n    /**\n     * idea... a bidirectional broadcast\n     * sends a message and waits for the first answer coming in from one of the recivers\n     * sending the message back with a messageIdentifier_broadCastId answer\n     *\n     * @param channel\n     * @param message\n     * @param direction\n     * @param callBrokerListeners\n     */\n    request(channel: string, message: Message): Promise<Message> {\n\n        let messageId = message.identifier;\n        let ret = new Promise<Message>((resolve, reject) => {\n            let timeout = null;\n            let listener = (message2: Message) => {\n                if (message2.identifier == \"_r_\" + messageId) {\n                    clearTimeout(timeout);\n                    this.unregisterListener(channel, listener);\n                    resolve(message2);\n                }\n            }\n            timeout = setTimeout(() => {\n                this.unregisterListener(channel, listener);\n                reject(\"no return value\")\n            }, 3000);\n            this.registerListener(channel, listener);\n\n        });\n        setTimeout(() => this.broadcast(channel, message), 0);\n        return ret;\n    }\n}\n\n/**\n * a broker which hooks into the Broadcast Channel broker\n * either via shim or substitute lib\n */\nexport class BroadcastChannelBroker extends BaseBroker {\n    private openChannels: [{key: string}, BroadcastChannel] = <any> {};\n    private msgListener: Function;\n\n    /**\n     * @param channelGroup unique group identifier shared by all channels\n     */\n    constructor(private brokerFactory: Function = (name) => {\n        if(window?.BroadcastChannel) {\n           return new window.BroadcastChannel(name);\n        }\n        throw Error(\"No Broadcast channel in the system, use a shim or provide a factory functiono\" +\n            \"in the constructor\");\n    }, private channelGroup = \"brokr\") {\n        super();\n        //this is the channel\n\n        this.msgListener =  (messageData: MessageWrapper) => {\n            let event = messageData.detail;\n\n            let channel: string = messageData.channel;\n\n            if(this.messageListeners?.[channel]) {\n                this.messageListeners?.[channel].forEach(listener => {\n                    listener(event);\n                })\n            }\n        }\n    }\n\n    broadcast(channel: string, message: Message, includeOrigin = true) {\n        let internalChannelName = this.getInternalChannelName(channel);\n        this.connectToChannel(internalChannelName);\n        let messageWrapper = new MessageWrapper(channel, message);\n        this.openChannels[internalChannelName].postMessage(messageWrapper);\n        if(includeOrigin) {\n            this.msgListener(messageWrapper);\n        }\n    }\n\n\n    private connectToChannel(internalChannelName: string) {\n        if (!this.openChannels?.[internalChannelName]) {\n            this.openChannels[internalChannelName] =  this.brokerFactory(this.channelGroup);\n            this.openChannels[internalChannelName].addEventListener(\"message\", this.msgListener);\n        }\n    }\n\n    registerListener(channel: string, listener: (msg: Message) => void) {\n        let internalChannelName = this.getInternalChannelName(channel);\n        this.connectToChannel(internalChannelName);\n        super.registerListener(channel, listener);\n    }\n\n    register() {\n        let internalChannelName = this.getInternalChannelName(\"*\");\n        this.openChannels[internalChannelName] = this.brokerFactory(this.channelGroup);\n        this.openChannels[internalChannelName].addEventListener(\"message\", this.msgListener);\n    }\n\n    private getInternalChannelName(name: string) {\n        return this.channelGroup + name;\n    }\n\n    unregister() {\n        Object.keys(this.openChannels).forEach((key) => this.openChannels[key].close());\n        this.openChannels = <any> {};\n    }\n\n\n}\n\n\n/**\n * implementation of a messaging based transport\n */\n\n/**\n * central message broker which uses various dom constructs\n * to broadcast messages into subelements\n *\n * we use the dom event system as transport and encapsule iframe and shadow dom mechanisms in a transparent way to\n * pull this off\n *\n * usage\n *\n * broker = new Broker(optional rootElement)\n *\n * defines a message broker within a scope of rootElment (without it is window aka the current isolation level)\n *\n * broker.registerListener(channel, listener) registers a new listener to the current broker and channel\n * broker.unregisterListener(channel, listener) unregisters the given listener\n *\n * broker.broadcast(message, optional direction, optional callBrokerListeners)\n * sends a message (channel included in the message object) in a direction (up, down, both)\n * and also optionally calls the listeners on the same broker (default off)\n *\n * the flow is like\n * up messages are propagated upwards only until it reaches the outer top of the dom\n * downards, the messages are propagaed downwards only\n * both the message is propagated into both directions\n *\n * Usually messages sent from the same broker are not processed within... however by setting\n * callBrokerListeners to true the listeners on the same broker also are called\n * brokers on the same level will get the message and process it automatically no matter what.\n * That way you can exclude the source from message processing (and it is done that way automatically)\n *\n * Isolation levels. Usually every isolation level needs its own broker object registering\n * on the outer bounds\n *\n * aka documents will register on window\n * iframes on the iframe windowObject\n * isolated shadow doms... document\n *\n *\n *\n */\nexport class Broker extends BaseBroker{\n\n    /**\n     * constructor has an optional root element\n     * and an internal name\n     *\n     * @param scopeElement\n     * @param name\n     */\n    constructor(scopeElement: HTMLElement | Window | ShadowRoot = window, public name = \"brokr\") {\n\n        super();\n\n        /**\n         * message relay.. identifies message events and relays them to the listeners\n         * @param event\n         */\n        let evtHandler = (event: MessageEvent | CustomEvent<Message>) => {\n            let details = (<any>event)?.detail ?? (<MessageEvent>event)?.data?.detail;\n            let channel = ((<any>event)?.data?.channel) ?? ((<any>event)?.channel);\n\n            //javascript loses the type info in certain module types\n            if (details?.identifier && details?.message) {\n                let msg: Message = details;\n                if (msg.identifier in this.processedMessages) {\n                    return;\n                }\n                //coming in from up... we need to send it down\n                //a relayed message always has to trigger the listeners as well\n                this.broadcast(channel, msg);\n            }\n        };\n        this.msgHandler = (evt: MessageEvent) => evtHandler(evt);\n        this.register(scopeElement);\n    }\n\n    /**\n     * register the current broker into a scope defined by wnd\n     * @param scopeElement\n     */\n    register(scopeElement: HTMLElement | Window | ShadowRoot) {\n        this.rootElem = (<any>scopeElement).host ? (<any>scopeElement).host : scopeElement;\n        if ((<any>scopeElement).host) {\n            let host = (<ShadowRoot>scopeElement).host;\n            host.setAttribute(\"data-broker\", \"1\");\n        } else {\n            if (scopeElement?.[\"setAttribute\"])\n                (<any>scopeElement).setAttribute(\"data-broker\", \"1\");\n        }\n\n        this.rootElem.addEventListener(Broker.EVENT_TYPE, this.msgHandler, {capture: true});\n        /*dom message usable by iframes*/\n        this.rootElem.addEventListener(this.MSG_EVENT, this.msgHandler, {capture: true});\n    }\n\n    /**\n     * manual unregister function, to unregister as broker from the current\n     * scopnpe\n     */\n    unregister() {\n        this.rootElem.removeEventListener(Broker.EVENT_TYPE, this.msgHandler)\n        this.rootElem.removeEventListener(this.MSG_EVENT, this.msgHandler)\n    }\n\n\n\n\n\n    /**\n     * broadcast a message\n     * the message contains the channel and the data and some internal bookeeping data\n     *\n     * @param channel the channel to broadcast to\n     * @param message the message dot send\n     * @param direction the direction (up, down, both)\n     * @param callSameLevel if set to true.. the brokers on the same level are also notified\n     * (for instance 2 iframes within the same parent broker)\n     *\n     */\n    broadcast(channel: string, message: Message) {\n        try {\n            this.dispatchUp(channel, message, false, true);\n            //listeners already called\n            this.dispatchDown(channel, message, true, false)\n        } finally {\n            this.gcProcessedMessages();\n        }\n    }\n\n\n\n\n\n\n    /**\n     * garbage collects the processed messages queue\n     * usually after one second\n     */\n    private gcProcessedMessages() {\n        if ((++this.cleanupCnt) % 10 != 0) {\n            return;\n        }\n        let newProcessedMessages: any = {};\n        for (let key in this.processedMessages) {\n            if (this.messageStillActive(key)) continue;\n            newProcessedMessages[key] = this.processedMessages[key];\n        }\n        this.processedMessages = newProcessedMessages;\n    }\n\n    private dispatchUp(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        if (window.parent != null) {\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            window.parent.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        }\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n    private dispatchSameLevel(channel: string, message: Message) {\n        let event = this.transformToEvent(channel, message, true);\n        //we also dispatch sideways\n        window.dispatchEvent(event);\n    }\n\n    //a dispatch of our own should never trigger the listeners hence the default true\n    private dispatchDown(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        let evt = this.transformToEvent(channel, message);\n\n        /*we now notify all iframes lying underneath */\n        Array.prototype.slice.call(document.querySelectorAll(\"iframe\")).forEach((element: HTMLIFrameElement) => {\n            let messageWrapper = new MessageWrapper(channel, message);\n            element.contentWindow.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        });\n\n        Array.prototype.slice.call(document.querySelectorAll(\"[data-broker='1']\")).forEach((element: HTMLElement) => element.dispatchEvent(evt))\n\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n\n    private msgCallListeners(channel: string, message: Message) {\n        let listeners = this.messageListeners[channel];\n        if (listeners?.length) {\n            let callElement = (element: (msg: Message) => void) => {\n                element(message);\n            }\n\n            listeners.forEach(callElement);\n        }\n    }\n\n    private transformToEvent(channel: string, message: Message, bubbles = false): CustomEvent {\n        let messageWrapper = new MessageWrapper(channel, message);\n        messageWrapper.bubbles = bubbles;\n        return this.createCustomEvent(Broker.EVENT_TYPE, messageWrapper);\n    }\n\n    private createCustomEvent(name: string, wrapper: MessageWrapper): any {\n        if ('function' != typeof window.CustomEvent) {\n            let e: any = document.createEvent('HTMLEvents');\n            e.detail = wrapper.detail;\n            e.channel = wrapper.channel;\n            e.initEvent(name, wrapper.bubbles, wrapper.cancelable);\n            return e;\n\n        } else {\n            let customEvent = new window.CustomEvent(name, wrapper);\n            (<any>customEvent).channel = wrapper.channel;\n            return customEvent;\n        }\n\n    }\n\n    private messageStillActive(key: string): boolean {\n        return this.processedMessages[key] > ((new Date()).getMilliseconds() - this.TIMEOUT_IN_MS);\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    get shallowCopy(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    get deepCopy(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param keys\n     */\n    append(...keys): IValueHolder<any> {\n        let noKeys = keys.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = keys[keys.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...keys).isPresent();\n        this.buildPath(keys);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...keys).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...keys).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    appendIf(condition: boolean, ...keys): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...keys);\n    }\n\n    assign(...keys): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    assignIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...keys) : {value: null};\n    }\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param keys a sequential array of keys containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","import {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/*\n * Promise wrappers for timeout and interval\n */\nexport function timeout(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setTimeout(() => apply(), timeout);\n    }, () => {\n        if (handler) {\n            clearTimeout(handler);\n            handler = null;\n        }\n    });\n}\n\nexport function interval(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setInterval(() => {\n            apply();\n        }, timeout);\n    }, () => {\n        if (handler) {\n            clearInterval(handler);\n            handler = null;\n        }\n    });\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //let func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n            if (fn.catch) {\n                let funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            let fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IStream, LazyStream, Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\nimport {Optional} from \"./Monad\";\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present\n     */\n    hasNext(): boolean;\n\n    /**\n     * false if not\n     */\n    next(): T;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < this.total;\n    }\n\n    next(): number {\n        return Math.min(this.value++, this.total - 1);\n    }\n\n    reset(): void {\n        this.value = 0;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n}\n\n/**\n * an intermediate data source wich prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    filteredNext: T = null;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this.filteredNext = next;\n                return true;\n            } else {\n                this.filteredNext = null;\n            }\n        }\n        return this.filteredNext != null;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let ret = this.filteredNext;\n        this.filteredNext = null;\n        //We have to call hasNext, to roll another\n        //prefetch in case someone runs next\n        //sequentially without calling hasNext\n        this.hasNext();\n        return ret;\n    }\n\n    reset(): void {\n        this.filteredNext = null;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveCurrentNext() || this.resolveNextNext();\n    }\n\n    private resolveCurrentNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next());\n            if (Array.isArray(mapped)) {\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\n            } else {\n                this.activeDataSource = mapped;\n            }\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        return this.activeDataSource.next();\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, {[key: string]: S} > {\n    finalValue: {[key:string]: any} = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string> element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T,V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n    \n    \n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: {[key: string]: T}): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>> this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: {[key: string]: T}): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = 0;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>> this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//poliyfill from @webcomponents/webcomponentsjs\nimport {DomQuery} from \"./DomQuery\";\n\nif (\"undefined\" != typeof window) {\n    (function () {\n        if (void 0 === window.Reflect || void 0 === window.customElements || (<any>window.customElements).polyfillWrapFlushCallback) return;\n        const a = HTMLElement;\n        (<any>window).HTMLElement = {\n            HTMLElement: function HTMLElement() {\n                return Reflect.construct(a, [], this.constructor)\n            }\n        }.HTMLElement, HTMLElement.prototype = a.prototype, HTMLElement.prototype.constructor = HTMLElement, Object.setPrototypeOf(HTMLElement, a);\n    })();\n}\n\n/**\n * beginning custom tag support\n *\n * This api is still experimental\n * and might be interwoven with DomQuery\n * so it is bound to change\n *\n * it follows a builder pattern to allow easier creations\n * with less code of custom tags\n */\nexport class TagBuilder {\n    tagName: string;\n    connectedCallback?: Function;\n    clazz?: CustomElementConstructor;\n    extendsType: CustomElementConstructor = HTMLElement;\n    theOptions: ElementDefinitionOptions | null;\n    markup: string;\n    disconnectedCallback?: Function;\n    adoptedCallback ?: Function;\n    attributeChangedCallback ?: Function;\n    observedAttrs: string[] = [];\n\n    // noinspection JSUnusedGlobalSymbols\n    static withTagName(tagName): TagBuilder {\n        return new TagBuilder(tagName);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withObservedAttributes(...oAttrs) {\n        this.observedAttrs = oAttrs;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withConnectedCallback(callback: Function) {\n        this.connectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withDisconnectedCallback(callback: Function) {\n        this.disconnectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAdoptedCallback(callback: Function) {\n        this.adoptedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAttributeChangedCallback(callback: Function) {\n        this.attributeChangedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withExtendsType(extendsType: CustomElementConstructor) {\n        this.extendsType = extendsType;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withOptions(theOptions) {\n        this.theOptions = theOptions;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withClass(clazz) {\n        if (this.markup) {\n            throw Error(\"Markup already defined, markup must be set in the class\");\n        }\n        this.clazz = clazz;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withMarkup(markup) {\n        if (this.clazz) {\n            throw Error(\"Class already defined, markup must be set in the class\");\n        }\n        this.markup = markup;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    register() {\n        if (!this.clazz && !this.markup) {\n            throw Error(\"Class or markup must be defined\")\n        }\n        if (this.clazz) {\n\n            let applyCallback = (name: string) => {\n                let outerCallback = this[name];\n                let protoCallback = (<any>this.clazz.prototype)[name];\n                let finalCallback = outerCallback || protoCallback;\n                if (finalCallback) {\n                    (<any>this.clazz.prototype)[name] = function () {\n                        if(outerCallback) {\n                            finalCallback.apply(DomQuery.byId(this));\n                        } else {\n                            protoCallback.apply(<any>this);\n                        }\n                    }\n                }\n            }\n\n            applyCallback(\"connectedCallback\");\n            applyCallback(\"disconnectedCallback\");\n            applyCallback(\"adoptedCallback\");\n            applyCallback(\"attributeChangedCallback\");\n\n            //TODO how do we handle the oAttrs?\n            if (this.observedAttrs.length) {\n                Object.defineProperty(this.clazz.prototype, \"observedAttributes\", {\n                    get(): any {\n                        return this.observedAttrs;\n                    }\n                });\n            }\n\n            window.customElements.define(this.tagName, this.clazz, this.theOptions || null);\n        } else {\n            let _t_ = this;\n            let applyCallback = (name: string, scope: any) => {\n                if (_t_[name]) {\n                    _t_[name].apply(DomQuery.byId(<any>scope));\n                }\n            };\n\n            window.customElements.define(this.tagName, class extends this.extendsType {\n                constructor() {\n                    super();\n                    this.innerHTML = _t_.markup;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                static get observedAttributes() {\n                    return _t_.observedAttrs;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                connectedCallback() {\n                    applyCallback(\"connectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                disconnectedCallback() {\n                    applyCallback(\"disconnectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                adoptedCallback() {\n                    applyCallback(\"adoptedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                attributeChangedCallback() {\n                    applyCallback(\"attributeChangedCallback\", this);\n                }\n\n            }, this.theOptions || null);\n        }\n    }\n}\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new window.DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (<any>window)?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","export {DomQuery, ElementAttribute, DomQueryCollector, DQ} from \"./DomQuery\";\nexport {Lang} from \"./Lang\";\nexport {Config, Monad, IValueHolder, IFunctor, IMonad, IIdentity, Optional, ValueEmbedder} from \"./Monad\";\nexport {CancellablePromise, Promise, IPromise, PromiseStatus} from \"./Promise\";\nexport {XMLQuery, XQ} from \"./XmlQuery\";\nexport {Stream, LazyStream, IteratableConsumer, IStream} from \"./Stream\";\nexport {\n    ArrayStreamDataSource,\n    MappedStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    SequenceDataSource,\n    QueryFormStringCollector,\n    IStreamDataSource,\n    ICollector,\n    ArrayCollector,\n    AssocArrayCollector,\n    FormDataCollector,\n    QueryFormDataCollector\n} from \"./SourcesCollectors\";\n\n\nexport {TagBuilder} from \"./TagBuilder\";\n\nexport {Message, Broker, BroadcastChannelBroker, Direction} from \"./Messaging\";\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(946);\n"],"sourceRoot":""}