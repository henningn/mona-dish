{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","this","_value","map","fn","inval","Monad","flatMap","mapped","fromNullable","Optional","isAbsent","isPresent","presentRunnable","absent","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","currentPos","cnt","length","currKey","keyVal","arrPos","arrayIndex","getClass","Array","getIfPresent","match","defaultVal","toJson","JSON","stringify","start","indexOf","end","parseInt","substring","resolve","resolver","e","rootElem","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","root","Config","Lang","instance","mergeMaps","shallowMerge","other","overwrite","apply","keys","buildPath","retVal","slice","applyIf","condition","delete","setVal","parentVal","parentPos","alloc","arr","push","tempVal","_instance","saveResolve","resolverProducer","defaultValue","result","saveResolveLazy","strToArray","it","splitter","retArr","split","trim","arrToMap","offset","ret","len","str","ws","replace","test","charAt","isString","arguments","String","isFunc","Function","hitch","scope","method","maps","blockFilter","whitelistFilter","item","arrForEach","mixMaps","dest","src","objToArray","obj","pack","finalOffset","finalPack","concat","callbackfn","startPos","startPosFinal","thisObj","convertedArr","forEach","contains","Error","arrIndexOf","element","fromIndex","pos","arrFilter","arrFinal","filter","applyArgs","args","argNames","UDEF","equalsIgnoreCase","source","destination","toLowerCase","timeout","handler","CancellablePromise","reject","setTimeout","clearTimeout","interval","setInterval","clearInterval","assertType","probe","theType","PromiseStatus","executor","status","PENDING","allFuncs","data","all","myapply","promiseCnt","myPromise","Promise","promises","__last__","finally","race","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","cancellator","cancel","_limits","of","Stream","ofAssoc","ofDataSource","dataSource","hasNext","next","limits","onElem","each","res","strmR","isArray","reduce","startVal","val1","first","last","Math","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collect","collector","finalValue","isLimitsReached","isEndOfArray","reset","parent","LazyStream","ArrayStreamDataSource","values","ofStreamDataSource","isOverLimits","nextFilter","max","MappedStreamDataSource","el","stop","FilteredStreamDatasource","FlatMapStreamDataSource","value1","value2","el1","el2","ArrayCollector","dataPos","filterFunc","filteredNext","inputDataSource","mapFunc","resolveCurrentNext","resolveNextNext","activeDataSource","FormData","append","FormDataCollector","toMerge","encodeFormElement","QueryFormDataCollector","formData","join","item1","item2","QueryFormStringCollector"],"mappings":"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","file":"Stream.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n\n\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<T>(value?: T): Optional<T> {\n        return new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if(this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch(e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent =  ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if(!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<T>(value?: any, valueKey: string = \"value\"): ValueEmbedder<T> {\n        return new ValueEmbedder(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos =  arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    get shallowCopy(): Config {\n        return new Config(Lang.instance.mergeMaps([{}, this.value || {}]));\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true) {\n        for (let key in other.value) {\n            if (overwrite && key in this.value) {\n                this.apply(key).value = other.getIf(key).value;\n            } else if (!(key in this.value)) {\n                this.apply(key).value = other.getIf(key).value;\n            }\n        }\n    }\n\n    apply(...keys: Array<any>): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    applyIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\n        return condition ? this.apply(...keys) : {value: null};\n    }\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            if (arr.length < length) {\n                for (let cnt = arr.length; cnt < length; cnt++) {\n                    arr.push({});\n                }\n            }\n        };\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CancellablePromise} from \"./Promise\";\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport class Lang {\n\n    private static _instance: Lang;\n\n    static get instance() {\n        if (!Lang._instance) {\n            Lang._instance = new Lang();\n        }\n        return Lang._instance;\n    }\n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    static saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    static saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return an array of the splitted string\n     */\n    strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n\n        let retArr = it.split(splitter);\n        for (let cnt = 0; cnt < retArr.length; cnt++) {\n            retArr[cnt] = this.trim(retArr[cnt]);\n        }\n        return retArr;\n    }\n\n    arrToMap(arr: any[], offset: number = 0) {\n        var ret = new Array(arr.length);\n        var len = arr.length;\n        offset = (offset) ? offset : 0;\n        for (var cnt = 0; cnt < len; cnt++) {\n            ret[arr[cnt]] = cnt + offset;\n        }\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    /**\n     * hitch backported from dojo\n     * hitch allows to assign a function to a dedicated scope\n     * this is helpful in situations when function reassignments\n     * can happen\n     * (notably happens often in lazy xhr code)\n     *\n     * @param {Function} scope of the function to be executed in\n     * @param {Function} method to be executed, the method must be of type function\n     *\n     * @return whatever the executed method returns\n     *\n     */\n    hitch(scope: any, method: Function): Function {\n        return !scope ? method : function () {\n            return method.apply(scope, arguments || []);\n        }; // Function\n    }\n\n    /**\n     * simplified merge maps which basically produces\n     * a final merged map from left to right\n     * the function is sideffect free\n     * @param maps\n     */\n    mergeMaps(maps: { [key: string]: any }[],\n              overwrite: boolean = true,\n              blockFilter: Function = (item) => false,\n              whitelistFilter: Function = (item) => true): { [key: string]: any } {\n        let retVal = {};\n        this.arrForEach(maps, (item: { [key: string]: any }) => {\n            this.mixMaps(retVal, item, overwrite, blockFilter, whitelistFilter);\n        });\n        return retVal;\n    }\n\n    /**\n     * Helper function to merge two maps\n     * into one\n     * @param {Object} dest the destination map\n     * @param {Object} src the source map\n     * @param {boolean} overwrite if set to true the destination is overwritten if the keys exist in both maps\n     * @param blockFilter\n     * @param whitelistFilter\n     **/\n    mixMaps<T>(dest: { [key: string]: T },\n               src: { [key: string]: T },\n               overwrite: boolean,\n               blockFilter?: Function,\n               whitelistFilter?: Function): { [key: string]: T } {\n        for (let key in src) {\n            if (!src.hasOwnProperty(key)) continue;\n            if (blockFilter && blockFilter(key)) {\n                continue;\n            }\n            if (whitelistFilter && !whitelistFilter(key)) {\n                continue;\n            }\n            if (!overwrite) {\n                /**\n                 *we use exists instead of booleans because we cannot rely\n                 *on all values being non boolean, we would need an getIf\n                 *operator in javascript to shorten this :-(\n                 */\n                dest[key] =  dest[key] ?? src[key];\n            } else {\n                dest[key] =  src[key] ?? dest[key];\n            }\n        }\n        return dest;\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    objToArray<T>(obj: any, offset?: number, pack?: Array<T>): Array<T> {\n        if (!obj) {\n            return pack || null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if (obj instanceof Array && !offset && !pack) return obj;\n        let finalOffset =  offset ?? 0;\n        let finalPack = pack || [];\n        try {\n            return finalPack.concat(Array.prototype.slice.call(obj, finalOffset));\n        } catch (e) {\n            //ie8 (again as only browser) delivers for css 3 selectors a non convertible object\n            //we have to do it the hard way\n            //ie8 seems generally a little bit strange in its behavior some\n            //objects break the function is everything methodology of javascript\n            //and do not implement apply call, or are pseudo arrays which cannot\n            //be sliced\n            for (let cnt = finalOffset; cnt < obj.length; cnt++) {\n                finalPack.push(obj[cnt]);\n            }\n            return finalPack;\n        }\n    }\n\n    /**\n     * foreach implementation utilizing the\n     * ECMAScript wherever possible\n     * with added functionality\n     *\n     * @param arr the array to filter\n     * @param callbackfn\n     * @param startPos\n     * @param scope the closure to apply the function to, with the syntax defined by the ecmascript functionality\n     * function (element<,key, array>)\n     * <p />\n     * optional params\n     * <p />\n     * <ul>\n     *      <li>param startPos (optional) the starting position </li>\n     *      <li>param scope (optional) the scope to apply the closure to  </li>\n     * </ul>\n     */\n    arrForEach<T>(arr: any, callbackfn: (value: T, index: number, array: T[]) => void, startPos?: number, scope?: Function) {\n        if (!arr || !arr.length) return;\n        let startPosFinal = startPos || 0;\n        let thisObj = scope;\n        //check for an existing foreach mapping on array prototypes\n        //IE9 still does not pass array objects as result for dom ops\n        let convertedArr: Array<T> = this.objToArray<T>(arr);\n        (startPos) ? convertedArr.slice(startPosFinal).forEach(callbackfn, thisObj) : convertedArr.forEach(callbackfn, thisObj);\n    }\n\n    /**\n     * checks if an array contains an element\n     * @param {Array} arr   array\n     * @param {String} str string to check for\n     */\n    contains<T>(arr: T[], str: string) {\n        if (!arr || !str) {\n            throw Error(\"null value on arr or str not allowed\");\n        }\n        return this.arrIndexOf(arr, str) != -1;\n    }\n\n    /**\n     * adds a EcmaScript optimized indexOf to our mix,\n     * checks for the presence of an indexOf functionality\n     * and applies it, otherwise uses a fallback to the hold\n     * loop method to determine the index\n     *\n     * @param arr the array\n     * @param element the index to search for\n     * @param fromIndex\n     */\n    arrIndexOf<T>(arr: any, element: T, fromIndex ?: number): number {\n        if (!arr || !arr.length) return -1;\n        let pos = fromIndex || 0;\n        arr = this.objToArray<T>(arr);\n        return arr.indexOf(element, pos);\n    }\n\n    /**\n     * filter implementation utilizing the\n     * ECMAScript wherever possible\n     * with added functionality\n     *\n     * @param arr the array to filter\n     * @param scope the closure to apply the function to, with the syntax defined by the ecmascript functionality\n     * function (element<,key, array>)\n     * <p />\n     * additional params\n     * <ul>\n     *  <li> startPos (optional) the starting position</li>\n     *  <li> scope (optional) the scope to apply the closure to</li>\n     * </ul>\n     */\n    arrFilter<T>(arr: any, callbackfn: (value: T, index?: number, array?: T[]) => boolean, startPos ?: number, scope ?: Function) {\n        if (!arr || !arr.length) return [];\n        let arrFinal = this.objToArray<T>(arr);\n        return ((startPos) ? arrFinal.slice(startPos).filter(callbackfn, scope) : arrFinal.filter(callbackfn, scope));\n    }\n\n    /**\n     * helper to automatically apply a delivered arguments map or array\n     * to its destination which has a field \"_\"<key> and a full field\n     *\n     * @param dest the destination object\n     * @param args the arguments array or map\n     * @param argNames the argument names to be transferred\n     */\n    /**\n     * helper to automatically apply a delivered arguments map or array\n     * to its destination which has a field \"_\"<key> and a full field\n     *\n     * @param dest the destination object\n     * @param args the arguments array or map\n     * @param argNames the argument names to be transferred\n     */\n    applyArgs<T>(dest: any, args: { [key: string]: T } | Array<T>, argNames?: Array<string>): any {\n        let UDEF = 'undefined';\n        if (argNames) {\n            for (let cnt = 0; cnt < (<Array<T>>args).length; cnt++) {\n                //dest can be null or 0 hence no shortcut\n                if (UDEF != typeof dest[\"_\" + argNames[cnt]]) {\n                    dest[\"_\" + argNames[cnt]] = args[cnt];\n                }\n                if (UDEF != typeof dest[argNames[cnt]]) {\n                    dest[argNames[cnt]] = args[cnt];\n                }\n            }\n        } else {\n            for (let key in args) {\n                if (!args.hasOwnProperty(key)) continue;\n                if (UDEF != typeof dest[\"_\" + key]) {\n                    dest[\"_\" + key] = args[key];\n                }\n                if (UDEF != typeof dest[key]) {\n                    dest[key] = args[key];\n                }\n            }\n        }\n        return dest;\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    equalsIgnoreCase(source: string, destination: string): boolean {\n        //either both are not set or null\n        if (!source && !destination) {\n            return true;\n        }\n        //source or dest is set while the other is not\n        if (!source || !destination) return false;\n        //in any other case we do a strong string comparison\n        return source.toLowerCase() === destination.toLowerCase();\n    }\n\n    /*\n     * Promise wrappers for timeout and interval\n     */\n    timeout(timeout: number): CancellablePromise {\n        let handler: any = null;\n        return new CancellablePromise((apply: Function, reject: Function) => {\n            handler = setTimeout(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearTimeout(handler);\n                handler = null;\n            }\n        });\n    }\n\n    interval(timeout: number): CancellablePromise {\n        let handler: any = null;\n        return new CancellablePromise((apply: Function, reject: Function) => {\n            handler = setInterval(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearInterval(handler);\n                handler = null;\n            }\n        });\n    }\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    public assertType(probe: any, theType: any): boolean {\n        return this.isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n}","import {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //var func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            var fn = this.allFuncs.shift();\n            if (fn.catch) {\n                var funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            var fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (var cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T> = (val1: T, val2: T) => T;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce(fn: Reducable<T>, startVal: T): Optional<T>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: {[key: string]: T}): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce(fn: Reducable<T>, startVal: T = null): Optional<T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1 = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: {[key: string]: T}): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = 0;\n        this._limits = -1;\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce(fn: Reducable<T>, startVal: T = null): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present\n     */\n    hasNext(): boolean;\n\n    /**\n     * false if not\n     */\n    next(): T;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n}\n\n/**\n * an intermediate data source wich prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    filteredNext: T = null;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this.filteredNext = next;\n                return true;\n            } else {\n                this.filteredNext = null;\n            }\n        }\n        return this.filteredNext != null;\n\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let ret = this.filteredNext;\n        this.filteredNext = null;\n        //We have to call hasNext, to roll another\n        //prefetch in case someone runs next\n        //sequentially without calling hasNext\n        this.hasNext();\n        return ret;\n    }\n\n    reset(): void {\n        this.filteredNext = null;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveCurrentNext() || this.resolveNextNext();\n    }\n\n    private resolveCurrentNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped =  this.mapFunc(this.inputDataSource.next());\n            if(Array.isArray(mapped)) {\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\n            } else {\n                this.activeDataSource = mapped;\n            }\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        return this.activeDataSource.next();\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}"],"sourceRoot":""}