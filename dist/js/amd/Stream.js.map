{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///src/main/typescript/F:/development/mona-dish/src/main/typescript/Monad.ts","webpack:///src/main/typescript/F:/development/mona-dish/src/main/typescript/Stream.ts","webpack:///src/main/typescript/F:/development/mona-dish/src/main/typescript/SourcesCollectors.ts","webpack:///src/main/typescript/F:/development/mona-dish/src/main/typescript/Lang.ts","webpack:///src/main/typescript/F:/development/mona-dish/src/main/typescript/Promise.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","objAssign","Lang","this","_value","map","fn","inval","Monad","flatMap","mapped","fromNullable","Optional","isAbsent","isPresent","presentRunnable","absent","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","currentPos","cnt","length","currKey","keyVal","arrPos","arrayIndex","getClass","Array","getIfPresent","match","defaultVal","toJson","JSON","stringify","start","indexOf","end","parseInt","substring","resolve","resolver","e","rootElem","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","root","Config","Stream","ofAssoc","collect","AssocArrayCollector","shallowMerge","other","overwrite","assign","keys","buildPath","retVal","apply","slice","assignIf","condition","delete","setVal","parentVal","parentPos","alloc","arr","length1","length2","push","tempVal","_limits","pos","of","data","ofDataSource","dataSource","hasNext","next","limits","onElem","each","res","item","ret","strmR","isArray","concat","filter","reduce","startVal","offset","val1","first","last","Math","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collector","finalValue","isLimitsReached","isEndOfArray","reset","parent","LazyStream","ArrayStreamDataSource","values","ofStreamDataSource","isOverLimits","nextFilter","max","MappedStreamDataSource","el","stop","FilteredStreamDatasource","FlatMapStreamDataSource","value1","value2","el1","el2","ArrayCollector","dataPos","filterFunc","filteredNext","inputDataSource","mapFunc","resolveCurrentNext","resolveNextNext","activeDataSource","element","FormData","append","FormDataCollector","toMerge","encodeFormElement","QueryFormDataCollector","formData","join","item1","item2","QueryFormStringCollector","trim","str","ws","replace","test","charAt","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","saveResolveLazy","strToArray","splitter","split","forEach","objToArray","obj","pack","equalsIgnoreCase","source","destination","finalDest","toLowerCase","timeout","handler","CancellablePromise","reject","setTimeout","clearTimeout","interval","setInterval","clearInterval","assertType","probe","theType","isFunc","Function","target","TypeError","to","theArgs","nextSource","nextKey","PromiseStatus","executor","status","PENDING","allFuncs","all","myapply","promiseCnt","myPromise","Promise","promises","__last__","finally","race","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","cancellator","cancel"],"mappings":"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","file":"Stream.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\r\n * Useful if you need the functions in another library to keep its dependencies down\r\n */\r\n\r\n/*IMonad definitions*/\r\n\r\nimport {Lang} from \"./Lang\";\r\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\r\nimport {Stream} from \"./Stream\";\r\nimport objAssign = Lang.objAssign;\r\n\r\n/**\r\n * IFunctor interface,\r\n * defines an interface which allows to map a functor\r\n * via a first order function to another functor\r\n */\r\nexport interface IFunctor<T> {\r\n    map<R>(fn: (data: T) => R): IFunctor<R>;\r\n}\r\n\r\n/**\r\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\r\n * function call f into a monad with the nesting level of 1\r\n *\r\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\r\n */\r\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\r\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\r\n}\r\n\r\n/**\r\n * a stateful functor which holds a value upn which a\r\n * function can be applied\r\n *\r\n * as value holder of type T\r\n */\r\nexport interface IIdentity<T> extends IFunctor<T> {\r\n    readonly value: T;\r\n}\r\n\r\n/**\r\n *  custom value holder definition, since we are not pure functional\r\n *  but iterative we have structures which allow the assignment of a value\r\n *  also not all structures are sideffect free\r\n */\r\nexport interface IValueHolder<T> {\r\n    value: T | Array<T>;\r\n}\r\n\r\n/**\r\n * Implementation of a monad\r\n * (Sideffect free), no write allowed directly on the monads\r\n * value state\r\n */\r\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\r\n    constructor(value: T) {\r\n        this._value = value;\r\n    }\r\n\r\n    protected _value: T;\r\n\r\n    get value(): T {\r\n        return this._value;\r\n    }\r\n\r\n    map<R>(fn?: (data: T) => R): Monad<R> {\r\n        if (!fn) {\r\n            fn = (inval: any) => <R>inval;\r\n        }\r\n        let result: R = fn(this.value);\r\n        return new Monad(result);\r\n    }\r\n\r\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\r\n        let mapped: Monad<any> = this.map(fn);\r\n        while (mapped?.value instanceof Monad) {\r\n            mapped = mapped.value\r\n        }\r\n        return mapped;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\r\n * sugar on top\r\n * (Sideeffect free, since value assignment is not allowed)\r\n * */\r\nexport class Optional<T> extends Monad<T> {\r\n\r\n    /*default value for absent*/\r\n    static absent = Optional.fromNullable(null);\r\n\r\n    constructor(value: T) {\r\n        super(value);\r\n    }\r\n\r\n    get value(): T {\r\n        if (this._value instanceof Monad) {\r\n            return this._value.flatMap().value\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    static fromNullable<T>(value?: T): Optional<T> {\r\n        return new Optional(value);\r\n    }\r\n\r\n    /*syntactic sugar for absent and present checks*/\r\n    isAbsent(): boolean {\r\n        return \"undefined\" == typeof this.value || null == this.value;\r\n    }\r\n\r\n    /**\r\n     * any value present\r\n     */\r\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\r\n        let absent = this.isAbsent();\r\n        if (!absent && presentRunnable) {\r\n            presentRunnable.call(this, this)\r\n        }\r\n        return !absent;\r\n    }\r\n\r\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\r\n    }): Monad<T> {\r\n        this.isPresent.call(this, presentRunnable);\r\n        return this;\r\n    }\r\n\r\n    orElse(elseValue: any): Optional<any> {\r\n        if (this.isPresent()) {\r\n            return this;\r\n        } else {\r\n            //shortcut\r\n            if (elseValue == null) {\r\n                return Optional.absent;\r\n            }\r\n            return this.flatMap(() => elseValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * lazy, passes a function which then is lazily evaluated\r\n     * instead of a direct value\r\n     * @param func\r\n     */\r\n    orElseLazy(func: () => any): Optional<any> {\r\n        if (this.isPresent()) {\r\n            return this;\r\n        } else {\r\n            return this.flatMap(func);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * we need to implement it to fullfill the contract, although it is used only internally\r\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\r\n     */\r\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\r\n        let val = super.flatMap(fn);\r\n        if (!(val instanceof Optional)) {\r\n            return Optional.fromNullable(val.value);\r\n        }\r\n\r\n        return <Optional<any>>val.flatMap();\r\n    }\r\n\r\n    /*\r\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\r\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\r\n     * this is some syntactic sugar however which is quite useful*/\r\n    getIf<R>(...key: string[]): Optional<R> {\r\n\r\n        let currentPos: Optional<any> = this;\r\n        for (let cnt = 0; cnt < key.length; cnt++) {\r\n            let currKey = this.keyVal(key[cnt]);\r\n            let arrPos = this.arrayIndex(key[cnt]);\r\n\r\n            if (currKey === \"\" && arrPos >= 0) {\r\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\r\n                if (currentPos.isAbsent()) {\r\n                    return currentPos;\r\n                }\r\n                continue;\r\n            } else if (currKey && arrPos >= 0) {\r\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\r\n                    return currentPos;\r\n                }\r\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\r\n                if (currentPos.isAbsent()) {\r\n                    return currentPos;\r\n                }\r\n                continue;\r\n\r\n            } else {\r\n                currentPos = currentPos.getIfPresent(currKey);\r\n            }\r\n            if (currentPos.isAbsent()) {\r\n                return currentPos;\r\n            } else if (arrPos > -1) {\r\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\r\n            }\r\n        }\r\n        let retVal = currentPos;\r\n\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * simple match, if the first order function call returns\r\n     * true then there is a match, if the value is not present\r\n     * it never matches\r\n     *\r\n     * @param fn the first order function performing the match\r\n     */\r\n    match(fn: (item: T) => boolean): boolean {\r\n        if (this.isAbsent()) {\r\n            return false\r\n        }\r\n        return fn(this.value);\r\n    }\r\n\r\n    /**\r\n     * convenience function to flatmap the internal value\r\n     * and replace it with a default in case of being absent\r\n     *\r\n     * @param defaultVal\r\n     * @returns {Optional<any>}\r\n     */\r\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\r\n        if (this.isAbsent()) {\r\n            return this.getClass().fromNullable(defaultVal).flatMap();\r\n        }\r\n\r\n        return this.getClass().fromNullable(this.value).flatMap();\r\n    }\r\n\r\n    toJson(): string {\r\n        return JSON.stringify(this.value);\r\n    }\r\n\r\n    /**\r\n     * helper to override several implementations in a more fluent way\r\n     * by having a getClass operation we can avoid direct calls into the constructor or\r\n     * static methods and do not have to implement several methods which rely on the type\r\n     * of \"this\"\r\n     * @returns {Monadish.Optional}\r\n     */\r\n    protected getClass(): any {\r\n        return Optional;\r\n    }\r\n\r\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\r\n    protected arrayIndex(key: string): number {\r\n        let start = key.indexOf(\"[\");\r\n        let end = key.indexOf(\"]\");\r\n        if (start >= 0 && end > 0 && start < end) {\r\n            return parseInt(key.substring(start + 1, end));\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\r\n    protected keyVal(key: string): string {\r\n        let start = key.indexOf(\"[\");\r\n\r\n        if (start >= 0) {\r\n            return key.substring(0, start);\r\n        } else {\r\n            return key;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * additional syntactic sugar which is not part of the usual optional implementation\r\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\r\n     * capabilities in typescript\r\n     */\r\n    getIfPresent<R>(key: string): Optional<R> {\r\n        if (this.isAbsent()) {\r\n            return this.getClass().absent;\r\n        }\r\n        return this.getClass().fromNullable(this.value[key]).flatMap();\r\n    }\r\n\r\n    /**\r\n     * elvis like typesafe functional save resolver\r\n     * a typesafe option for getIfPresent\r\n     *\r\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\r\n     * if this is resolvable without any errors an Optional with the value is returned\r\n     * if not, then an Optional absent is returned, also if you return Optional absent\r\n     * it is flatmapped into absent\r\n     *\r\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\r\n     * the resolution goes towards absent\r\n     */\r\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\r\n        if(this.isAbsent()) {\r\n            return Optional.absent;\r\n        }\r\n        try {\r\n            return Optional.fromNullable(resolver(this.value))\r\n        } catch(e) {\r\n            return Optional.absent;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n// --------------------- From here onwards we break out the sideffects free limits ------------\r\n\r\n\r\n/**\r\n * ValueEmbedder is the writeable version\r\n * of optional, it basically is a wrappber\r\n * around a construct which has a state\r\n * and can be written to.\r\n *\r\n * For the readonly version see Optional\r\n */\r\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\r\n\r\n    /*default value for absent*/\r\n    static absent =  ValueEmbedder.fromNullable(null);\r\n\r\n    protected key: string;\r\n\r\n    constructor(rootElem: any, valueKey: string = \"value\") {\r\n        super(rootElem);\r\n\r\n        this.key = valueKey;\r\n    }\r\n\r\n    get value(): T {\r\n        return this._value ? <T>this._value[this.key] : null;\r\n    }\r\n\r\n    set value(newVal: T) {\r\n        if(!this._value) {\r\n            return;\r\n        }\r\n        this._value[this.key] = newVal\r\n    }\r\n\r\n    orElse(elseValue: any): Optional<any> {\r\n        let alternative = {};\r\n        alternative[this.key] = elseValue;\r\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\r\n    }\r\n\r\n    orElseLazy(func: () => any): Optional<any> {\r\n        if (this.isPresent()) {\r\n            return this;\r\n        } else {\r\n            let alternative = {};\r\n            alternative[this.key] = func();\r\n            return new ValueEmbedder(alternative, this.key);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * helper to override several implementations in a more fluent way\r\n     * by having a getClass operation we can avoid direct calls into the constructor or\r\n     * static methods and do not have to implement several methods which rely on the type\r\n     * of \"this\"\r\n     * @returns {Monadish.Optional}\r\n     */\r\n    protected getClass(): any {\r\n        return ValueEmbedder;\r\n    }\r\n\r\n    static fromNullable<T>(value?: any, valueKey: string = \"value\"): ValueEmbedder<T> {\r\n        return new ValueEmbedder(value, valueKey);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * specialized value embedder\r\n * for our Configuration\r\n */\r\nclass ConfigEntry<T> extends ValueEmbedder<T> {\r\n\r\n    /*default value for absent*/\r\n    static absent = ConfigEntry.fromNullable(null);\r\n\r\n    arrPos: number;\r\n\r\n    constructor(rootElem: any, key: any, arrPos?: number) {\r\n        super(rootElem, key);\r\n\r\n        this.arrPos =  arrPos ?? -1;\r\n    }\r\n\r\n    get value() {\r\n        if (this.key == \"\" && this.arrPos >= 0) {\r\n            return this._value[this.arrPos];\r\n        } else if (this.key && this.arrPos >= 0) {\r\n            return this._value[this.key][this.arrPos];\r\n        }\r\n        return this._value[this.key];\r\n    }\r\n\r\n    set value(val: T) {\r\n        if (this.key == \"\" && this.arrPos >= 0) {\r\n            this._value[this.arrPos] = val;\r\n            return;\r\n        } else if (this.key && this.arrPos >= 0) {\r\n            this._value[this.key][this.arrPos] = val;\r\n            return;\r\n        }\r\n        this._value[this.key] = val;\r\n    }\r\n}\r\n\r\n/**\r\n * Config, basically an optional wrapper for a json structure\r\n * (not sideeffect free, since we can alter the internal config state\r\n * without generating a new config), not sure if we should make it sideffect free\r\n * since this would swallow a lot of performane and ram\r\n */\r\nexport class Config extends Optional<any> {\r\n    constructor(root: any) {\r\n        super(root);\r\n    }\r\n\r\n    get shallowCopy(): Config {\r\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\r\n    }\r\n\r\n    get deepCopy(): Config {\r\n        return new Config(objAssign({}, this.value));\r\n    }\r\n\r\n    static fromNullable<T>(value?: any): Config {\r\n        return new Config(value);\r\n    }\r\n\r\n    /**\r\n     * simple merge for the root configs\r\n     */\r\n    shallowMerge(other: Config, overwrite = true) {\r\n        for (let key in other.value) {\r\n            if (overwrite || !(key in this.value)) {\r\n                this.assign(key).value = other.getIf(key).value;\r\n            }\r\n        }\r\n    }\r\n\r\n    assign(...keys): IValueHolder<any> {\r\n        if (keys.length < 1) {\r\n            return;\r\n        }\r\n\r\n        this.buildPath(keys);\r\n\r\n        let currKey = this.keyVal(keys[keys.length - 1]);\r\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\r\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\r\n            currKey, arrPos\r\n        );\r\n\r\n        return retVal;\r\n    }\r\n\r\n    assignIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\r\n        return condition ? this.assign(...keys) : {value: null};\r\n    }\r\n\r\n\r\n    getIf(...keys: Array<string>): Config {\r\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\r\n    }\r\n\r\n    get(defaultVal: any): Config {\r\n        return this.getClass().fromNullable(super.get(defaultVal).value);\r\n    }\r\n\r\n    //empties the current config entry\r\n    delete(key: string): Config {\r\n        if (key in this.value) {\r\n            delete this.value[key];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    toJson(): any {\r\n        return JSON.stringify(this.value);\r\n    }\r\n\r\n    protected getClass(): any {\r\n        return Config;\r\n    }\r\n\r\n    private setVal(val: any) {\r\n        this._value = val;\r\n    }\r\n\r\n    private buildPath(keys: Array<any>): Config {\r\n        let val = this;\r\n        let parentVal = this.getClass().fromNullable(null);\r\n        let parentPos = -1;\r\n        let alloc = function (arr: Array<any>, length: number) {\r\n            let length1 = arr.length;\r\n            let length2 = length1 + length;\r\n            for(let cnt = length1; cnt < length2; cnt++) {\r\n                arr.push({});\r\n            }\r\n        };\r\n\r\n        for (let cnt = 0; cnt < keys.length; cnt++) {\r\n            let currKey = this.keyVal(keys[cnt]);\r\n            let arrPos = this.arrayIndex(keys[cnt]);\r\n\r\n            if (currKey === \"\" && arrPos >= 0) {\r\n\r\n                val.setVal((val.value instanceof Array) ? val.value : []);\r\n                alloc(val.value, arrPos + 1);\r\n                if (parentPos >= 0) {\r\n                    parentVal.value[parentPos] = val.value;\r\n                }\r\n                parentVal = val;\r\n                parentPos = arrPos;\r\n                val = this.getClass().fromNullable(val.value[arrPos]);\r\n                continue;\r\n            }\r\n\r\n            let tempVal = <Config>val.getIf(currKey);\r\n            if (arrPos == -1) {\r\n                if (tempVal.isAbsent()) {\r\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\r\n                } else {\r\n                    val = <any>tempVal;\r\n                }\r\n            } else {\r\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\r\n                alloc(arr, arrPos + 1);\r\n                val.value[currKey] = arr;\r\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\r\n            }\r\n            parentVal = val;\r\n            parentPos = arrPos;\r\n            val = <any>tempVal;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n\r\n","/*\r\n * A small stream implementation\r\n */\r\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\r\nimport {\r\n    ArrayCollector,\r\n    ArrayStreamDataSource,\r\n    FilteredStreamDatasource, FlatMapStreamDataSource,\r\n    ICollector,\r\n    IStreamDataSource,\r\n    MappedStreamDataSource\r\n} from \"./SourcesCollectors\";\r\n\r\n/*\r\n * some typedefs to make the code more reabable\r\n */\r\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\r\nexport type ArrayMapper<T> = (data: T) => Array<any>;\r\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\r\nexport type Reducable<T> = (val1: T, val2: T) => T;\r\nexport type Matchable<T> = (data: T) => boolean;\r\nexport type Mappable<T, R> = (data: T) => R;\r\nexport type Comparator<T> = (el1: T, el2: T) => number;\r\n\r\n/**\r\n * Generic interface defining a stream\r\n */\r\nexport interface IStream<T> {\r\n    /**\r\n     * Perform the operation fn on a single element in the stream at a time\r\n     * then pass the stream over for further processing\r\n     * This is basically an intermediate point in the stream\r\n     * with further processing happening later, do not use\r\n     * this method to gather data or iterate over all date for processing\r\n     * (for the second case each has to be used)\r\n     *\r\n     * @param fn the processing function, if it returns false, further processing is stopped\r\n     */\r\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\r\n\r\n    /**\r\n     * Iterate over all elements in the stream and do some processing via fn\r\n     *\r\n     * @param fn takes a single element and if it returns false\r\n     * then further processing is stopped\r\n     */\r\n    each(fn: IteratableConsumer<T>): void;\r\n\r\n    /**\r\n     * maps a single element into another via fn\r\n     * @param fn function which takes one element in and returns another\r\n     */\r\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\r\n\r\n    /**\r\n     * Takes an element in and returns a set of something\r\n     * the set then is flatted into a single stream to be further processed\r\n     *\r\n     * @param fn\r\n     */\r\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\r\n\r\n    /**\r\n     * filtering, takes an element in and is processed by fn.\r\n     * If it returns false then further processing on this element is skipped\r\n     * if it returns true it is passed down the chain.\r\n     *\r\n     * @param fn\r\n     */\r\n    filter(fn?: Matchable<T>): IStream<T>;\r\n\r\n    /**\r\n     * functional reduce... takes two elements in the stream and reduces to\r\n     * one from left to right\r\n     *\r\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\r\n     * @param startVal an optional starting value, if provided the the processing starts with this element\r\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\r\n     */\r\n    reduce(fn: Reducable<T>, startVal: T): Optional<T>;\r\n\r\n    /**\r\n     * returns the first element in the stream is given as Optional\r\n     */\r\n    first(): Optional<T>;\r\n\r\n    /**\r\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\r\n     * point hence producing an endless loop)\r\n     */\r\n    last(): Optional<T>;\r\n\r\n    /**\r\n     * returns true if there is at least one element where a call fn(element) produces true\r\n     *\r\n     * @param fn\r\n     */\r\n    anyMatch(fn: Matchable<T>): boolean;\r\n\r\n    /**\r\n     * returns true if all elmements produce true on a call to fn(element)\r\n     *\r\n     * @param fn\r\n     */\r\n    allMatch(fn: Matchable<T>): boolean;\r\n\r\n    /**\r\n     * returns true if no elmements produce true on a call to fn(element)\r\n     *\r\n     * @param fn\r\n     */\r\n    noneMatch(fn: Matchable<T>): boolean;\r\n\r\n    /**\r\n     * Collect the elements with a collector given\r\n     * There are a number of collectors provided\r\n     *\r\n     * @param collector\r\n     */\r\n    collect(collector: ICollector<T, any>): any;\r\n\r\n    /**\r\n     * sort on the stream, this is a special case\r\n     * of an endpoint, so your data which is fed in needs\r\n     * to be limited otherwise it will fail\r\n     * it still returns a stream for further processing\r\n     *\r\n     * @param comparator\r\n     */\r\n    sort(comparator: Comparator<T>): IStream<T>;\r\n\r\n    /**\r\n     * Limits the stream to a certain number of elements\r\n     *\r\n     * @param end the limit of the stream\r\n     */\r\n    limits(end: number): IStream<T>;\r\n\r\n    /**\r\n     * returns the stream collected into an array (90% use-case abbreviation\r\n     */\r\n    value: Array<T>;\r\n}\r\n\r\n/**\r\n * A simple typescript based reimplementation of streams\r\n *\r\n * This is the early eval version\r\n * for a lazy eval version check, LazyStream, which is api compatible\r\n * to this implementation, however with the benefit of being able\r\n * to provide infinite data sources and generic data providers, the downside\r\n * is, it might be a tad slower in some situations\r\n */\r\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\r\n\r\n    value: Array<T>;\r\n    _limits = -1;\r\n\r\n    private pos = -1;\r\n\r\n    constructor(...value: T[]) {\r\n        this.value = value;\r\n    }\r\n\r\n    static of<T>(...data: Array<T>): Stream<T> {\r\n        return new Stream<T>(...data);\r\n    }\r\n\r\n    static ofAssoc<T>(data: {[key: string]: T}): Stream<[string, T]> {\r\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\r\n    }\r\n\r\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\r\n        let value: T[] = [];\r\n        while (dataSource.hasNext()) {\r\n            value.push(dataSource.next());\r\n        }\r\n\r\n        return new Stream(...value);\r\n    }\r\n\r\n    limits(end: number): Stream<T> {\r\n        this._limits = end;\r\n        return this;\r\n    }\r\n\r\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\r\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\r\n            if (fn(this.value[cnt], cnt) === false) {\r\n                break;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    each(fn: (data: T, pos ?: number) => void | boolean) {\r\n        this.onElem(fn);\r\n    }\r\n\r\n    map<R>(fn?: (data: T) => R): Stream<R> {\r\n        if (!fn) {\r\n            fn = (inval: any) => <R>inval;\r\n        }\r\n        let res: R[] = [];\r\n        this.each((item, cnt) => {\r\n            res.push(fn(item))\r\n        });\r\n\r\n        return new Stream<R>(...res);\r\n    }\r\n\r\n    /*\r\n     * we need to implement it to fullfill the contract, although it is used only internally\r\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\r\n     */\r\n\r\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\r\n        let ret = [];\r\n        this.each(item => {\r\n            let strmR: any = fn(item);\r\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\r\n        });\r\n        return <Stream<any>>Stream.of(...ret);\r\n    }\r\n\r\n    filter(fn?: (data: T) => boolean): Stream<T> {\r\n        let res: Array<T> = [];\r\n        this.each((data) => {\r\n            if (fn(data)) {\r\n                res.push(data);\r\n            }\r\n        });\r\n        return new Stream<T>(...res);\r\n    }\r\n\r\n    reduce(fn: Reducable<T>, startVal: T = null): Optional<T> {\r\n        let offset = startVal != null ? 0 : 1;\r\n        let val1 = startVal != null ? startVal : this.value.length ? this.value[0] : null;\r\n\r\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\r\n            val1 = fn(val1, this.value[cnt]);\r\n        }\r\n        return Optional.fromNullable(val1);\r\n    }\r\n\r\n    first(): Optional<T> {\r\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\r\n    }\r\n\r\n    last(): Optional<T> {\r\n        //could be done via reduce, but is faster this way\r\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\r\n\r\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\r\n    }\r\n\r\n    anyMatch(fn: Matchable<T>): boolean {\r\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\r\n            if (fn(this.value[cnt])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    allMatch(fn: Matchable<T>): boolean {\r\n        if (!this.value.length) {\r\n            return false;\r\n        }\r\n        let matches = 0;\r\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\r\n            if (fn(this.value[cnt])) {\r\n                matches++;\r\n            }\r\n        }\r\n        return matches == this.value.length;\r\n    }\r\n\r\n    noneMatch(fn: Matchable<T>): boolean {\r\n        let matches = 0;\r\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\r\n            if (!fn(this.value[cnt])) {\r\n                matches++;\r\n            }\r\n        }\r\n        return matches == this.value.length;\r\n    }\r\n\r\n    sort(comparator: Comparator<T>): IStream<T> {\r\n        let newArr = this.value.slice().sort(comparator);\r\n        return Stream.of(...newArr);\r\n    }\r\n\r\n\r\n    collect(collector: ICollector<T, any>): any {\r\n        this.each(data => collector.collect(data));\r\n        return collector.finalValue;\r\n    }\r\n\r\n    //-- internally exposed methods needed for the interconnectivity\r\n    hasNext() {\r\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\r\n        let isEndOfArray = this.pos >= this.value.length - 1;\r\n        return !(isLimitsReached || isEndOfArray);\r\n    }\r\n\r\n    next(): T {\r\n        if (!this.hasNext()) {\r\n            return null;\r\n        }\r\n        this.pos++;\r\n        return this.value[this.pos];\r\n    }\r\n\r\n    reset() {\r\n        this.pos = -1;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Lazy implementation of a Stream\r\n * The idea is to connect the intermediate\r\n * streams as datasources like a linked list\r\n * with reverse referencing and for special\r\n * operations like filtering flatmapping\r\n * have intermediate datasources in the list\r\n * with specialized functions.\r\n *\r\n * Sort of a modified pipe valve pattern\r\n * the streams are the pipes the intermediate\r\n * data sources are the valves\r\n *\r\n * We then can use passed in functions to control\r\n * the flow in the valves\r\n *\r\n * That way we can have a lazy evaluating stream\r\n *\r\n * So if an endpoint requests data\r\n * a callback trace goes back the stream list\r\n * which triggers an operation upwards\r\n * which sends data down the drain which then is processed\r\n * and filtered until one element hits the endpoint.\r\n *\r\n * That is repeated, until all elements are processed\r\n * or an internal limit is hit.\r\n *\r\n */\r\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\r\n\r\n    protected dataSource: IStreamDataSource<T>;\r\n    _limits = -1;\r\n\r\n    /*\r\n     * needed to have the limits check working\r\n     * we need to keep track of the current position\r\n     * in the stream\r\n     */\r\n    pos = -1;\r\n\r\n    static of<T>(...values: Array<T>): LazyStream<T> {\r\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\r\n    }\r\n\r\n    static ofAssoc<T>(data: {[key: string]: T}): LazyStream<[string, T]> {\r\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\r\n    }\r\n\r\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\r\n        return new LazyStream(value);\r\n    }\r\n\r\n    constructor(parent: IStreamDataSource<T>) {\r\n        this.dataSource = parent;\r\n\r\n    }\r\n\r\n    hasNext(): boolean {\r\n        if (this.isOverLimits()) {\r\n            return false;\r\n        }\r\n\r\n        return this.dataSource.hasNext();\r\n    }\r\n\r\n    next(): T {\r\n        let next = this.dataSource.next();\r\n        // @ts-ignore\r\n        this.pos++;\r\n        return next;\r\n    }\r\n\r\n    reset(): void {\r\n        this.dataSource.reset();\r\n        this.pos = 0;\r\n        this._limits = -1;\r\n    }\r\n\r\n    nextFilter(fn: Matchable<T>): T {\r\n        if (this.hasNext()) {\r\n            let newVal: T = this.next();\r\n            if (!fn(newVal)) {\r\n                return this.nextFilter(fn);\r\n            }\r\n            return <T>newVal;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    limits(max: number): LazyStream<T> {\r\n        this._limits = max;\r\n        return this;\r\n    }\r\n\r\n    //main stream methods\r\n    collect(collector: ICollector<T, any>): any {\r\n        while (this.hasNext()) {\r\n            let t = this.next();\r\n            collector.collect(<T>t);\r\n        }\r\n        return collector.finalValue;\r\n    }\r\n\r\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\r\n        return new LazyStream(new MappedStreamDataSource((el) => {\r\n            if (fn(el, this.pos) === false) {\r\n                this.stop();\r\n            }\r\n            return el;\r\n        }, this));\r\n    }\r\n\r\n    filter(fn: Matchable<T>): LazyStream<T> {\r\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\r\n    }\r\n\r\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\r\n        return new LazyStream(new MappedStreamDataSource(fn, this));\r\n    }\r\n\r\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\r\n\r\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\r\n    }\r\n\r\n    //endpoint\r\n    each(fn: IteratableConsumer<T>) {\r\n        while (this.hasNext()) {\r\n            if (fn(this.next()) === false) {\r\n                this.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    reduce(fn: Reducable<T>, startVal: T = null): Optional<T> {\r\n        if (!this.hasNext()) {\r\n            return Optional.absent;\r\n        }\r\n        let value1 = null;\r\n        let value2 = null;\r\n        if (startVal != null) {\r\n            value1 = startVal;\r\n            value2 = this.next();\r\n        } else {\r\n            value1 = this.next();\r\n            if (!this.hasNext()) {\r\n                return Optional.fromNullable(value1);\r\n            }\r\n            value2 = this.next();\r\n        }\r\n        value1 = fn(value1, value2);\r\n        while (this.hasNext()) {\r\n            value2 = this.next();\r\n            value1 = fn(value1, value2);\r\n        }\r\n\r\n        return Optional.fromNullable(value1);\r\n    }\r\n\r\n    last(): Optional<T> {\r\n        if (!this.hasNext()) {\r\n            return Optional.absent;\r\n        }\r\n        return this.reduce((el1, el2) => el2);\r\n    }\r\n\r\n    first(): Optional<T> {\r\n        this.reset();\r\n        if (!this.hasNext()) {\r\n            return Optional.absent;\r\n        }\r\n        return Optional.fromNullable(this.next());\r\n    }\r\n\r\n    anyMatch(fn: Matchable<T>): boolean {\r\n        while (this.hasNext()) {\r\n            if (fn(this.next())) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    allMatch(fn: Matchable<T>): boolean {\r\n        while (this.hasNext()) {\r\n            if (!fn(this.next())) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    noneMatch(fn: Matchable<T>): boolean {\r\n        while (this.hasNext()) {\r\n            if (fn(this.next())) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    sort(comparator: Comparator<T>): IStream<T> {\r\n        let arr = this.collect(new ArrayCollector());\r\n        arr = arr.sort(comparator);\r\n        return LazyStream.of(...arr);\r\n    }\r\n\r\n    get value(): Array<T> {\r\n        return this.collect(new ArrayCollector<T>());\r\n    }\r\n\r\n    private stop() {\r\n        this.pos = this._limits + 1000000000;\r\n    }\r\n\r\n    private isOverLimits() {\r\n        return this._limits != -1 && this.pos >= this._limits - 1;\r\n    }\r\n\r\n}\r\n\r\n\r\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {Stream, StreamMapper} from \"./Stream\";\r\nimport {DomQuery} from \"./DomQuery\";\r\n\r\n/**\r\n * Every data source wich feeds data into the lazy stream\r\n * or stream generally must implement this interface\r\n *\r\n * It is basically an iteratable to the core\r\n */\r\nexport interface IStreamDataSource<T> {\r\n\r\n    /**\r\n     * @returns true if additional data is present\r\n     */\r\n    hasNext(): boolean;\r\n\r\n    /**\r\n     * false if not\r\n     */\r\n    next(): T;\r\n\r\n    /**\r\n     * resets the position to the beginning\r\n     */\r\n    reset(): void;\r\n}\r\n\r\n/**\r\n * A collector, needs to be implemented\r\n */\r\nexport interface ICollector<T, S> {\r\n    /**\r\n     * this method basically takes a single stream element\r\n     * and does something with it (collecting it one way or the other\r\n     * in most cases)\r\n     *\r\n     * @param element\r\n     */\r\n    collect(element: T);\r\n\r\n    /**\r\n     * the final result after all the collecting is done\r\n     */\r\n    finalValue: S;\r\n}\r\n\r\n/**\r\n * implementation of iteratable on top of array\r\n */\r\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\r\n    value: Array<T>;\r\n    dataPos = -1;\r\n\r\n    constructor(...value: Array<T>) {\r\n        this.value = value;\r\n    }\r\n\r\n    hasNext(): boolean {\r\n        return this.value.length - 1 > this.dataPos;\r\n    }\r\n\r\n    next(): T {\r\n        this.dataPos++;\r\n        return this.value[this.dataPos];\r\n    }\r\n\r\n    reset() {\r\n        this.dataPos = -1;\r\n    }\r\n}\r\n\r\n/**\r\n * an intermediate data source wich prefilters\r\n * incoming stream data\r\n * and lets only the data out which\r\n * passes the filter function check\r\n */\r\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\r\n\r\n    filterFunc: (T) => boolean;\r\n    inputDataSource: IStreamDataSource<T>;\r\n\r\n    filteredNext: T = null;\r\n\r\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\r\n        this.filterFunc = filterFunc;\r\n        this.inputDataSource = parent;\r\n    }\r\n\r\n    /**\r\n     * in order to filter we have to make a look ahead until the\r\n     * first next allowed element\r\n     * hence we prefetch the element and then\r\n     * serve it via next\r\n     */\r\n    hasNext(): boolean {\r\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\r\n            let next: T = <T>this.inputDataSource.next();\r\n            if (this.filterFunc(next)) {\r\n                this.filteredNext = next;\r\n                return true;\r\n            } else {\r\n                this.filteredNext = null;\r\n            }\r\n        }\r\n        return this.filteredNext != null;\r\n\r\n    }\r\n\r\n    /**\r\n     * serve the next element\r\n     */\r\n    next(): T {\r\n        let ret = this.filteredNext;\r\n        this.filteredNext = null;\r\n        //We have to call hasNext, to roll another\r\n        //prefetch in case someone runs next\r\n        //sequentially without calling hasNext\r\n        this.hasNext();\r\n        return ret;\r\n    }\r\n\r\n    reset(): void {\r\n        this.filteredNext = null;\r\n        this.inputDataSource.reset();\r\n    }\r\n}\r\n\r\n/**\r\n * an intermediate datasource which maps the items from\r\n * one into another\r\n */\r\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\r\n\r\n    mapFunc: (T) => S;\r\n    inputDataSource: IStreamDataSource<T>;\r\n\r\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\r\n        this.mapFunc = mapFunc;\r\n        this.inputDataSource = parent;\r\n    }\r\n\r\n    hasNext(): boolean {\r\n        return this.inputDataSource.hasNext();\r\n    }\r\n\r\n    next(): S {\r\n        return this.mapFunc(this.inputDataSource.next());\r\n    }\r\n\r\n    reset(): void {\r\n        this.inputDataSource.reset();\r\n    }\r\n}\r\n\r\n/**\r\n * Same for flatmap to deal with element -> stream mappings\r\n */\r\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\r\n\r\n    mapFunc: StreamMapper<T>;\r\n\r\n    inputDataSource: IStreamDataSource<T>;\r\n\r\n    /**\r\n     * the currently active stream\r\n     * coming from an incoming element\r\n     * once the end of this one is reached\r\n     * it is swapped out by another one\r\n     * from the next element\r\n     */\r\n    activeDataSource: IStreamDataSource<S>;\r\n\r\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\r\n        this.mapFunc = func;\r\n        this.inputDataSource = parent;\r\n    }\r\n\r\n    hasNext(): boolean {\r\n        return this.resolveCurrentNext() || this.resolveNextNext();\r\n    }\r\n\r\n    private resolveCurrentNext() {\r\n        let next = false;\r\n        if (this.activeDataSource) {\r\n            next = this.activeDataSource.hasNext();\r\n        }\r\n        return next;\r\n    }\r\n\r\n    private resolveNextNext() {\r\n        let next = false;\r\n        while (!next && this.inputDataSource.hasNext()) {\r\n            let mapped =  this.mapFunc(this.inputDataSource.next());\r\n            if(Array.isArray(mapped)) {\r\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\r\n            } else {\r\n                this.activeDataSource = mapped;\r\n            }\r\n            next = this.activeDataSource.hasNext();\r\n        }\r\n        return next;\r\n    }\r\n\r\n    next(): S {\r\n        return this.activeDataSource.next();\r\n    }\r\n\r\n    reset(): void {\r\n        this.inputDataSource.reset();\r\n    }\r\n}\r\n\r\n/**\r\n * For the time being we only need one collector\r\n * a collector which collects a stream back into arrays\r\n */\r\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\r\n    private data: Array<S> = [];\r\n\r\n    collect(element: S) {\r\n        this.data.push(element);\r\n    }\r\n\r\n    get finalValue(): Array<S> {\r\n        return this.data;\r\n    }\r\n}\r\n\r\n/**\r\n * collects an assoc stream back to an assoc array\r\n */\r\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, {[key:string]:S}> {\r\n\r\n    finalValue: {[key:string]:any} = {};\r\n\r\n    collect(element: [string, S] | string) {\r\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\r\n    }\r\n}\r\n\r\n/**\r\n * Form data collector for key value pair streams\r\n */\r\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\r\n    finalValue: FormData = new FormData();\r\n\r\n    collect(element: { key: string; value: any }) {\r\n        this.finalValue.append(element.key, element.value);\r\n    }\r\n}\r\n\r\n/**\r\n * Form data collector for DomQuery streams\r\n */\r\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\r\n    finalValue: FormData = new FormData();\r\n\r\n    collect(element: DomQuery) {\r\n        let toMerge = element.encodeFormElement();\r\n        if (toMerge.isPresent()) {\r\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Encoded String collector from dom query streams\r\n */\r\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\r\n\r\n    formData: [[string, string]] = <any>[];\r\n\r\n    collect(element: DomQuery) {\r\n        let toMerge = element.encodeFormElement();\r\n        if (toMerge.isPresent()) {\r\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\r\n        }\r\n    }\r\n\r\n    get finalValue(): string {\r\n        return Stream.of(...this.formData)\r\n            .map<string>(keyVal => keyVal.join(\"=\"))\r\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\r\n            .orElse(\"\").value;\r\n    }\r\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to you under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {CancellablePromise} from \"./Promise\";\r\nimport {Optional} from \"./Monad\";\r\n\r\n/**\r\n * Lang helpers crossported from the apache myfaces project\r\n */\r\nexport module Lang {\r\n    \r\n\r\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\r\n    /**\r\n     * helper function to savely resolve anything\r\n     * this is not an elvis operator, it resolves\r\n     * a value without exception in a tree and if\r\n     * it is not resolvable then an optional of\r\n     * a default value is restored or Optional.empty\r\n     * if none is given\r\n     *\r\n     * usage\r\n     * <code>\r\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\r\n     * </code>\r\n     *\r\n     * @param resolverProducer a lambda which can produce the value\r\n     * @param defaultValue an optional default value if the producer failes to produce anything\r\n     * @returns an Optional of the produced value\r\n     */\r\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\r\n        try {\r\n            let result = resolverProducer();\r\n            return Optional.fromNullable(result ?? defaultValue);\r\n        } catch (e) {\r\n            return Optional.absent;\r\n        }\r\n    }\r\n\r\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\r\n        try {\r\n            let result = resolverProducer();\r\n            return Optional.fromNullable(result ?? defaultValue());\r\n        } catch (e) {\r\n            return Optional.absent;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * String to array function performs a string to array transformation\r\n     * @param {String} it the string which has to be changed into an array\r\n     * @param {RegExp} splitter our splitter reglar expression\r\n     * @return a trimmed array of the splitted string\r\n     */\r\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\r\n\r\n        let ret = [];\r\n        it.split(splitter).forEach((element => {\r\n            ret.push(trim(element));\r\n        }));\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * hyperfast trim\r\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\r\n     * crossported from dojo\r\n     */\r\n    export function trim(str: string): string {\r\n        str = str.replace(/^\\s\\s*/, '');\r\n        let ws = /\\s/, i = str.length;\r\n\r\n        while (ws.test(str.charAt(--i))) {\r\n            //do nothing\r\n        }\r\n        return str.slice(0, i + 1);\r\n    }\r\n\r\n    /**\r\n     * generic object arrays like dom definitions to array conversion method which\r\n     * transforms any object to something array like\r\n     * @param obj\r\n     * @param offset\r\n     * @param pack\r\n     * @returns an array converted from the object\r\n     */\r\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\r\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\r\n            return pack ?? null;\r\n        }\r\n        //since offset is numeric we cannot use the shortcut due to 0 being false\r\n        //special condition array delivered no offset no pack\r\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\r\n\r\n        return pack.concat(Array.prototype.slice.call(obj, offset));\r\n    }\r\n\r\n    /**\r\n     * equalsIgnoreCase, case insensitive comparison of two strings\r\n     *\r\n     * @param source\r\n     * @param destination\r\n     */\r\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\r\n        let finalSource = source ?? \"___no_value__\";\r\n        let finalDest = destination ?? \"___no_value__\";\r\n\r\n        //in any other case we do a strong string comparison\r\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\r\n    }\r\n\r\n    /*\r\n     * Promise wrappers for timeout and interval\r\n     */\r\n    export function timeout(timeout: number): CancellablePromise {\r\n        let handler: any = null;\r\n        return new CancellablePromise((apply: Function, reject: Function) => {\r\n            handler = setTimeout(() => apply(), timeout);\r\n        }, () => {\r\n            if (handler) {\r\n                clearTimeout(handler);\r\n                handler = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    export function interval(timeout: number): CancellablePromise {\r\n        let handler: any = null;\r\n        return new CancellablePromise((apply: Function, reject: Function) => {\r\n            handler = setInterval(() => {\r\n                apply();\r\n            }, timeout);\r\n        }, () => {\r\n            if (handler) {\r\n                clearInterval(handler);\r\n                handler = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * runtime type assertion\r\n     *\r\n     * @param probe the probe to be tested for a type\r\n     * @param theType the type to be tested for\r\n     */\r\n    export function assertType(probe: any, theType: any): boolean {\r\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\r\n    }\r\n\r\n    /**\r\n     * Backported from dojo\r\n     * a failsafe string determination method\r\n     * (since in javascript String != \"\" typeof alone fails!)\r\n     * @param it {|Object|} the object to be checked for being a string\r\n     * @return true in case of being a string false otherwise\r\n     */\r\n    export function isString(it?: any): boolean {\r\n        //\tsummary:\r\n        //\t\tReturn true if it is a String\r\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\r\n    }\r\n\r\n    export function isFunc(it: any): boolean {\r\n        return it instanceof Function || typeof it === \"function\";\r\n    }\r\n\r\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n    // license https://creativecommons.org/licenses/by-sa/2.5/\r\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\r\n        if (target == null) { // TypeError if undefined or null\r\n            throw new TypeError('Cannot convert undefined or null to object');\r\n        }\r\n\r\n        let to = Object(target);\r\n        if(Object.assign) {\r\n            theArgs.forEach(item => Object.assign(to, item));\r\n            return to;\r\n        }\r\n\r\n        theArgs.forEach(item => {\r\n            let nextSource = item;\r\n            if (nextSource != null) { // Skip over if undefined or null\r\n                for (let nextKey in nextSource) {\r\n                    // Avoid bugs when hasOwnProperty is shadowed\r\n                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\r\n                        to[nextKey] = nextSource[nextKey];\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return to;\r\n    }\r\n}\r\n\r\n","import {Optional} from \"./Monad\";\r\n\r\nexport enum PromiseStatus {\r\n    PENDING, FULLFILLED, REJECTED\r\n}\r\n\r\nexport interface IPromise {\r\n    then(executorFunc: (val: any) => any): IPromise;\r\n\r\n    catch(executorFunc: (val: any) => any): IPromise\r\n\r\n    finally(executorFunc: () => void): IPromise;\r\n\r\n}\r\n\r\n/**\r\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\r\n * for systems which do not have a promise implemented\r\n * Note, although an internal state is kept, this is sideffect free since\r\n * is value is a function to operate on, hence no real state is kept internally, except for the then\r\n * and catch calling order\r\n */\r\nexport class Promise implements IPromise {\r\n\r\n    status = PromiseStatus.PENDING;\r\n    protected allFuncs: Array<any> = [];\r\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\r\n\r\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\r\n        //super(executor);\r\n        this.value = executor;\r\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\r\n    }\r\n\r\n    static all(...promises: Array<IPromise>): IPromise {\r\n\r\n        let promiseCnt = 0;\r\n        let myapply: Function;\r\n\r\n        let myPromise = new Promise((apply: Function, reject: Function) => {\r\n            myapply = apply;\r\n        });\r\n        let executor = () => {\r\n            promiseCnt++;\r\n\r\n            if (promises.length == promiseCnt) {\r\n                myapply();\r\n            }\r\n        };\r\n        (<any>executor).__last__ = true;\r\n\r\n        for (let cnt = 0; cnt < promises.length; cnt++) {\r\n            promises[cnt].finally(executor);\r\n        }\r\n        return myPromise;\r\n    }\r\n\r\n    static race(...promises: Array<IPromise>): IPromise {\r\n\r\n        let promiseCnt = 0;\r\n        let myapply: Function;\r\n        let myreject: Function;\r\n\r\n        let myPromise = new Promise((apply: Function, reject: Function) => {\r\n            myapply = apply;\r\n            myreject = reject;\r\n        });\r\n\r\n        let thenexecutor = (): IPromise => {\r\n            if (!!myapply) {\r\n                myapply();\r\n            }\r\n            myapply = null;\r\n            myreject = null;\r\n            return null;\r\n        };\r\n        (<any>thenexecutor).__last__ = true;\r\n\r\n        let catchexeutor = (): IPromise => {\r\n            if (!!myreject) {\r\n                myreject();\r\n            }\r\n            myreject = null;\r\n            myapply = null;\r\n            return null;\r\n        };\r\n        (<any>catchexeutor).__last__ = true;\r\n\r\n        for (let cnt = 0; cnt < promises.length; cnt++) {\r\n            promises[cnt].then(thenexecutor);\r\n            promises[cnt].catch(catchexeutor);\r\n        }\r\n        return myPromise;\r\n    }\r\n\r\n    static reject(reason: any): Promise {\r\n        let retVal = new Promise((resolve: any, reject: any) => {\r\n            //not really doable without a hack\r\n            if (reason instanceof Promise) {\r\n                reason.then((val: any) => {\r\n                    reject(val);\r\n                });\r\n            } else {\r\n                setTimeout(() => {\r\n                    reject(reason);\r\n                }, 1);\r\n            }\r\n        });\r\n\r\n        return retVal;\r\n    }\r\n\r\n    static resolve(reason: any): Promise {\r\n        let retVal = new Promise((resolve: any, reject: any) => {\r\n            //not really doable without a hack\r\n            if (reason instanceof Promise) {\r\n                reason.then((val) => resolve(val));\r\n            } else {\r\n                setTimeout(() => {\r\n                    resolve(reason);\r\n                }, 1);\r\n            }\r\n        });\r\n\r\n        return retVal;\r\n\r\n    }\r\n\r\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\r\n        this.allFuncs.push({\"then\": executorFunc});\r\n        if (catchfunc) {\r\n            this.allFuncs.push({\"catch\": catchfunc});\r\n        }\r\n        this.spliceLastFuncs();\r\n        return this;\r\n    }\r\n\r\n    catch(executorFunc: (val?: any) => void): Promise {\r\n        this.allFuncs.push({\"catch\": executorFunc});\r\n        this.spliceLastFuncs();\r\n        return this;\r\n    }\r\n\r\n    finally(executorFunc: () => void): Promise {\r\n        if ((<any>this).__reason__) {\r\n            (<any>this).__reason__.finally(executorFunc);\r\n            return;\r\n        }\r\n\r\n        this.allFuncs.push({\"finally\": executorFunc});\r\n        this.spliceLastFuncs();\r\n        return this;\r\n    }\r\n\r\n    protected resolve(val?: any) {\r\n\r\n        while (this.allFuncs.length) {\r\n            if (!this.allFuncs[0].then) {\r\n                break;\r\n            }\r\n            let fn = this.allFuncs.shift();\r\n\r\n            let funcResult = Optional.fromNullable(fn.then(val));\r\n\r\n            if (funcResult.isPresent()) {\r\n                funcResult = funcResult.flatMap();\r\n                val = funcResult.value;\r\n                if (val instanceof Promise) {\r\n                    //var func = (newVal: any) => {this.resolve(newVal)};\r\n                    //func.__last__  = true;\r\n                    //val.then(func);\r\n                    this.transferIntoNewPromise(val);\r\n\r\n                    return;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.appyFinally();\r\n        this.status = PromiseStatus.FULLFILLED;\r\n    }\r\n\r\n    protected reject(val?: any) {\r\n\r\n        while (this.allFuncs.length) {\r\n            if (this.allFuncs[0].finally) {\r\n                break;\r\n            }\r\n            var fn = this.allFuncs.shift();\r\n            if (fn.catch) {\r\n                var funcResult = Optional.fromNullable(fn.catch(val));\r\n                if (funcResult.isPresent()) {\r\n                    funcResult = funcResult.flatMap();\r\n                    val = funcResult.value;\r\n                    if (val instanceof Promise) {\r\n                        //val.then((newVal: any) => {this.resolve(newVal)});\r\n                        this.transferIntoNewPromise(val);\r\n                        return;\r\n                    }\r\n                    this.status = PromiseStatus.REJECTED;\r\n                    break;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.status = PromiseStatus.REJECTED;\r\n        this.appyFinally();\r\n    }\r\n\r\n    protected appyFinally() {\r\n        while (this.allFuncs.length) {\r\n            var fn = this.allFuncs.shift();\r\n            if (fn.finally) {\r\n                fn.finally();\r\n            }\r\n        }\r\n    }\r\n\r\n    private spliceLastFuncs() {\r\n        let lastFuncs = [];\r\n        let rest = [];\r\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\r\n            for (let key in this.allFuncs[cnt]) {\r\n                if (this.allFuncs[cnt][key].__last__) {\r\n                    lastFuncs.push(this.allFuncs[cnt]);\r\n                } else {\r\n                    rest.push(this.allFuncs[cnt]);\r\n                }\r\n            }\r\n        }\r\n        this.allFuncs = rest.concat(lastFuncs);\r\n    }\r\n\r\n    private transferIntoNewPromise(val: any) {\r\n        for (var cnt = 0; cnt < this.allFuncs.length; cnt++) {\r\n            for (let key in this.allFuncs[cnt]) {\r\n                val[key](this.allFuncs[cnt][key]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * a cancellable promise\r\n * a Promise with a cancel function, which can be cancellend any time\r\n * this is useful for promises which use cancellable asynchronous operations\r\n * note, even in a cancel state, the finally of the promise is executed, however\r\n * subsequent thens are not anymore.\r\n * The current then however is fished or a catch is called depending on how the outer\r\n * operation reacts to a cancel order.\r\n */\r\nexport class CancellablePromise extends Promise {\r\n\r\n    /**\r\n     * @param executor asynchronous callback operation which triggers the callback\r\n     * @param cancellator cancel operation, separate from the trigger operation\r\n     */\r\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\r\n        super(executor);\r\n        this.cancellator = cancellator;\r\n    }\r\n\r\n    cancel() {\r\n        this.status = PromiseStatus.REJECTED;\r\n        this.appyFinally();\r\n        //lets terminate it once and for all, the finally has been applied\r\n        this.allFuncs = [];\r\n    }\r\n\r\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\r\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\r\n    }\r\n\r\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\r\n        return <CancellablePromise>super.catch(executorFunc);\r\n    }\r\n\r\n    finally(executorFunc: () => void): CancellablePromise {\r\n        return <CancellablePromise>super.finally(executorFunc);\r\n    }\r\n\r\n    private cancellator = () => {\r\n    };\r\n}\r\n\r\n\r\n\r\n"],"sourceRoot":""}