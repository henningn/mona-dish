{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Monad","this","_value","fn","inval","result","mapped","map","Optional","super","flatMap","presentRunnable","absent","isAbsent","isPresent","elseValue","func","val","fromNullable","currentPos","cnt","length","currKey","keyVal","arrPos","arrayIndex","getClass","Array","getIfPresent","defaultVal","JSON","stringify","start","indexOf","end","parseInt","substring","resolver","e","ValueEmbedder","rootElem","valueKey","newVal","alternative","ConfigEntry","Config","root","instance","mergeMaps","other","overwrite","apply","getIf","keys","buildPath","slice","condition","parentVal","parentPos","alloc","arr","push","setVal","tempVal","Lang","_instance","resolverProducer","defaultValue","it","splitter","retArr","split","trim","offset","ret","len","str","ws","replace","test","charAt","arguments","String","Function","scope","method","maps","blockFilter","item","whitelistFilter","retVal","arrForEach","mixMaps","dest","src","obj","pack","finalOffset","finalPack","concat","callbackfn","startPos","startPosFinal","thisObj","convertedArr","objToArray","forEach","Error","arrIndexOf","element","fromIndex","pos","arrFinal","filter","args","argNames","UDEF","source","destination","toLowerCase","timeout","handler","reject","setTimeout","clearTimeout","setInterval","clearInterval","probe","theType","isString","ArrayStreamDataSource","dataPos","FilteredStreamDatasource","filterFunc","parent","filteredNext","inputDataSource","hasNext","next","reset","MappedStreamDataSource","mapFunc","FlatMapStreamDataSource","resolveCurrentNext","resolveNextNext","activeDataSource","ArrayCollector","data","FormDataCollector","finalValue","FormData","append","QueryFormDataCollector","toMerge","encodeFormElement","QueryFormStringCollector","formData","of","join","reduce","item1","item2","orElse","PromiseStatus","Promise","executor","status","PENDING","allFuncs","resolve","promises","myapply","promiseCnt","myPromise","__last__","finally","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","CancellablePromise","cancellator","Stream","_limits","dataSource","onElem","res","each","strmR","startVal","val1","Math","min","matches","comparator","newArr","sort","collector","collect","isLimitsReached","isEndOfArray","LazyStream","values","isOverLimits","nextFilter","max","el","stop","value1","value2","el1","el2","ElementAttribute","getAttribute","setAttribute","DEFAULT_JSF_WHITELIST","DomQuery","rootNode","foundElement","querySelectorAll","getAsElem","allElems","tagName","nodeName","elements","formElement","stream","orElseLazy","attr","disabled","childNodeArr","eachElem","childNodes","asArray","selector","document","byId","byTagName","code","globalEval","markup","domParser","saveResolve","DOMParser","parseFromString","doc","implementation","createHTMLDocument","lowerMarkup","includes","documentElement","innerHTML","body","index","defaults","node","parentNode","removeChild","nodes","id","includeRoot","clazz","hasIt","oldClass","oldClasses","found","hasClass","newClasses","firstElem","toMatch","prot","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","window","ownerDocument","matched","_mozMatchesSelector","nodeSelector","selectorStage","filterSelector","reArr","nonce","head","getElementsByTagName","script","createElement","type","newScriptElement","appendChild","elem","theItem","defer","charSet","xhr","XMLHttpRequest","open","setRequestHeader","send","readyState","responseText","toInsertParams","existingItem","existingElement","nextSibling","insertElem","insertBefore","lowerTagName","resolveItem","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","checked","attrName","runEmbeddedScripts","runEmbeddedCss","fromMarkup","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","insertAfter","runScripts","runCss","whilteListed","_Lang","finalScripts","execScrpt","itemType","equalsIgnoreCase","loadScriptEval","evalText","text","innerText","go","scriptElements","console","error","message","description","applyStyle","style","newSS","styleSheet","sheet","cssText","createTextNode","execCss","cDataBlock","fireEvent","listener","options","addEventListener","removeEventListener","eventName","nodeType","dispatchEvent","eventClass","event","createEvent","initEvent","synthetic","createEventObject","joinstr","textContent","text1","text2","target","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","files","inputValue","from","to","DomQueryCollector","DQ","XMLQuery","docType","parseXML","xml","saveResolveLazy","parser","ActiveXObject","async","contentType","loadXML","createIe11DomQueryShim","XMLSerializer","serializeToString","txt","parseType","XQ"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (\"undefined\" != typeof mapped && mapped != null && mapped.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n\n\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<T>(value?: T): Optional<T> {\n        return new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if(this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch(e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent =  ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if(!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<T>(value?: any, valueKey: string = \"value\"): ValueEmbedder<T> {\n        return new ValueEmbedder(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = (\"undefined\" != typeof arrPos) ? arrPos : -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    get shallowCopy(): Config {\n        return new Config(Lang.instance.mergeMaps([{}, this.value || {}]));\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true) {\n        for (let key in other.value) {\n            if (overwrite && key in this.value) {\n                this.apply(key).value = other.getIf(key).value;\n            } else if (!(key in this.value)) {\n                this.apply(key).value = other.getIf(key).value;\n            }\n        }\n    }\n\n    apply(...keys: Array<any>): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    applyIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\n        return condition ? this.apply(...keys) : {value: null};\n    }\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            if (arr.length < length) {\n                for (let cnt = arr.length; cnt < length; cnt++) {\n                    arr.push({});\n                }\n            }\n        };\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CancellablePromise} from \"./Promise\";\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport class Lang {\n\n    private static _instance: Lang;\n\n    static get instance() {\n        if (!Lang._instance) {\n            Lang._instance = new Lang();\n        }\n        return Lang._instance;\n    }\n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    static saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            if (\"undefined\" == typeof result || null == result) {\n                return Optional.fromNullable(defaultValue);\n            }\n            return Optional.fromNullable(result);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    static saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            if (\"undefined\" == typeof result || null == result) {\n                return Optional.fromNullable(defaultValue());\n            }\n            return Optional.fromNullable(result);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return an array of the splitted string\n     */\n    strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n\n        let retArr = it.split(splitter);\n        for (let cnt = 0; cnt < retArr.length; cnt++) {\n            retArr[cnt] = this.trim(retArr[cnt]);\n        }\n        return retArr;\n    }\n\n    arrToMap(arr: any[], offset: number = 0) {\n        var ret = new Array(arr.length);\n        var len = arr.length;\n        offset = (offset) ? offset : 0;\n        for (var cnt = 0; cnt < len; cnt++) {\n            ret[arr[cnt]] = cnt + offset;\n        }\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    /**\n     * hitch backported from dojo\n     * hitch allows to assign a function to a dedicated scope\n     * this is helpful in situations when function reassignments\n     * can happen\n     * (notably happens often in lazy xhr code)\n     *\n     * @param {Function} scope of the function to be executed in\n     * @param {Function} method to be executed, the method must be of type function\n     *\n     * @return whatever the executed method returns\n     *\n     */\n    hitch(scope: any, method: Function): Function {\n        return !scope ? method : function () {\n            return method.apply(scope, arguments || []);\n        }; // Function\n    }\n\n    /**\n     * simplified merge maps which basically produces\n     * a final merged map from left to right\n     * the function is sideffect free\n     * @param maps\n     */\n    mergeMaps(maps: { [key: string]: any }[],\n              overwrite: boolean = true,\n              blockFilter: Function = (item) => false,\n              whitelistFilter: Function = (item) => true): { [key: string]: any } {\n        let retVal = {};\n        this.arrForEach(maps, (item: { [key: string]: any }) => {\n            this.mixMaps(retVal, item, overwrite, blockFilter, whitelistFilter);\n        });\n        return retVal;\n    }\n\n    /**\n     * Helper function to merge two maps\n     * into one\n     * @param {Object} dest the destination map\n     * @param {Object} src the source map\n     * @param {boolean} overwrite if set to true the destination is overwritten if the keys exist in both maps\n     * @param blockFilter\n     * @param whitelistFilter\n     **/\n    mixMaps<T>(dest: { [key: string]: T },\n               src: { [key: string]: T },\n               overwrite: boolean,\n               blockFilter?: Function,\n               whitelistFilter?: Function): { [key: string]: T } {\n        let UNDEF = \"undefined\";\n        for (let key in src) {\n            if (!src.hasOwnProperty(key)) continue;\n            if (blockFilter && blockFilter(key)) {\n                continue;\n            }\n            if (whitelistFilter && !whitelistFilter(key)) {\n                continue;\n            }\n            if (!overwrite) {\n                /**\n                 *we use exists instead of booleans because we cannot rely\n                 *on all values being non boolean, we would need an getIf\n                 *operator in javascript to shorten this :-(\n                 */\n                dest[key] = (UNDEF != typeof dest[key]) ? dest[key] : src[key];\n            } else {\n                dest[key] = (UNDEF != typeof src[key]) ? src[key] : dest[key];\n            }\n        }\n        return dest;\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    objToArray<T>(obj: any, offset?: number, pack?: Array<T>): Array<T> {\n        if (!obj) {\n            return pack || null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if (obj instanceof Array && !offset && !pack) return obj;\n        let finalOffset = ('undefined' != typeof offset || null != offset) ? offset : 0;\n        let finalPack = pack || [];\n        try {\n            return finalPack.concat(Array.prototype.slice.call(obj, finalOffset));\n        } catch (e) {\n            //ie8 (again as only browser) delivers for css 3 selectors a non convertible object\n            //we have to do it the hard way\n            //ie8 seems generally a little bit strange in its behavior some\n            //objects break the function is everything methodology of javascript\n            //and do not implement apply call, or are pseudo arrays which cannot\n            //be sliced\n            for (let cnt = finalOffset; cnt < obj.length; cnt++) {\n                finalPack.push(obj[cnt]);\n            }\n            return finalPack;\n        }\n    }\n\n    /**\n     * foreach implementation utilizing the\n     * ECMAScript wherever possible\n     * with added functionality\n     *\n     * @param arr the array to filter\n     * @param callbackfn\n     * @param startPos\n     * @param scope the closure to apply the function to, with the syntax defined by the ecmascript functionality\n     * function (element<,key, array>)\n     * <p />\n     * optional params\n     * <p />\n     * <ul>\n     *      <li>param startPos (optional) the starting position </li>\n     *      <li>param scope (optional) the scope to apply the closure to  </li>\n     * </ul>\n     */\n    arrForEach<T>(arr: any, callbackfn: (value: T, index: number, array: T[]) => void, startPos?: number, scope?: Function) {\n        if (!arr || !arr.length) return;\n        let startPosFinal = startPos || 0;\n        let thisObj = scope;\n        //check for an existing foreach mapping on array prototypes\n        //IE9 still does not pass array objects as result for dom ops\n        let convertedArr: Array<T> = this.objToArray<T>(arr);\n        (startPos) ? convertedArr.slice(startPosFinal).forEach(callbackfn, thisObj) : convertedArr.forEach(callbackfn, thisObj);\n    }\n\n    /**\n     * checks if an array contains an element\n     * @param {Array} arr   array\n     * @param {String} str string to check for\n     */\n    contains<T>(arr: T[], str: string) {\n        if (!arr || !str) {\n            throw Error(\"null value on arr or str not allowed\");\n        }\n        return this.arrIndexOf(arr, str) != -1;\n    }\n\n    /**\n     * adds a EcmaScript optimized indexOf to our mix,\n     * checks for the presence of an indexOf functionality\n     * and applies it, otherwise uses a fallback to the hold\n     * loop method to determine the index\n     *\n     * @param arr the array\n     * @param element the index to search for\n     * @param fromIndex\n     */\n    arrIndexOf<T>(arr: any, element: T, fromIndex ?: number): number {\n        if (!arr || !arr.length) return -1;\n        let pos = fromIndex || 0;\n        arr = this.objToArray<T>(arr);\n        return arr.indexOf(element, pos);\n    }\n\n    /**\n     * filter implementation utilizing the\n     * ECMAScript wherever possible\n     * with added functionality\n     *\n     * @param arr the array to filter\n     * @param scope the closure to apply the function to, with the syntax defined by the ecmascript functionality\n     * function (element<,key, array>)\n     * <p />\n     * additional params\n     * <ul>\n     *  <li> startPos (optional) the starting position</li>\n     *  <li> scope (optional) the scope to apply the closure to</li>\n     * </ul>\n     */\n    arrFilter<T>(arr: any, callbackfn: (value: T, index?: number, array?: T[]) => boolean, startPos ?: number, scope ?: Function) {\n        if (!arr || !arr.length) return [];\n        let arrFinal = this.objToArray<T>(arr);\n        return ((startPos) ? arrFinal.slice(startPos).filter(callbackfn, scope) : arrFinal.filter(callbackfn, scope));\n    }\n\n    /**\n     * helper to automatically apply a delivered arguments map or array\n     * to its destination which has a field \"_\"<key> and a full field\n     *\n     * @param dest the destination object\n     * @param args the arguments array or map\n     * @param argNames the argument names to be transferred\n     */\n    /**\n     * helper to automatically apply a delivered arguments map or array\n     * to its destination which has a field \"_\"<key> and a full field\n     *\n     * @param dest the destination object\n     * @param args the arguments array or map\n     * @param argNames the argument names to be transferred\n     */\n    applyArgs<T>(dest: any, args: { [key: string]: T } | Array<T>, argNames?: Array<string>): any {\n        let UDEF = 'undefined';\n        if (argNames) {\n            for (let cnt = 0; cnt < (<Array<T>>args).length; cnt++) {\n                //dest can be null or 0 hence no shortcut\n                if (UDEF != typeof dest[\"_\" + argNames[cnt]]) {\n                    dest[\"_\" + argNames[cnt]] = args[cnt];\n                }\n                if (UDEF != typeof dest[argNames[cnt]]) {\n                    dest[argNames[cnt]] = args[cnt];\n                }\n            }\n        } else {\n            for (let key in args) {\n                if (!args.hasOwnProperty(key)) continue;\n                if (UDEF != typeof dest[\"_\" + key]) {\n                    dest[\"_\" + key] = args[key];\n                }\n                if (UDEF != typeof dest[key]) {\n                    dest[key] = args[key];\n                }\n            }\n        }\n        return dest;\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    equalsIgnoreCase(source: string, destination: string): boolean {\n        //either both are not set or null\n        if (!source && !destination) {\n            return true;\n        }\n        //source or dest is set while the other is not\n        if (!source || !destination) return false;\n        //in any other case we do a strong string comparison\n        return source.toLowerCase() === destination.toLowerCase();\n    }\n\n    /*\n     * Promise wrappers for timeout and interval\n     */\n    timeout(timeout: number): CancellablePromise {\n        let handler: any = null;\n        return new CancellablePromise((apply: Function, reject: Function) => {\n            handler = setTimeout(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearTimeout(handler);\n                handler = null;\n            }\n        });\n    }\n\n    interval(timeout: number): CancellablePromise {\n        let handler: any = null;\n        return new CancellablePromise((apply: Function, reject: Function) => {\n            handler = setInterval(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearInterval(handler);\n                handler = null;\n            }\n        });\n    }\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    public assertType(probe: any, theType: any): boolean {\n        return this.isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present\n     */\n    hasNext(): boolean;\n\n    /**\n     * false if not\n     */\n    next(): T;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n}\n\n/**\n * an intermediate data source wich prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    filteredNext: T = null;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this.filteredNext = next;\n                return true;\n            } else {\n                this.filteredNext = null;\n            }\n        }\n        return this.filteredNext != null;\n\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let ret = this.filteredNext;\n        this.filteredNext = null;\n        //We have to call hasNext, to roll another\n        //prefetch in case someone runs next\n        //sequentially without calling hasNext\n        this.hasNext();\n        return ret;\n    }\n\n    reset(): void {\n        this.filteredNext = null;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveCurrentNext() || this.resolveNextNext();\n    }\n\n    private resolveCurrentNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            this.activeDataSource = this.mapFunc(this.inputDataSource.next());\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        return this.activeDataSource.next();\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","import {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //var func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            var fn = this.allFuncs.shift();\n            if (fn.catch) {\n                var funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            var fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (var cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T> = (val1: T, val2: T) => T;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce(fn: Reducable<T>, startVal: T): Optional<T>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce(fn: Reducable<T>, startVal: T = null): Optional<T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1 = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = 0;\n        this._limits = -1;\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamProducer>(fn: StreamProducer): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce(fn: Reducable<T>, startVal: T = null): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {ICollector, IStreamDataSource} from \"./SourcesCollectors\";\n\n// @ts-ignore supression needed here due to fromnullable\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @param src\n * @constructor\n */\nconst DEFAULT_JSF_WHITELIST = (src: string) => {\n    return (src.indexOf(\"ln=scripts\") == -1 &&\n        src.indexOf(\"ln=javax.faces\") == -1) ||\n        (src.indexOf(\"/jsf.js\") == -1 &&\n            src.indexOf(\"/jsf-uncompressed.js\") == -1);\n};\n\ninterface IDomQuery {\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The the value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string>;\n    /**\n     * the underlying form elements as domquery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded (highest level)\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string>;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery): void;\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the domquery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n    /**\n     * all parents with TagName\n     * @param tagName\n     */\n    parents(tagName: string): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another domquery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinstr?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinstr?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the subnodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery> {\n\n    static absent = new DomQuery();\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (Lang.instance.isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else if (Lang.instance.isString(rootNode[cnt])) {\n                    let result = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    this.rootNode.push(...result.values);\n\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ValueEmbedder<string>(this.getAsElem(0).value, \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder<string>(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get elements(): DomQuery {\n        let elements: Array<DomQuery> = this.each((item: DomQuery) => {\n            let formElement: HTMLFormElement = <HTMLFormElement>item.value.value;\n            return formElement.elements ? formElement.elements : null;\n        }).stream\n            .filter(item => !!item).value;\n\n        let res = new DomQuery(...elements);\n\n        return res\n            .orElseLazy(() => this.querySelectorAll(\"form\").elements)\n            .orElseLazy(() => this.querySelectorAll(\"input, select, textarea\"));\n    }\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return !!this.attr(\"disabled\").value;\n    }\n\n    set disabled(disabled: boolean) {\n        this.attr(\"disabled\").value = disabled + \"\";\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(Lang.instance.objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        let ret: Array<DomQuery> = [];\n        this.each((item) => {\n            ret.push(item);\n        });\n        return ret;\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        return new DomQuery(document).querySelectorAll(selector);\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element): DomQuery {\n        if (Lang.instance.isString(selector)) {\n            return new DomQuery(document).byId(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (Lang.instance.isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string): DomQuery {\n        return new DomQuery(document).globalEval(code);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n        let domParser: DOMParser = Lang.saveResolve(() => new DOMParser()).value;\n        if (domParser) {\n            let document = domParser.parseFromString(markup, \"text/html\");\n            return new DomQuery(document);\n        } else {\n            //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n            const doc = document.implementation.createHTMLDocument(\"\");\n            markup = Lang.instance.trim(markup);\n            let lowerMarkup = markup.toLowerCase();\n            if (lowerMarkup.includes('<!doctype') ||\n                lowerMarkup.includes('<html') ||\n                lowerMarkup.includes('<head') || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\n                lowerMarkup.includes('<body')) {\n                doc.documentElement.innerHTML = markup;\n                return new DomQuery(doc.documentElement);\n            } else {\n                doc.body.innerHTML = markup;\n                return new DomQuery(...<Array<Element>>Lang.instance.objToArray(doc.body.childNodes));\n            }\n        }\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery {\n        if (this.rootNode.length == 0) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt].querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(Lang.instance.objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        for (let cnt = 0; includeRoot && cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].id == id) {\n                res.push(new DomQuery(this.rootNode[cnt]));\n            }\n        }\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery {\n        let res = [];\n        for (let cnt = 0; includeRoot && cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].tagName == tagName) {\n                res.push(new DomQuery(this.rootNode[cnt]));\n            }\n        }\n        res = res.concat(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n\n        this.each((item) => {\n            let oldClass = item.attr(\"class\").value || \"\";\n            if (oldClass.toLowerCase().indexOf(clazz.toLowerCase()) == -1) {\n                return;\n            } else {\n                let oldClasses = oldClass.split(/\\s+/gi);\n                let found = false;\n                for (let cnt = 0; cnt < oldClasses.length && !found; cnt++) {\n                    found = oldClasses[cnt].toLowerCase() == clazz.toLowerCase();\n                }\n                hasIt = hasIt || found;\n                if (hasIt) {\n                    return false;\n                }\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.each((item) => {\n            let oldClass = item.attr(\"class\").value || \"\";\n            if (!this.hasClass(clazz)) {\n                item.attr(\"class\").value = Lang.instance.trim(oldClass + \" \" + clazz);\n                return;\n            }\n        });\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.each((item) => {\n            if (this.hasClass(clazz)) {\n                let oldClass = item.attr(\"class\").value || \"\";\n                let newClasses = [];\n                let oldClasses = oldClass.split(/\\s+/gi);\n                for (let cnt = 0; cnt < oldClasses.length; cnt++) {\n                    if (oldClasses[cnt].toLowerCase() != clazz.toLowerCase()) {\n                        newClasses.push(oldClasses[cnt]);\n                    }\n                }\n                item.attr(\"class\").value = newClasses.join(\" \");\n            }\n        });\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean {\n        return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\n    }\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.getAsElem(0).isPresent() ? Optional.fromNullable(this.getAsElem(0).value.innerHTML) : Optional.absent;\n        }\n        if (this.getAsElem(0).isPresent()) {\n            this.getAsElem(0).value.innerHTML = inval;\n        }\n        return this;\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || (<any>window).ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n        //return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    matchesSelector(selector: string): boolean {\n        this.eachElem(item => {\n            if (!this._mozMatchesSelector(item, selector)) {\n                return false;\n            }\n        });\n        return true;\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.get(cnt), cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery) {\n        this.eachElem((item) => {\n            let value1: Element = <Element>elem.getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: (theItem: any) => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string) {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.send(null);\n\n        //since we are synchronous we do it after not with onReadyStateChange\n\n        if (xhr.readyState == 4) {\n            if (xhr.status == 200) {\n                //defer also means we have to process after the ajax response\n                //has been processed\n                //we can achieve that with a small timeout, the timeout\n                //triggers after the processing is done!\n                if (!defer) {\n                    this.globalEval(xhr.responseText.replace(\"\\n\", \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n                } else {\n                    //TODO not ideal we maybe ought to move to something else here\n                    //but since it is not in use yet, it is ok\n                    setTimeout(function () {\n                        this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                    }, defer);\n                }\n            } else {\n                throw Error(xhr.responseText);\n            }\n        } else {\n            throw Error(\"Loading of script \" + src + \" failed \");\n        }\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        let processed = [];\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        let retArr = [];\n        const lowerTagName = tagName.toLowerCase();\n        let resolveItem = (item: Element) => {\n\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName) {\n                retArr.push(item);\n            }\n\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode) {\n                item = <Element>item.parentNode;\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = Lang.instance.objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attr\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery {\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n\n        let insertAdditionalItems = [];\n\n        for (let cnt = 1; cnt < nodes.length; cnt++) {\n            insertAdditionalItems.push(nodes.get(cnt));\n            this.rootNode.push(nodes.get(cnt).getAsElem(0).value);\n        }\n\n        res.push(DomQuery.byId(replaced).insertAfter(...insertAdditionalItems));\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean = DEFAULT_JSF_WHITELIST): DomQuery {\n        let _Lang = Lang.instance,\n            finalScripts = [],\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && _Lang.equalsIgnoreCase(tagName, \"script\") &&\n                    (itemType === \"\" || _Lang.equalsIgnoreCase(itemType, \"text/javascript\") ||\n                        _Lang.equalsIgnoreCase(itemType, \"javascript\") ||\n                        _Lang.equalsIgnoreCase(itemType, \"text/ecmascript\") ||\n                        _Lang.equalsIgnoreCase(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            if (finalScripts.length) {\n                                //script source means we have to eval the existing\n                                //scripts before running the include\n                                this.globalEval(finalScripts.join(\"\\n\"));\n\n                                finalScripts = [];\n                            }\n                            this.loadScriptEval(src, 0, \"UTF-8\");\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        //TODO this probably needs to be changed due to our new parsing structures\n                        //probably not needed anymore\n                        let evalText = item.text || item.innerText || item.innerHTML;\n                        let go = true;\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 1) == \" \") {\n                                evalText = evalText.substring(1);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push(evalText);\n\n                    }\n                }\n            };\n        try {\n            let scriptElements = this.querySelectorAll(\"script\");\n            if (scriptElements == null) return;\n            for (let cnt = 0; cnt < scriptElements.length; cnt++) {\n                execScrpt(scriptElements.getAsElem(cnt).value);\n            }\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        } catch (e) {\n            if (window.console && window.console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n    }\n\n    runCss(): DomQuery {\n\n        const UDEF = \"undefined\",\n            // _RT = this._RT,\n            _Lang = Lang.instance,\n            applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ? newSS.sheet : (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") || \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") || \"text/css\");\n\n                if (UDEF != typeof styleSheet.cssText) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n\n            },\n\n            execCss = (item: Element) => {\n                const equalsIgnoreCase = _Lang.equalsIgnoreCase;\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: NodeList = item.childNodes;\n                    if (childNodes) {\n                        const len = childNodes.length;\n                        for (let cnt = 0; cnt < len; cnt++) {\n                            innerText.push((<Element>childNodes[cnt]).innerHTML || (<CharacterData>childNodes[cnt]).data);\n                        }\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = this.querySelectorAll(\"link, style\");\n        if (scriptElements == null) return;\n        for (let cnt = 0; cnt < scriptElements.length; cnt++) {\n            let element: any = scriptElements.getAsElem(cnt);\n            execCss(element.value);\n        }\n\n        return this;\n    }\n\n    get cDATAAsString(): string {\n        let cDataBlock = [];\n        // response may contain several blocks\n        this.each((item: DomQuery) => {\n            item.childNodes.eachElem((node: Node) => {\n                cDataBlock.push(<string>(<any>node).data);\n            });\n        });\n        return cDataBlock.join('');\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => {\n            node.addEventListener(type, listener, options);\n        });\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => {\n            node.removeEventListener(type, listener, options);\n        });\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            var doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                var eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                var event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (!element.name) {//no name, no encoding\n                return;\n            }\n            let name = element.name.orElse(\"__none__\").value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.apply(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if ((tagName != \"select\" && elemType != \"button\"\n                    && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n                    && ((elemType != \"checkbox\" && elemType != \"radio\") || (<any>element).checked)) {\n                    let files: any = (<any>element.value).files;\n                    if (files && files.length) {\n                        //xhr level2\n                        target.apply(name).value = files[0];\n                    } else {\n                        target.apply(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: SupportedType = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any> {\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if(xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new window.DOMParser(),\n                (): DOMParser =>  createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, docType);\n        };\n\n        if(Lang.instance.isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            if (typeof (<any>window).XMLSerializer != \"undefined\") {\n                ret.push(new (<any>window).XMLSerializer().serializeToString(node));\n            } else if (typeof node.xml != \"undefined\") {\n                ret.push(node.xml);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new  XMLQuery(txt);\n    }\n    static parseHTML(txt: string): XMLQuery {\n        return new  XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: SupportedType = \"text/xml\"): XMLQuery {\n        return new  XMLQuery(txt,parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","export {DomQuery, ElementAttribute, DomQueryCollector, DQ} from \"./DomQuery\";\nexport {Lang} from \"./Lang\";\nexport {Config, Monad, IValueHolder, IFunctor, IMonad, IIdentity, Optional, ValueEmbedder} from \"./Monad\";\nexport {CancellablePromise, Promise, IPromise, PromiseStatus} from \"./Promise\";\nexport {XMLQuery, XQ} from \"./XmlQuery\";\nexport {Stream, LazyStream, IteratableConsumer, IStream} from \"./Stream\";\nexport {\n    ArrayStreamDataSource,\n    MappedStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    QueryFormStringCollector,\n    IStreamDataSource,\n    ICollector,\n    ArrayCollector,\n    FormDataCollector,\n    QueryFormDataCollector\n} from \"./SourcesCollectors\";\n\n\n"],"sourceRoot":""}