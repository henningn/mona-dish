{"version":3,"file":"index.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/CryptoExtensions.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Messaging.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/TagBuilder.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///external commonjs \"rxjs\"","webpack:///webpack/bootstrap","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/index.ts"],"sourcesContent":["import {Crypto, Hash} from \"./Messaging\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {LazyStream} from \"./Stream\";\n\n/*\n * Some crypto implementations which might come in handy\n */\n\n\n/**\n * basic json stringify encryption impl\n * this does not really full encryption except for a standard json stringyfywith an encapsulation json\n *\n * the return value resembles:\n * <pre>\n *     {\n *         encryptedData: <data as string>\n *     }\n * </pre>\n */\nexport class JSONCrypto implements Crypto {\n    decode(data: any): any {\n        if (data?.encryptedData) {\n            return JSON.parse(data.encryptedData);\n        }\n        return data;\n    }\n\n    encode(data: any) {\n        return {\n            encryptedData: JSON.stringify(data)\n        }\n    }\n}\n\n\n/**\n * a class with  timeout functionality which blocks decodes after a certain period of time\n * if the message is not decoded by then\n * We use hash as identifier generation after encryption to make sure\n * a trace was possible\n *\n * The idea behind this is to have a generic wrapper which allows messages with dynamic encryption\n * where keys/salts only exist for a certain period of time before expiring!\n * That way someone who implements such a scheme does not have to take care about the bookeeping mechanisms!\n * Or you can use crypto mechanisms which do not have expiring keys and still expire them automatically\n *\n * I will leave it up to the system integrator to provide a rotating crypto class, because this is highly\n * implementation dependent. But it helps to have a wrapper!\n */\nexport class ExpiringCrypto implements Crypto {\n\n    private static MAX_GC_CYCLES = 10;\n    private gcCycleCnt = 0;\n    private storedMessages: { [key: string]: number } = {};\n    private lastCall = 0;\n\n    /**\n     * @param timeout timeout in miliseconds until a message is expired\n     * @param parentCrypto the embedded decorated crypto algorithm\n     * @param hashSum hashshum implementation to generate a hash\n     */\n    constructor(private timeout: number, private parentCrypto: Crypto, private hashSum: Hash) {\n\n    }\n\n    /**\n     * decode implementation with a timeout hook install\n     * @param data\n     */\n    decode(data: any): any {\n        //if ((this.gcCycleCnt++ % ExpiringCrypto.MAX_GC_CYCLES) === 0) {\n\n        const currTime = new Date().getTime();\n        if(this.gcLimitReached(currTime)) {\n            this.storedMessages = LazyStream\n                .ofAssoc(this.storedMessages)\n                .filter(data => data[1] >= currTime)\n                .collect(new AssocArrayCollector());\n        }\n        this.lastCall = currTime;\n\n\n        let rotatingEncoded = this.hashSum.encode(data);\n        if (!this.storedMessages?.[rotatingEncoded.toString()]) {\n            throw Error(\"An item was tried to be decryted which either was expired or invalid\");\n        }\n        return this.parentCrypto.decode(data);\n    }\n\n    /**\n     * trigger function to determine whether the gc needs to cycle again, this is either time or call based\n     * the gc itself collects only on expiration dates\n     * The idea is to run this operation only occasionally because it is costly\n     * We also could have used timeouts etc.. but those would need shutdown/destroy cleanups\n     *\n     * @param currTime\n     * @private\n     */\n    private gcLimitReached(currTime: number) {\n        return (this.lastCall + this.timeout) < currTime || ((++this.gcCycleCnt) % ExpiringCrypto.MAX_GC_CYCLES == 0);\n    }\n\n    /**\n     * encode with a timeout hook installed\n     * calls the encode of the delegated object\n     *\n     * @param data\n     */\n    encode(data: any): any {\n        let encoded = this.parentCrypto.encode(data);\n        //ok use the hashsum really only to store expirations, theoretically there could be a second message which does not invalidate the first one\n        //but this is very unlikely unless a message is sent over and over again, in this case we have a timeout extension anyway!\n        let rotatingEncoded = this.hashSum.encode(encoded);\n        this.storedMessages[rotatingEncoded.toString()] = (new Date().getTime()) + this.timeout;\n        return encoded;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {ArrayCollector, ICollector, IStreamDataSource} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\nimport objToArray = Lang.objToArray;\nimport isString = Lang.isString;\nimport equalsIgnoreCase = Lang.equalsIgnoreCase;\n//import {observable, Observable, Subscriber} from \"rxjs\";\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout ?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval ?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum Submittables {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait until a certain condition is reached\n * depening on the browser this uses either the mutation observer or a semi compatible interval as fallback\n * @param condition\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = { attributes: true, childList: true, subtree: true, timeout: 500, interval: 100 }): Promise<DomQuery> {\n    const ret = new Promise<DomQuery>((success, error) => {\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n        if('undefined' != typeof window.MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                return error(MUT_ERROR);\n            }, options.timeout);\n            const callback: MutationCallback = (mutationList: MutationRecord[], observer: MutationObserver) => {\n                const found = new DomQuery(mutationList.map((mut: MutationRecord) => mut.target)).first(condition);\n                if(found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    success(found);\n                }\n            }\n\n            const observer = new window.MutationObserver(callback);\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {... options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { //fallback for legacy browsers without mutation observer\n            //we do the same but for now ignore the options on the dom query\n            let interval = setInterval(() => {\n                let found = null;\n                if(options.childList) {\n                    found = (condition(root)) ? root:  root.childNodes.first(condition);\n                } else if(options.subtree) {\n                    found = (condition(root)) ? root: root.querySelectorAll(\" * \").first(condition);\n                } else {\n                    found = (condition(root)) ? root: DomQuery.absent;\n                }\n                if(found.isPresent()) {\n                    if(timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                        success(found);\n                    }\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if(interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n    return ret;\n}\n\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute,T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any> new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @param src\n * @constructor\n */\nconst DEFAULT_WHITELIST = (src: string) => {\n    return true;\n\n};\n\ninterface IDomQuery {\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The the value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n    /**\n     * the underlying form elements as domquery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded (highest level)\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchevent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery): void;\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the domquery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n    /**\n     * all parents with TagName\n     * @param tagName\n     */\n    parents(tagName: string): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another domquery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinstr?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinstr?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the subnodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    //observable: Observable<DomQuery>;\n\n    //observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length ) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if(!rootNode[cnt]) {\n                    //we skip possible null entries which can happen in\n                    //certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                    continue;\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        //a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow doms\n     * separately and runs the query on earch shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if(queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if(shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if(shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        //filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => {\n            return item != null\n        })\n            .map(item => {\n                return DomQuery.byId(item)\n            }).collect(new ArrayCollector()));\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.indexOf('<!doctype') != -1 ||\n            lowerMarkup.indexOf('<html') != -1 ||\n            lowerMarkup.indexOf('<head') != -1 || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\n            lowerMarkup.indexOf('<body') != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            //table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given elmement\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ?  (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        //We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n\n    /*deep with a selector and a peudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let nodes = [];\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if(subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any> LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        let isCandidate = (item: DomQuery): boolean => {\n            if(item.length == 0) {\n                return false;\n            }\n            if(item.length == 1) {\n                if ((<string>item.tagName.get(\"booga\").value).toLowerCase() == \"input\" &&\n                    (<string>item.attr(\"type\")?.value || \"\").toLowerCase() == \"file\") {\n                    return true;\n                }\n                if (deep) {\n                    return this.querySelectorAllDeep(\"input[type='file']\").firstElem().isPresent();\n                } else {\n                    return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\n                }\n            }\n            return item.isMultipartCandidate(deep);\n        };\n        let ret = this.stream.filter(item => isCandidate(item)).first().isPresent();\n\n        return ret;\n    }\n\n\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHtml) : Optional.absent;\n        }\n        this.innerHtml = inval;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    set innerHtml(inVal: string) {\n        this.eachElem(elem => elem.innerHTML = inVal);\n    }\n\n    get innerHtml(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matches ||\n            prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || (<any>window).ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        const ret = this.lazyStream\n            .map(item => this._mozMatchesSelector(item.getAsElem(0).value, selector))\n            .filter(match => match)\n            .first();\n        return ret.isPresent();\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                //we could use a filter, but for the best performance we dont\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery) {\n        this.eachElem((item) => {\n            let value1: Element = <Element>elem.getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: (theItem: any) => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string = \"utf-8\") {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.send(null);\n\n        xhr.onload = (responseData: any) => {\n            //defer also means we have to process after the ajax response\n            //has been processed\n            //we can achieve that with a small timeout, the timeout\n            //triggers after the processing is done!\n            if (!defer) {\n                this.globalEval(xhr.responseText.replace(/\\n/g, \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n            } else {\n                //TODO not ideal we maybe ought to move to something else here\n                //but since it is not in use yet, it is ok\n                setTimeout(() => {\n                    this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                }, defer);\n            }\n        };\n\n        xhr.onerror = (data: any) => {\n            throw Error(data);\n        };\n        //since we are synchronous we do it after not with onReadyStateChange\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        const retSet: Set<Element> = new Set();\n        const retArr: Array<Element> = [];\n        const lowerTagName = tagName.toLowerCase();\n\n        let resolveItem = (item: Element) => {\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName && !retSet.has(item)) {\n                retSet.add(item);\n                retArr.push(item);\n            }\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode || (<any> item).host) {\n                item = <Element>item?.parentNode ?? (<any>item)?.host;\n\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        //no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        let finalScripts = [],\n            equi = equalsIgnoreCase,\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && equi(tagName, \"script\") &&\n                    (itemType === \"\" || equi(itemType, \"text/javascript\") ||\n                        equi(itemType, \"javascript\") ||\n                        equi(itemType, \"text/ecmascript\") ||\n                        equi(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            if (finalScripts.length) {\n                                //script source means we have to eval the existing\n                                //scripts before running the include\n                                this.globalEval(finalScripts.join(\"\\n\"));\n\n                                finalScripts = [];\n                            }\n                            this.loadScriptEval(src, 0, \"UTF-8\");\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        //TODO this probably needs to be changed due to our new parsing structures\n                        //probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push(evalText);\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            //script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) //preceding 2, following == 4)\n                .each(item => execScrpt(item));\n\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        } catch (e) {\n            if (window.console && window.console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ?? (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") ?? \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") ?? \"text/css\");\n\n                if (styleSheet?.cssText ?? false) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n            },\n\n            execCss = (item: Element) => {\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: Array<Node> = Array.prototype.slice.call(item.childNodes);\n                    if (childNodes) {\n                        childNodes.forEach(child => innerText.push((<Element>child).innerHTML || (<CharacterData>child).data));\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinstr), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {//no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != Submittables.SELECT &&\n                        elemType != Submittables.BUTTON &&\n                        elemType != Submittables.RESET &&\n                        elemType != Submittables.SUBMIT &&\n                        elemType != Submittables.IMAGE\n                    ) && (\n                        (\n                            elemType != Submittables.CHECKBOX && elemType != Submittables.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let files: any = (<any>element.value).value?.files ?? [];\n                    if (files?.length) {\n                        //xhr level2\n                        target.append(name).value = files[0];\n                    } else {\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let cDataBlock = [];\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    //TODO this part probably will be removed\n    //because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    back(cnt = 1): DomQuery {\n        this.pos = Math.max(0, this.pos - cnt)\n        return new DomQuery(this.values[this.pos]);\n    }\n\n    current(): DomQuery {\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the subdome before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = { attributes: true, childList: true, subtree: true, timeout: 500, interval: 100 }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //from\n    // http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                //the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                //the caretposition is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            //now this is ugly, but not supported input types throw errors for selectionStart\n            //just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        //the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * concats the elements of two Dom Queries into a single one\n     * @param toAttach\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): any {\n        const ret = this.lazyStream.concat(toAttach.lazyStream).collect(new DomQueryCollector());\n        //we now filter the doubles out\n        if(!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; //ie11 does not support sets, we have to fake it\n        return ret.lazyStream.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }).collect(new DomQueryCollector());\n    }\n\n\n    /*[observable](): Observable<DomQuery> {\n        return this.observable;\n    }\n\n    get observable(): Observable<DomQuery> {\n        let observerFunc = (observer:Subscriber<DomQuery>) => {\n            try {\n                this.each(dqNode => {\n                    observer.next(dqNode);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }\n\n    get observableElem(): Observable<Element> {\n        let observerFunc = (observer:Subscriber<Element>) => {\n            try {\n                this.eachElem(node => {\n                    observer.next(node);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }*/\n\n}\n\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/**\n * a standardized message to be sent over the message bus\n */\nimport {Observable, Subject} from \"rxjs\";\nimport {Stream} from \"./Stream\";\n\n/**\n * generic crypto interface\n * to encrypt messages before they are sent\n * to the message bus oder the underlying bus system\n *\n * The idea is to make it as easy as possible, you can use for instance crypto js to\n * handle everything\n */\nexport interface Crypto {\n    /**\n     * note anything can be passed\n     *\n     * @param data the data to be encrypted\n     * @returns the encrypted data in any format, important is decode must be able to handle it\n     */\n    encode(data: any): any;\n\n    /**\n     * @param data the encrypted data in the format you expect it to be\n     * @returns the unencrypted data\n     */\n    decode(data: any): any;\n}\n\n\n/**\n * generic hash interface which provides\n * exactly one method a hash encode which returns a string hash value of encoded data\n */\nexport interface Hash {\n    encode(encodedData: string): string;\n}\n\n/**\n * Default implementation = no encryption\n */\nexport class NoCrypto implements Crypto {\n    decode(data: any): string {\n        return data;\n    }\n\n    encode(data: any): any {\n        return data;\n    }\n}\n\n//TODO dynamic encryptor which flushes the messages before changing the keys\n//that way we can rotate and change internal crypto keys on the fly\n\nlet noEncryption = new NoCrypto();\n\nexport class Message {\n\n    creationDate?: number;\n    identifier?: string;\n    targetOrigin?: string;\n    encoded: boolean = false;\n\n    constructor(public message: any = {}, targetOrigin = \"*\") {\n        this.targetOrigin = targetOrigin;\n        this.creationDate = new Date().getMilliseconds();\n        this.identifier = new Date().getMilliseconds() + \"_\" + Math.random() + \"_\" + Math.random();\n    }\n}\n\n/**\n * custom dom event wrapping our messages\n */\nclass MessageWrapper implements CustomEventInit<Message> {\n\n    detail?: Message;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n    channel: string;\n\n    constructor(channel: string, message: Message) {\n        this.detail = message;\n        this.bubbles = true;\n        this.cancelable = true;\n        this.composed = true;\n        this.channel = channel;\n    }\n}\n\n\nabstract class BaseBroker {\n\n    static readonly EVENT_TYPE = \"brokerEvent\";\n    /**\n     * we can split the listeners with the system\n     * namespace... and type (aka identifier criteria)\n     */\n    protected messageListeners: any = {};\n    protected subjects: any = {};\n    protected processedMessages: any = {};\n\n    protected cleanupCnt = 0;\n    protected rootElem;\n    protected msgHandler;\n\n    protected readonly TIMEOUT_IN_MS = 1000;\n    protected readonly MSG_EVENT = \"message\";\n\n    //must be public because we also must have the option\n    //to set it outside of the constructor\n    crypto = noEncryption;\n\n\n    abstract register(scopeElement?: any): BaseBroker;\n\n    abstract unregister(): BaseBroker;\n\n    abstract broadcast(channel: string, message: Message | string): BaseBroker;\n\n\n    /**\n     * registers a listener on a channel\n     * @param channel the channel to register the listeners for\n     * @param listener the listener to register\n     */\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.reserveListenerNS(channel);\n\n        //we skip the processed messages, because they originated here\n        //and already are processed\n        this.messageListeners[channel].push((msg: Message) => {\n            if (msg.identifier in this.processedMessages) {\n                return;\n            }\n            if (msg?.encoded || msg?.[\"detail\"]?.encoded) {\n                if (msg?.[\"detail\"]) {\n                    msg[\"detail\"].message = this.crypto.decode(msg[\"detail\"].message);\n                    msg[\"detail\"].encoded = false;\n                } else {\n                    msg.message = this.crypto.decode(msg.message);\n                    msg.encoded = false;\n                }\n\n            }\n            listener(msg);\n        });\n        return this;\n    }\n\n    /**\n     * binding into rxjs\n     * produces a subject which can be used via next calls to send messages\n     * on the other hand we\n     * @param channel\n     */\n    asSubject(channel: string): Subject<Message> {\n        this.reserveSubjectNS(channel);\n        let subject = this.subjects[channel];\n        let oldNext = subject.next;\n\n        subject.next = (msg: Message | MessageWrapper) => {\n            //We use a recursive call to let the broadcaster handle\n            //The wrapper conversion and then again call us here\n            //that way both directions are handled.. next calls the broker\n            //and a broadcast calls next\n            if ((<MessageWrapper>msg)?.detail) {\n                oldNext.call(subject, (<MessageWrapper>msg)?.detail);\n            } else {\n                this.broadcast(channel, <Message>msg);\n            }\n        }\n        return subject;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * returns an observable on the baseBroker\n     * @param channel\n     */\n    asObservable(channel: string): Observable<Message> {\n        return this.asSubject(channel).asObservable();\n    }\n\n    /**\n     * reserves the listener namespace and wildcard namespace for the given identifier\n     * @param identifier\n     * @private\n     */\n    private reserveListenerNS(identifier: string) {\n        if (!this.messageListeners[identifier]) {\n            this.messageListeners[identifier] = [];\n        }\n        if (!this.messageListeners[\"*\"]) {\n            this.messageListeners[\"*\"] = [];\n        }\n    }\n\n    private reserveSubjectNS(identifier: string) {\n        if (!this.subjects[identifier]) {\n            this.subjects[identifier] = new Subject();\n        }\n        if (!this.subjects[\"*\"]) {\n            this.subjects[\"*\"] = new Subject();\n        }\n    }\n\n    /**\n     * unregisters a listener from this channel\n     *\n     * @param channel the channel to unregister from\n     * @param listener the listener to unregister the channel from\n     */\n    unregisterListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.messageListeners[channel] = (this.messageListeners[channel] || []).filter((item: any) => item !== listener);\n        return this;\n    }\n\n    /**\n     * answers a bidirectional message received\n     * usage, the client can use this method, to answer an incoming message in a precise manner\n     * so that the caller sending the bidirectional message knows how to deal with it\n     * this mechanism can be used for global storages where we have one answering entity per channel delivering the\n     * requested data, the request can be done asynchronously via promises waiting for answers\n     *\n     * @param channel the channel the originating message\n     * @param request the requesting message\n     * @param answer the answer to the request\n     */\n    answer(channel: string, request: Message | string, answer: Message): BaseBroker {\n        if ('string' == typeof request) {\n            request = new Message(request);\n        }\n\n        if (BaseBroker.isAnswer(request)) {\n            return;\n        }\n        answer.identifier = BaseBroker.getAnswerId(request);\n        this.broadcast(channel, answer);\n        return this;\n    }\n\n    private static getAnswerId(request: Message) {\n        return \"_r_\" + request.identifier;\n    }\n\n    private static isAnswer(request: Message) {\n        return request.identifier.indexOf(\"_r_\") == 0;\n    }\n\n    /**\n     * idea... a bidirectional broadcast\n     * sends a message and waits for the first answer coming in from one of the receivers\n     * sending the message back with a messageIdentifier_broadCastId answer\n     *\n     * @param channel\n     * @param message\n     */\n    request(channel: string, message: Message | string): Promise<Message> {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        let messageId = message.identifier;\n\n        let ret = new Promise<Message>((resolve, reject) => {\n            let timeout = null;\n            let listener = (message2: Message) => {\n                if (message2.identifier == messageId) {\n                    //broadcast from same source, we do not want\n                    //to deal with it now\n                    return;\n                }\n\n                if (message2.identifier == \"_r_\" + messageId) {\n                    clearTimeout(timeout);\n                    this.unregisterListener(channel, listener);\n                    resolve(message2);\n                }\n            }\n            timeout = setTimeout(() => {\n                this.unregisterListener(channel, listener);\n                reject(\"request message performed, timeout, no return value\");\n            }, 3000);\n            this.registerListener(channel, listener);\n\n        });\n        this.broadcast(channel, message);\n        return ret;\n    }\n\n\n    /**\n     * garbage collects the processed messages queue\n     * usually after one second\n     */\n    protected gcProcessedMessages() {\n        if ((++this.cleanupCnt) % 10 != 0) {\n            return;\n        }\n        let newProcessedMessages: any = {};\n        Object.keys(this.processedMessages).forEach(key => {\n            if (this.messageStillActive(key)) return;\n            newProcessedMessages[key] = this.processedMessages[key];\n        });\n        this.processedMessages = newProcessedMessages;\n    }\n\n    private messageStillActive(key: string): boolean {\n        return this.processedMessages[key] > ((new Date()).getMilliseconds() - this.TIMEOUT_IN_MS);\n    }\n\n    protected markMessageAsProcessed(message: Message) {\n        this.processedMessages[message.identifier] = message.creationDate;\n    }\n}\n\nlet broadCastChannelBrokerGenerator = (name) => {\n    if (window?.BroadcastChannel) {\n        return new window.BroadcastChannel(name);\n    }\n    throw Error(\"No Broadcast channel in the system, use a shim or provide a factory function\" +\n        \"in the constructor\");\n};\n\nconst DEFAULT_CHANNEL_GROUP = \"brokr\";\n\n/**\n * a broker which hooks into the Broadcast Channel broker\n * either via shim or substitute lib\n */\nexport class BroadcastChannelBroker extends BaseBroker {\n    private openChannels: [{ key: string }, BroadcastChannel] = <any>{};\n    private readonly msgListener: Function;\n\n\n    /**\n     * @param brokerFactory a factory generating a broker\n     * @param channelGroup a group to combine a set of channels\n     * @param crypto a crypto class\n     */\n    constructor(private brokerFactory: Function = broadCastChannelBrokerGenerator, private channelGroup = DEFAULT_CHANNEL_GROUP, public crypto: Crypto = noEncryption) {\n        super();\n        this.msgListener = (messageData: MessageWrapper) => {\n            if (messageData.detail.encoded) {\n                messageData.detail.message = <any>this.crypto.decode(messageData.detail.message);\n                messageData.detail.encoded = false;\n            }\n            let coreMessage = messageData.detail;\n            let channel: string = messageData.channel;\n\n            if (this.messageListeners?.[channel]) {\n                this.messageListeners?.[channel].forEach(listener => {\n                    listener(coreMessage);\n                })\n            }\n            this.markMessageAsProcessed(coreMessage);\n            return true;\n        }\n        this.crypto = crypto;\n        this.register();\n    }\n\n    broadcast(channel: string, message: Message | string, includeOrigin = true): BaseBroker {\n        try {\n            if ('string' == typeof message) {\n                message = new Message(message);\n            }\n            //we now run a quick remapping to avoid\n            //serialisation errors\n            let msgString = JSON.stringify(<Message>message);\n            message = <Message>JSON.parse(msgString);\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n            messageWrapper.detail.encoded = true;\n\n            if (this?.subjects[channel]) {\n                this.subjects[channel].next(messageWrapper);\n            }\n\n            this.openChannels[this.channelGroup].postMessage(messageWrapper);\n            if (includeOrigin) {\n                this.msgListener(messageWrapper);\n            }\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        super.registerListener(channel, listener);\n        return <BaseBroker>this;\n    }\n\n    register(): BaseBroker {\n        if (!this.openChannels[this.channelGroup]) {\n            this.openChannels[this.channelGroup] = this.brokerFactory(this.channelGroup);\n        }\n        this.openChannels[this.channelGroup].addEventListener(\"message\", this.msgListener);\n        return <BaseBroker>this;\n    }\n\n    unregister(): BaseBroker {\n        this.openChannels[this.channelGroup].close();\n        return <BaseBroker>this;\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a broadcast channel broker\n */\nexport class BroadcastChannelBrokerBuilder {\n    private broadCastChannelGenerator: Function = broadCastChannelBrokerGenerator;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withGeneratorFunc(generatorFunc: Function): BroadcastChannelBrokerBuilder {\n        this.broadCastChannelGenerator = generatorFunc;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BroadcastChannelBrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n    withChannelGroup(channelGroup: string): BroadcastChannelBrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BroadcastChannelBrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): BroadcastChannelBroker {\n        let broker = new BroadcastChannelBroker(this.broadCastChannelGenerator, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}\n\n\n/**\n * implementation of a messaging based transport\n */\n\n/**\n * central message broker which uses various dom constructs\n * to broadcast messages into subelements\n *\n * we use the dom event system as transport and iframe and shadow dom mechanisms in a transparent way to\n * pull this off\n *\n * usage\n *\n * broker = new Broker(optional rootElement)\n *\n * defines a message broker within a scope of rootElement (without it is window aka the current isolation level)\n *\n * broker.registerListener(channel, listener) registers a new listener to the current broker and channel\n * broker.unregisterListener(channel, listener) unregisters the given listener\n *\n * broker.broadcast(message, optional direction, optional callBrokerListeners)\n * sends a message (channel included in the message object) in a direction (up, down, both)\n * and also optionally calls the listeners on the same broker (default off)\n *\n * the flow is like\n * up messages are propagated upwards only until it reaches the outer top of the dom\n * downwards, the messages are propagated downwards only\n * both the message is propagated into both directions\n *\n * Usually messages sent from the same broker are not processed within... however by setting\n * callBrokerListeners to true the listeners on the same broker also are called\n * brokers on the same level will get the message and process it automatically no matter what.\n * That way you can exclude the source from message processing (and it is done that way automatically)\n *\n * Isolation levels. Usually every isolation level needs its own broker object registering\n * on the outer bounds\n *\n * aka documents will register on window\n * iframes on the iframe windowObject\n * isolated shadow doms... document\n *\n *\n *\n */\nexport class Broker extends BaseBroker {\n\n    /**\n     * constructor has an optional root element\n     * and an internal name\n     *\n     * @param scopeElement\n     * @param brokerGroup\n     * @param crypto\n     */\n    constructor(scopeElement: HTMLElement | Window | ShadowRoot = window, public brokerGroup = \"brokr\", crypto: Crypto = noEncryption) {\n\n        super();\n\n        /**\n         * message relay.. identifies message events and relays them to the listeners\n         * @param event\n         */\n        let evtHandler = (event: MessageEvent | CustomEvent<Message>) => {\n            let details = (<any>event)?.detail ?? (<MessageEvent>event)?.data?.detail;\n            //TODO possible crypto hook, needs unit testing\n            let channel = ((<any>event)?.data?.channel) ?? ((<any>event)?.channel);\n\n            //javascript loses the type info in certain module types\n            if (details?.identifier && details?.message) {\n                let msg: Message = details;\n                if (msg.identifier in this.processedMessages) {\n                    return;\n                }\n                //coming in from up... we need to send it down\n                //a relayed message always has to trigger the listeners as well\n                if ((<any>event)?.detail) {\n                    this.broadcast(channel, msg);\n                } else {\n                    this.broadcast(channel, msg);\n                }\n\n            }\n        };\n        this.msgHandler = (evt: MessageEvent) => evtHandler(evt);\n        this.crypto = crypto;\n        this.register(scopeElement);\n    }\n\n    /**\n     * register the current broker into a scope defined by wnd\n     * @param scopeElement\n     */\n    register(scopeElement: HTMLElement | Window | ShadowRoot): BaseBroker {\n        this.rootElem = (<any>scopeElement).host ? (<any>scopeElement).host : scopeElement;\n        if ((<any>scopeElement).host) {\n            let host = (<ShadowRoot>scopeElement).host;\n            host.setAttribute(\"data-broker\", \"1\");\n        } else {\n            if (scopeElement?.[\"setAttribute\"])\n                (<any>scopeElement).setAttribute(\"data-broker\", \"1\");\n        }\n\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler, {capture: true});\n        /*dom message usable by iframes*/\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE + this.MSG_EVENT, this.msgHandler, {capture: true});\n        return <any>this;\n    }\n\n    /**\n     * manual unregister function, to unregister as broker from the current\n     * scope\n     */\n    unregister(): BaseBroker {\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler)\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + this.MSG_EVENT, this.msgHandler)\n        return <any>this;\n    }\n\n\n    /**\n     * broadcast a message\n     * the message contains the channel and the data and some internal bookkeeping data\n     *\n     * @param channel the channel to broadcast to\n     * @param message the message dot send\n     * (for instance 2 iframes within the same parent broker)\n     */\n    broadcast(channel: string, message: Message | string): BaseBroker {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        //message.message = this.crypto.encode(message);\n        //message.encoded = true;\n\n        if (this?.subjects[channel]) {\n            let messageWrapper = new MessageWrapper(channel, message);\n            if (!messageWrapper.detail.encoded) {\n                messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n                messageWrapper.detail.encoded = true;\n            }\n            this.subjects[channel].next(messageWrapper);\n        }\n\n        try {\n            this.dispatchUp(channel, message, false, true);\n            //listeners already called\n            this.dispatchDown(channel, message, true, false)\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n\n    private dispatchUp(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.markMessageAsProcessed(message);\n        if (window.parent != null) {\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            window.parent.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        }\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n    private dispatchSameLevel(channel: string, message: Message) {\n        let event = this.transformToEvent(channel, message, true);\n        //we also dispatch sideways\n        window.dispatchEvent(event);\n    }\n\n    //a dispatch of our own should never trigger the listeners hence the default true\n    private dispatchDown(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        let evt = this.transformToEvent(channel, message);\n\n        /*we now notify all iframes lying underneath */\n        Array.prototype.slice.call(document.querySelectorAll(\"iframe\")).forEach((element: HTMLIFrameElement) => {\n            let messageWrapper = new MessageWrapper(channel, message);\n            element.contentWindow.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        });\n\n        Array.prototype.slice.call(document.querySelectorAll(\"[data-broker='1']\")).forEach((element: HTMLElement) => element.dispatchEvent(evt))\n\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n\n    private msgCallListeners(channel: string, message: Message) {\n        let listeners = this.messageListeners[channel];\n        if (listeners?.length) {\n            let callElement = (element: (msg: Message) => void) => {\n                element(message);\n            }\n\n            listeners.forEach(callElement);\n        }\n    }\n\n    private transformToEvent(channel: string, message: Message, bubbles = false): CustomEvent {\n        let messageWrapper = new MessageWrapper(channel, message);\n        messageWrapper.bubbles = bubbles;\n        return Broker.createCustomEvent(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, messageWrapper);\n    }\n\n    private static createCustomEvent(name: string, wrapper: MessageWrapper): any {\n        if ('function' != typeof window.CustomEvent) {\n            let e: any = document.createEvent('HTMLEvents');\n            e.detail = wrapper.detail;\n            e.channel = wrapper.channel;\n            e.initEvent(name, wrapper.bubbles, wrapper.cancelable);\n            return e;\n\n        } else {\n            let customEvent = new window.CustomEvent(name, wrapper);\n            (<any>customEvent).channel = wrapper.channel;\n            return customEvent;\n        }\n\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a dom broker\n */\nexport class BrokerBuilder {\n    private scopeElement: HTMLElement | Window | ShadowRoot = window;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withScopeElement(scopeElement: HTMLElement | Window | ShadowRoot): BrokerBuilder {\n        this.scopeElement = scopeElement;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n\n    withChannelGroup(channelGroup: string): BrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): Broker {\n        let broker = new Broker(this.scopeElement, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assings an new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n\n        this.buildPath(accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambigous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(accessPath: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","import {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/*\n * Promise wrappers for timeout and interval\n */\nexport function timeout(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setTimeout(() => apply(), timeout);\n    }, () => {\n        if (handler) {\n            clearTimeout(handler);\n            handler = null;\n        }\n    });\n}\n\nexport function interval(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setInterval(() => {\n            apply();\n        }, timeout);\n    }, () => {\n        if (handler) {\n            clearInterval(handler);\n            handler = null;\n        }\n    });\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //let func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n            if (fn.catch) {\n                let funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            let fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T;\n\n    /**\n     * moves back cnt numbers in the datasource\n     * (if no number is given we move back one step)\n     * @param cnt\n     */\n    back(cnt?: number): T;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number {\n        this.value++;\n        return Math.min(this.value, this.total - 1);\n    }\n\n    back(cnt = 1): number {\n        return this.value = Math.max(this.value - cnt, this.start);\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number {\n        //first condition current without initial call for next\n        return this.value == (this.start - 1) ? this.start : this.value;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    back(cnt: number = 1): T {\n        this.dataPos = Math.max(this.dataPos  - cnt, -1);\n        return this.value[Math.max(this.dataPos, 0)];\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n\n    _current: T;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    _nextStack = [];\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 0;\n        let found = null;\n        while (this.inputDataSource.hasNext()) {\n            steps++;\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = next;\n                this._nextStack.push(next);\n                break;\n            }\n        }\n        steps ? this.inputDataSource.back(steps) : null;\n        return found != null;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let found = null;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos ++;\n            let next: T = <T>this.inputDataSource.next();\n\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found;\n        return found;\n    }\n\n    current(): T {\n        if(this._current == null) {\n            return this.next();\n        }\n        return this._current;\n    }\n\n    back(cnt = 1): T {\n        let data: T = null;\n        while(cnt >= 0 && this._unfilteredPos > 0) {\n            data = this.inputDataSource.back(1);\n            //we cannot use the data as skip index\n            let nonFilteredValue = !! this._filterIdx?.[this._unfilteredPos];\n            cnt = (nonFilteredValue) ? cnt - 1: cnt;\n            this._unfilteredPos--;\n        }\n        return data;\n    }\n\n    reset(): void {\n        this._current = null;\n        this._filterIdx = {};\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    back(cnt = 1): S {\n        return this.mapFunc(this.inputDataSource.back(cnt));\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources= [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next());\n            if(this.activeDataSource) {\n                this.walkedDataSources.push({\n                    pos: this._currPos,\n                    datasource: this.activeDataSource\n                });\n            }\n            if (Array.isArray(mapped)) {\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\n            } else {\n                this.activeDataSource = mapped;\n            }\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        if(this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources = [];\n        this._currPos = 0;\n    }\n\n    back(cnt = 1): S {\n        // we have to revert the active datasources until we reach the first one lower than pos - cnt\n        // then we have set this to the active datasource\n        //and then we have to move up until we hit xxx\n\n\n        let ret = null;\n        if(!this.walkedDataSources.length) {\n            return this.activeDataSource.back(cnt);\n        }\n        while(!ret && this.walkedDataSources.length) {\n            let datasource = this.walkedDataSources.pop();\n            let startingPos = this._currPos - cnt;\n            if(startingPos <= datasource.pos) {\n                //found\n                this.activeDataSource = datasource.datasource;\n                this.activeDataSource.reset();\n                const stepsForward = (this._currPos - datasource.pos - cnt);\n                this._currPos = datasource.pos + stepsForward;\n\n                for(let cnt = 0; cnt < stepsForward; cnt++) {\n                    ret = this.activeDataSource.next()\n                }\n\n            }\n        }\n\n        //we probably have to stack datasources to implement this, for now we leave it out\n        return ret;\n    }\n\n    current(): S {\n        if(!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, {[key: string]: S} > {\n    finalValue: {[key:string]: any} = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string> element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    back(cnt = 1): T {\n        this.pos = Math.max(this.pos-1, -1)\n        return this.value[Math.max(this.pos, 0)];\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    back(cnt = 1): T {\n        let ret = this.dataSource.back(cnt);\n        this.pos = Math.max(-1, this.pos - cnt);\n        return ret;\n    }\n\n    current(): T {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//poliyfill from @webcomponents/webcomponentsjs\nimport {DomQuery} from \"./DomQuery\";\n\nif (\"undefined\" != typeof window) {\n    (function () {\n        if (void 0 === window.Reflect || void 0 === window.customElements || (<any>window.customElements).polyfillWrapFlushCallback) return;\n        const a = HTMLElement;\n        (<any>window).HTMLElement = {\n            HTMLElement: function HTMLElement() {\n                return Reflect.construct(a, [], this.constructor)\n            }\n        }.HTMLElement, HTMLElement.prototype = a.prototype, HTMLElement.prototype.constructor = HTMLElement, Object.setPrototypeOf(HTMLElement, a);\n    })();\n}\n\n/**\n * beginning custom tag support\n *\n * This api is still experimental\n * and might be interwoven with DomQuery\n * so it is bound to change\n *\n * it follows a builder pattern to allow easier creations\n * with less code of custom tags\n */\nexport class TagBuilder {\n    tagName: string;\n    connectedCallback?: Function;\n    clazz?: CustomElementConstructor;\n    extendsType: CustomElementConstructor = HTMLElement;\n    theOptions: ElementDefinitionOptions | null;\n    markup: string;\n    disconnectedCallback?: Function;\n    adoptedCallback ?: Function;\n    attributeChangedCallback ?: Function;\n    observedAttrs: string[] = [];\n\n    // noinspection JSUnusedGlobalSymbols\n    static withTagName(tagName): TagBuilder {\n        return new TagBuilder(tagName);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withObservedAttributes(...oAttrs) {\n        this.observedAttrs = oAttrs;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withConnectedCallback(callback: Function) {\n        this.connectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withDisconnectedCallback(callback: Function) {\n        this.disconnectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAdoptedCallback(callback: Function) {\n        this.adoptedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAttributeChangedCallback(callback: Function) {\n        this.attributeChangedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withExtendsType(extendsType: CustomElementConstructor) {\n        this.extendsType = extendsType;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withOptions(theOptions) {\n        this.theOptions = theOptions;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withClass(clazz) {\n        if (this.markup) {\n            throw Error(\"Markup already defined, markup must be set in the class\");\n        }\n        this.clazz = clazz;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withMarkup(markup) {\n        if (this.clazz) {\n            throw Error(\"Class already defined, markup must be set in the class\");\n        }\n        this.markup = markup;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    register() {\n        if (!this.clazz && !this.markup) {\n            throw Error(\"Class or markup must be defined\")\n        }\n        if (this.clazz) {\n\n            let applyCallback = (name: string) => {\n                let outerCallback = this[name];\n                let protoCallback = (<any>this.clazz.prototype)[name];\n                let finalCallback = outerCallback || protoCallback;\n                if (finalCallback) {\n                    (<any>this.clazz.prototype)[name] = function () {\n                        if(outerCallback) {\n                            finalCallback.apply(DomQuery.byId(this));\n                        } else {\n                            protoCallback.apply(<any>this);\n                        }\n                    }\n                }\n            }\n\n            applyCallback(\"connectedCallback\");\n            applyCallback(\"disconnectedCallback\");\n            applyCallback(\"adoptedCallback\");\n            applyCallback(\"attributeChangedCallback\");\n\n            //TODO how do we handle the oAttrs?\n            if (this.observedAttrs.length) {\n                Object.defineProperty(this.clazz.prototype, \"observedAttributes\", {\n                    get(): any {\n                        return this.observedAttrs;\n                    }\n                });\n            }\n\n            window.customElements.define(this.tagName, this.clazz, this.theOptions || null);\n        } else {\n            let _t_ = this;\n            let applyCallback = (name: string, scope: any) => {\n                if (_t_[name]) {\n                    _t_[name].apply(DomQuery.byId(<any>scope));\n                }\n            };\n\n            window.customElements.define(this.tagName, class extends this.extendsType {\n                constructor() {\n                    super();\n                    this.innerHTML = _t_.markup;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                static get observedAttributes() {\n                    return _t_.observedAttrs;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                connectedCallback() {\n                    applyCallback(\"connectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                disconnectedCallback() {\n                    applyCallback(\"disconnectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                adoptedCallback() {\n                    applyCallback(\"adoptedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                attributeChangedCallback() {\n                    applyCallback(\"attributeChangedCallback\", this);\n                }\n\n            }, this.theOptions || null);\n        }\n    }\n}\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new window.DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (<any>window)?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","module.exports = require(\"rxjs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export {DomQuery, ElementAttribute, DomQueryCollector, DQ} from \"./DomQuery\";\nexport {Lang} from \"./Lang\";\nexport {Config, Monad, IValueHolder, IFunctor, IMonad, IIdentity, Optional, ValueEmbedder} from \"./Monad\";\nexport {CancellablePromise, Promise, IPromise, PromiseStatus} from \"./Promise\";\nexport {XMLQuery, XQ} from \"./XmlQuery\";\nexport {Stream, LazyStream, IteratableConsumer, IStream} from \"./Stream\";\nexport {\n    ArrayStreamDataSource,\n    MappedStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    SequenceDataSource,\n    QueryFormStringCollector,\n    IStreamDataSource,\n    ICollector,\n    ArrayCollector,\n    AssocArrayCollector,\n    FormDataCollector,\n    QueryFormDataCollector,\n} from \"./SourcesCollectors\";\n\n\nexport {TagBuilder} from \"./TagBuilder\";\n\nexport {Message, Broker, BroadcastChannelBroker, Crypto, NoCrypto, Hash} from \"./Messaging\";\nexport {JSONCrypto, ExpiringCrypto} from \"./CryptoExtensions\";\n\n\n"],"names":["decode","data","encryptedData","JSON","parse","encode","stringify","JSONCrypto","timeout","parentCrypto","hashSum","gcCycleCnt","storedMessages","lastCall","currTime","Date","getTime","this","gcLimitReached","LazyStream","ofAssoc","filter","collect","AssocArrayCollector","rotatingEncoded","toString","Error","ExpiringCrypto","MAX_GC_CYCLES","encoded","Submittables","trim","Lang","objToArray","isString","equalsIgnoreCase","waitUntilDom","root","condition","options","attributes","childList","subtree","interval","Promise","success","error","MUT_ERROR","window","MutationObserver","setTimeout","mutationList","observer","found","DomQuery","map","mut","target","first","isPresent","clearTimeout","eachElem","item","observe","setInterval","childNodes","querySelectorAll","absent","clearInterval","element","name","defaultVal","val","get","orElse","values","length","getAttribute","value","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","DEFAULT_WHITELIST","src","rootNode","pos","_limits","Optional","isAbsent","foundElement","push","getAsElem","allElems","getIf","isTag","tagName","nodeName","toLowerCase","Stream","of","allMatch","el","checked","newChecked","querySelectorAllDeep","queryStr","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","childNodeArr","concat","asArray","byId","ArrayCollector","selector","document","indexOf","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","nodes","res","foundNodes","selectors","split","cnt2","levelSelector","id","includeRoot","subItems","reduce","reduction","defaultValue","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","stream","firstElem","isCandidate","inval","innerHtml","dispatchEvent","evt","elem","retArr","inVal","_mozMatchesSelector","toMatch","prot","matchesSelector","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","i","filterSelector","matched","lazyStream","match","selectorStage","nodeSelector","func","len","each","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","appendTo","orElseLazy","theItem","loadScriptEval","defer","charSet","xhr","XMLHttpRequest","open","setRequestHeader","send","onload","responseData","responseText","replace","onerror","insertAfter","existingItem","existingElement","nextSibling","toInsertParams","insertElem","insertBefore","elseValue","parents","retSet","Set","lowerTagName","resolveItem","has","host","copyAttrs","sourceItem","sourceNode","attrs","resolveAttributeHolder","attrName","ret","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","whilteListed","finalScripts","equi","execScrpt","itemType","evalText","text","innerText","go","substring","flatMap","sort","node1","node2","compareDocumentPosition","e","console","message","description","applyStyle","style","newSS","styleSheet","sheet","cssText","createTextNode","Array","prototype","forEach","child","execCss","click","fireEvent","addEventListener","listener","removeEventListener","eventName","nodeType","eventClass","createEvent","initEvent","synthetic","createEventObject","textContent","joinstr","text1","text2","encodeFormElement","toMerge","Config","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","append","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","inputValue","reduced","subNodes","from","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","back","max","current","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","DomQueryCollector","idx","notFound","DQ","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","Object","assign","theArgs","nextSource","keys","nextKey","hasOwnProperty","NoCrypto","noEncryption","targetOrigin","creationDate","getMilliseconds","identifier","random","Message","channel","detail","bubbles","cancelable","composed","messageListeners","subjects","processedMessages","cleanupCnt","TIMEOUT_IN_MS","MSG_EVENT","crypto","registerListener","reserveListenerNS","msg","asSubject","reserveSubjectNS","subject","oldNext","broadcast","asObservable","Subject","unregisterListener","answer","request","BaseBroker","isAnswer","getAnswerId","messageId","resolve","reject","message2","gcProcessedMessages","newProcessedMessages","key","messageStillActive","markMessageAsProcessed","EVENT_TYPE","broadCastChannelBrokerGenerator","BroadcastChannel","DEFAULT_CHANNEL_GROUP","brokerFactory","channelGroup","openChannels","msgListener","messageData","coreMessage","register","includeOrigin","msgString","messageWrapper","MessageWrapper","postMessage","unregister","close","BroadcastChannelBroker","broadCastChannelGenerator","listeners","withGeneratorFunc","generatorFunc","withListener","withChannelGroup","withCrypto","build","broker","listenerItem","BroadcastChannelBrokerBuilder","scopeElement","brokerGroup","msgHandler","event","details","evtHandler","rootElem","Broker","capture","dispatchUp","dispatchDown","ignoreListeners","callBrokerListeners","msgCallListeners","parent","dispatchSameLevel","transformToEvent","contentWindow","createCustomEvent","wrapper","CustomEvent","customEvent","withScopeElement","BrokerBuilder","_value","fn","Monad","currentPos","currKey","keyVal","arrPos","arrayIndex","getIfPresent","toJson","start","parseInt","resolver","newVal","alternative","ConfigEntry","shallowMerge","other","overwrite","withAppend","isArray","noKeys","accessPath","lastKey","pathExists","buildPath","finalKeyArrPos","retVal","apply","appendIf","assignIf","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","PromiseStatus","handler","CancellablePromise","executor","status","PENDING","allFuncs","all","myapply","promiseCnt","myPromise","promises","__last__","finally","race","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","cancellator","cancel","total","SequenceDataSource","dataPos","ArrayStreamDataSource","filterFunc","_filterIdx","_unfilteredPos","_nextStack","inputDataSource","steps","_current","FilteredStreamDatasource","mapFunc","MappedStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","datasource","pop","stepsForward","FlatMapStreamDataSource","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ofDataSource","dataSource","toAppend","onElem","strmR","startVal","val1","last","anyMatch","noneMatch","comparator","newArr","collector","ofStreamDataSource","isOverLimits","nextFilter","t","stop","value1","value2","el1","el2","Reflect","customElements","polyfillWrapFlushCallback","a","HTMLElement","construct","constructor","setPrototypeOf","extendsType","observedAttrs","withTagName","TagBuilder","withObservedAttributes","oAttrs","withConnectedCallback","callback","connectedCallback","withDisconnectedCallback","disconnectedCallback","withAdoptedCallback","adoptedCallback","withAttributeChangedCallback","attributeChangedCallback","withExtendsType","withOptions","theOptions","withClass","withMarkup","applyCallback","outerCallback","protoCallback","finalCallback","defineProperty","define","scope","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","serialized","XMLSerializer","serializeToString","parserErrorText","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}