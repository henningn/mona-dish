{"version":3,"file":"Monad.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assings an new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n\n        this.buildPath(accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambigous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(accessPath: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\nimport type = Mocha.utils.type;\n\n/**\n * special status of the datasource location pointer\n * if an access, outside of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fullfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * returns the next element in the stream\n     * difference to next is, that the internal data position\n     * is not changed, so next still will deliver the next item from the current\n     * data position. Look ahead is mostly needed internally\n     * by possible endless data constructs which have no fixed data boundary, or index\n     * positions. (aka infinite sets, or flatmapped constructs)\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T |ITERATION_STATUS {\n        if((this.dataPos+cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while(!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos ++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T |ITERATION_STATUS;\n\n        for(let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if(inCache || this.filterFunc(lookupVal)) {\n                cnt --;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n       return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources= [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        //easy access trial\n        if(this?.activeDataSource && this?.activeDataSource?.lookAhead(cnt) != ITERATION_STATUS.EO_STRM) {\n            //this should coverr 95% of all accesses\n            return this?.activeDataSource.lookAhead(cnt);\n        }\n\n        /**\n         * we only can determine how many elems datasource has by going up\n         * (for now this suffices, however not ideal, we might have to introduce a numElements or so)\n         * @param datasource\n         */\n        function howManyElems(datasource: IStreamDataSource<any>): number {\n            let cnt = 1;\n            while(datasource.lookAhead(cnt) !== ITERATION_STATUS.EO_STRM) {\n                cnt++;\n            }\n            return cnt - 1;\n        }\n        function readjustSkip(dataSource) {\n            let skippedElems = (dataSource) ? howManyElems(dataSource) : 0;\n            cnt = cnt - skippedElems;\n        }\n\n        if(this.activeDataSource) {\n            readjustSkip(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams subsequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them so we introduce a small o2 here\n        for(let dsLoop = 1; true ; dsLoop++) {\n            let currDatasource = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            if(currDatasource === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mapped = this.mapFunc(currDatasource as T);\n            //it either comes in as datasource or as array\n            let currentDataSource = this.toDatasource(mapped);\n            let ret = currentDataSource.lookAhead(cnt);\n            if(ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            readjustSkip(currDatasource);\n\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);;\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if(this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS{\n        if(!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, {[key: string]: S} > {\n    finalValue: {[key:string]: any} = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string> element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(152);\n"],"names":["Lang","trim","str","ws","i","replace","length","test","charAt","slice","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","fromNullable","e","absent","saveResolveLazy","strToArray","splitter","ret","split","forEach","element","push","objToArray","obj","offset","pack","Array","concat","prototype","call","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","target","TypeError","to","Object","assign","theArgs","item","filter","nextSource","keys","nextKey","hasOwnProperty","value","this","_value","map","fn","inval","Monad","flatMap","mapped","isAbsent","isPresent","presentRunnable","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","currentPos","cnt","key","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","get","defaultVal","toJson","JSON","stringify","start","indexOf","end","parseInt","substring","resolve","resolver","rootElem","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","root","Config","Stream","ofAssoc","collect","AssocArrayCollector","shallowMerge","other","overwrite","withAppend","isArray","of","each","append","noKeys","accessPath","lastKey","pathExists","buildPath","finalKeyArrPos","Error","retVal","apply","appendIf","condition","assignIf","delete","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","ITERATION_STATUS","total","hasNext","next","EO_STRM","lookAhead","reset","current","BEF_STRM","SequenceDataSource","dataPos","Math","max","ArrayStreamDataSource","filterFunc","parent","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","found","lookupVal","loop","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","readjustSkip","dataSource","skippedElems","datasource","howManyElems","dsLoop","currDatasource","toDatasource","ds","FlatMapStreamDataSource","data","ArrayCollector","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","toMerge","encodeFormElement","name","QueryFormDataCollector","formData","join","reduce","item1","item2","QueryFormStringCollector","_limits","pos","ofDataSource","limits","toAppend","onElem","res","strmR","startVal","val1","first","last","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collector","isLimitsReached","isEndOfArray","Symbol","iterator","done","LazyStream","values","ofStreamDataSource","isOverLimits","nextFilter","t","el","stop","value1","value2","el1","el2","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}