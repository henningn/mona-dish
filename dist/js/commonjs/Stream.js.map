{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","this","_value","map","fn","inval","Monad","flatMap","mapped","fromNullable","Optional","isAbsent","isPresent","presentRunnable","absent","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","currentPos","cnt","length","currKey","keyVal","arrPos","arrayIndex","getClass","Array","getIfPresent","match","defaultVal","toJson","JSON","stringify","start","indexOf","end","parseInt","substring","resolve","resolver","e","rootElem","valueKey","newVal","alternative","ValueEmbedder","_limits","pos","of","Stream","data","ofAssoc","keys","ofDataSource","dataSource","hasNext","push","next","limits","onElem","each","res","item","ret","strmR","isArray","concat","filter","reduce","startVal","offset","val1","first","last","Math","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","slice","collect","collector","finalValue","isLimitsReached","isEndOfArray","reset","parent","LazyStream","ArrayStreamDataSource","values","ofStreamDataSource","isOverLimits","nextFilter","max","MappedStreamDataSource","el","stop","FilteredStreamDatasource","FlatMapStreamDataSource","value1","value2","el1","el2","arr","ArrayCollector","dataPos","filterFunc","filteredNext","inputDataSource","mapFunc","resolveCurrentNext","resolveNextNext","activeDataSource","element","AssocArrayCollector","FormData","append","FormDataCollector","toMerge","encodeFormElement","QueryFormDataCollector","formData","join","item1","item2","QueryFormStringCollector"],"mappings":"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","file":"Stream.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {IMonad, IOptional, IValueEmbedder, IValueHolder} from \"./Types\";\n\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> implements IOptional<T> {\n\n    /*default value for absent*/\n    static absent: IOptional<any> = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<T>(value?: T): IOptional<T> {\n        return new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: IMonad<T, any>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): IMonad<T, any> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): IOptional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): IOptional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return <any> Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>> val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): IOptional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): IOptional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n\n\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent =  ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if(!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<T>(value?: any, valueKey: string = \"value\"): ValueEmbedder<T> {\n        return new ValueEmbedder(value, valueKey);\n    }\n}\n\n\n\n\n\n","/*\n * A small stream implementation\n */\nimport {Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\nimport {\n    IMonad, IValueHolder, ICollector,\n    IStreamDataSource, IOptional,\n} from \"./Types\";\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T> = (val1: T, val2: T) => T;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce(fn: Reducable<T>, startVal: T): IOptional<T>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): IOptional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): IOptional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce(fn: Reducable<T>, startVal: T = null): IOptional<T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1 = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable(val1);\n    }\n\n    first(): IOptional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): IOptional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = 0;\n        this._limits = -1;\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce(fn: Reducable<T>, startVal: T = null): IOptional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): IOptional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): IOptional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\nimport {ICollector, IStreamDataSource} from \"./Types\";\n\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n}\n\n/**\n * an intermediate data source wich prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    filteredNext: T = null;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this.filteredNext = next;\n                return true;\n            } else {\n                this.filteredNext = null;\n            }\n        }\n        return this.filteredNext != null;\n\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let ret = this.filteredNext;\n        this.filteredNext = null;\n        //We have to call hasNext, to roll another\n        //prefetch in case someone runs next\n        //sequentially without calling hasNext\n        this.hasNext();\n        return ret;\n    }\n\n    reset(): void {\n        this.filteredNext = null;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveCurrentNext() || this.resolveNextNext();\n    }\n\n    private resolveCurrentNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped =  this.mapFunc(this.inputDataSource.next());\n            if(Array.isArray(mapped)) {\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\n            } else {\n                this.activeDataSource = mapped;\n            }\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        return this.activeDataSource.next();\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, {[key:string]:S}> {\n\n    finalValue: {[key:string]:any} = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        //no value passed down we get an assoc array back\n        let toMerge = element.encodeFormElement();\n        if (Object.keys(toMerge)) {\n            let name = element.name.value;\n            this.finalValue.append(name, toMerge[name]);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (Object.keys(toMerge).length) {\n            let name = element.name.value;\n            this.formData.push([name, toMerge[name]]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}"],"sourceRoot":""}