{"version":3,"file":"XmlQuery.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {ArrayCollector, ICollector, IStreamDataSource, ITERATION_STATUS} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\nimport objToArray = Lang.objToArray;\nimport isString = Lang.isString;\nimport equalsIgnoreCase = Lang.equalsIgnoreCase;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout ?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval ?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum Submittables {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait until a certain condition is reached\n * depening on the browser this uses either the mutation observer or a semi compatible interval as fallback\n * @param condition\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = { attributes: true, childList: true, subtree: true, timeout: 500, interval: 100 }): Promise<DomQuery> {\n    const ret = new Promise<DomQuery>((success, error) => {\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        //we do the same but for now ignore the options on the dom query\n        //we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if(condition(root)) {\n                return root;\n            }\n            if(options.childList) {\n                found = (condition(root)) ? root:  root.childNodes.first(condition).value.value;\n            } else if(options.subtree) {\n                found = (condition(root)) ? root: root.querySelectorAll(\" * \").first(condition).value;\n            } else {\n                found = (condition(root)) ? root: null;\n            }\n            return found;\n        }\n        let foundElement = root;\n        if(foundElement = findElement(foundElement, condition)) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                return error(MUT_ERROR);\n            }, options.timeout);\n            const callback: MutationCallback = (mutationList: MutationRecord[], observer: MutationObserver) => {\n                const found = new DomQuery(mutationList.map((mut: MutationRecord) => mut.target)).first(condition);\n                if(found) {\n                    clearTimeout(mutTimeout);\n                    success(found);\n                }\n            }\n\n            const observer = new window.MutationObserver(callback);\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {... options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { //fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n               let found = findElement(root, condition);\n                if(found) {\n                    if(timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                        success(found);\n                    }\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if(interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n    return ret;\n}\n\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute,T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any> new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute,T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any> new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @param src\n * @constructor\n */\nconst DEFAULT_WHITELIST = (src: string) => {\n    return true;\n\n};\n\ninterface IDomQuery {\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The the value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n    /**\n     * the underlying form elements as domquery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded (highest level)\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchevent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery): void;\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the domquery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n    /**\n     * all parents with TagName\n     * @param tagName\n     */\n    parents(tagName: string): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another domquery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinstr?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinstr?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the subnodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    //observable: Observable<DomQuery>;\n\n    //observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length ) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if(!rootNode[cnt]) {\n                    //we skip possible null entries which can happen in\n                    //certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                    continue;\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        //a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow doms\n     * separately and runs the query on earch shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if(queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if(shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if(shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        //filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => {\n            return item != null\n        })\n            .map(item => {\n                return DomQuery.byId(item)\n            }).collect(new ArrayCollector()));\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.indexOf('<!doctype') != -1 ||\n            lowerMarkup.indexOf('<html') != -1 ||\n            lowerMarkup.indexOf('<head') != -1 || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\n            lowerMarkup.indexOf('<body') != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            //table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given elmement\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ?  (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        //We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n\n    /*deep with a selector and a peudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let nodes = [];\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if(subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any> LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        const ret = this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                      this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n\n        return ret;\n    }\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHtml) : Optional.absent;\n        }\n        this.innerHtml = inval;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    set innerHtml(inVal: string) {\n        this.eachElem(elem => elem.innerHTML = inVal);\n    }\n\n    get innerHtml(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matches ||\n            prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || (<any>window).ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        const ret = this.lazyStream\n            .map(item => this._mozMatchesSelector(item.getAsElem(0).value, selector))\n            .filter(match => match)\n            .first();\n        return ret.isPresent();\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                //we could use a filter, but for the best performance we dont\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery) {\n        this.eachElem((item) => {\n            let value1: Element = <Element>elem.getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: (theItem: any) => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string = \"utf-8\") {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.onload = (responseData: any) => {\n            //defer also means we have to process after the ajax response\n            //has been processed\n            //we can achieve that with a small timeout, the timeout\n            //triggers after the processing is done!\n            if (!defer) {\n                this.globalEval(xhr.responseText.replace(/\\n/g, \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n            } else {\n                //TODO not ideal we maybe ought to move to something else here\n                //but since it is not in use yet, it is ok\n                setTimeout(() => {\n                    this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                }, defer);\n            }\n        };\n\n        xhr.onerror = (data: any) => {\n            throw Error(data);\n        };\n        //since we are synchronous we do it after not with onReadyStateChange\n        xhr.send(null);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        const retSet: Set<Element> = new Set();\n        const retArr: Array<Element> = [];\n        const lowerTagName = tagName.toLowerCase();\n\n        let resolveItem = (item: Element) => {\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName && !retSet.has(item)) {\n                retSet.add(item);\n                retArr.push(item);\n            }\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode || (<any> item).host) {\n                item = <Element>item?.parentNode ?? (<any>item)?.host;\n\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        //no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        let finalScripts = [],\n            equi = equalsIgnoreCase,\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && equi(tagName, \"script\") &&\n                    (itemType === \"\" || equi(itemType, \"text/javascript\") ||\n                        equi(itemType, \"javascript\") ||\n                        equi(itemType, \"text/ecmascript\") ||\n                        equi(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            if (finalScripts.length) {\n                                //script source means we have to eval the existing\n                                //scripts before running the include\n                                this.globalEval(finalScripts.join(\"\\n\"));\n\n                                finalScripts = [];\n                            }\n                            this.loadScriptEval(src, 0, \"UTF-8\");\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        //TODO this probably needs to be changed due to our new parsing structures\n                        //probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push(evalText);\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            //script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) //preceding 2, following == 4)\n                .each(item => execScrpt(item));\n\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        } catch (e) {\n            if (console && console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ?? (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") ?? \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") ?? \"text/css\");\n\n                if (styleSheet?.cssText ?? false) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n            },\n\n            execCss = (item: Element) => {\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: Array<Node> = Array.prototype.slice.call(item.childNodes);\n                    if (childNodes) {\n                        childNodes.forEach(child => innerText.push((<Element>child).innerHTML || (<CharacterData>child).data));\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinstr), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {//no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != Submittables.SELECT &&\n                        elemType != Submittables.BUTTON &&\n                        elemType != Submittables.RESET &&\n                        elemType != Submittables.SUBMIT &&\n                        elemType != Submittables.IMAGE\n                    ) && (\n                        (\n                            elemType != Submittables.CHECKBOX && elemType != Submittables.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let files: any = (<any>element.value).value?.files ?? [];\n                    if (files?.length) {\n                        //xhr level2\n                        target.append(name).value = files[0];\n                    } else {\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let cDataBlock = [];\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    //TODO this part probably will be removed\n    //because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the subdome before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = { attributes: true, childList: true, subtree: true, timeout: 500, interval: 100 }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //from\n    // http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                //the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                //the caretposition is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            //now this is ugly, but not supported input types throw errors for selectionStart\n            //just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        //the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * concats the elements of two Dom Queries into a single one\n     * @param toAttach\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): any {\n        const ret = this.lazyStream.concat(toAttach.lazyStream).collect(new DomQueryCollector());\n        //we now filter the doubles out\n        if(!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; //ie11 does not support sets, we have to fake it\n        return ret.lazyStream.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }).collect(new DomQueryCollector());\n    }\n\n\n    /*[observable](): Observable<DomQuery> {\n        return this.observable;\n    }\n\n    get observable(): Observable<DomQuery> {\n        let observerFunc = (observer:Subscriber<DomQuery>) => {\n            try {\n                this.each(dqNode => {\n                    observer.next(dqNode);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }\n\n    get observableElem(): Observable<Element> {\n        let observerFunc = (observer:Subscriber<Element>) => {\n            try {\n                this.eachElem(node => {\n                    observer.next(node);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }*/\n\n}\n\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assings an new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n\n        this.buildPath(accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambigous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(accessPath: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\nimport type = Mocha.utils.type;\n\n/**\n * special status of the datasource location pointer\n * if an access, outside of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fullfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * returns the next element in the stream\n     * difference to next is, that the internal data position\n     * is not changed, so next still will deliver the next item from the current\n     * data position. Look ahead is mostly needed internally\n     * by possible endless data constructs which have no fixed data boundary, or index\n     * positions. (aka infinite sets, or flatmapped constructs)\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T |ITERATION_STATUS {\n        if((this.dataPos+cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while(!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos ++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T |ITERATION_STATUS;\n\n        for(let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if(inCache || this.filterFunc(lookupVal)) {\n                cnt --;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n       return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources= [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        //easy access trial\n        if(this?.activeDataSource && this?.activeDataSource?.lookAhead(cnt) != ITERATION_STATUS.EO_STRM) {\n            //this should coverr 95% of all accesses\n            return this?.activeDataSource.lookAhead(cnt);\n        }\n\n        /**\n         * we only can determine how many elems datasource has by going up\n         * (for now this suffices, however not ideal, we might have to introduce a numElements or so)\n         * @param datasource\n         */\n        function howManyElems(datasource: IStreamDataSource<any>): number {\n            let cnt = 1;\n            while(datasource.lookAhead(cnt) !== ITERATION_STATUS.EO_STRM) {\n                cnt++;\n            }\n            return cnt - 1;\n        }\n        function readjustSkip(dataSource) {\n            let skippedElems = (dataSource) ? howManyElems(dataSource) : 0;\n            cnt = cnt - skippedElems;\n        }\n\n        if(this.activeDataSource) {\n            readjustSkip(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams subsequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them so we introduce a small o2 here\n        for(let dsLoop = 1; true ; dsLoop++) {\n            let currDatasource = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            if(currDatasource === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mapped = this.mapFunc(currDatasource as T);\n            //it either comes in as datasource or as array\n            let currentDataSource = this.toDatasource(mapped);\n            let ret = currentDataSource.lookAhead(cnt);\n            if(ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            readjustSkip(currDatasource);\n\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);;\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if(this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS{\n        if(!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, {[key: string]: S} > {\n    finalValue: {[key:string]: any} = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string> element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new window.DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (<any>window)?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(121);\n"],"names":["Submittables","trim","Lang","objToArray","isString","equalsIgnoreCase","waitUntilDom","root","condition","options","attributes","childList","subtree","timeout","interval","ret","Promise","success","error","MUT_ERROR","Error","findElement","childNodes","first","value","querySelectorAll","foundElement","DomQuery","MutationObserver","setTimeout","window","mutationList","observer","found","map","mut","target","clearTimeout","eachElem","item","observe","setInterval","clearInterval","element","name","defaultVal","val","this","get","orElse","values","length","getAttribute","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","style","Style","DEFAULT_WHITELIST","src","rootNode","pos","_limits","Optional","isAbsent","push","getAsElem","allElems","getIf","isTag","tagName","nodeName","toLowerCase","isPresent","absent","Stream","of","allMatch","el","checked","newChecked","querySelectorAllDeep","queryStr","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","childNodeArr","concat","asArray","LazyStream","filter","byId","collect","ArrayCollector","selector","document","indexOf","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","nodes","res","foundNodes","selectors","split","cnt2","levelSelector","id","includeRoot","subItems","reduce","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","inval","innerHtml","dispatchEvent","evt","elem","retArr","inVal","_mozMatchesSelector","toMatch","prot","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","i","filterSelector","matched","lazyStream","match","selectorStage","nodeSelector","func","len","firstElem","each","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","appendTo","orElseLazy","theItem","loadScriptEval","defer","charSet","xhr","XMLHttpRequest","open","setRequestHeader","onload","responseData","responseText","replace","onerror","data","send","insertAfter","existingItem","existingElement","nextSibling","toInsertParams","insertElem","insertBefore","elseValue","parents","retSet","Set","lowerTagName","resolveItem","has","host","copyAttrs","sourceItem","sourceNode","attrs","resolveAttributeHolder","attrName","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","whilteListed","finalScripts","equi","execScrpt","itemType","evalText","text","innerText","go","substring","stream","flatMap","sort","node1","node2","compareDocumentPosition","e","console","message","description","applyStyle","newSS","styleSheet","sheet","cssText","createTextNode","Array","prototype","forEach","child","execCss","click","fireEvent","addEventListener","listener","removeEventListener","eventName","nodeType","eventClass","createEvent","initEvent","synthetic","createEventObject","textContent","joinstr","text1","text2","encodeFormElement","toMerge","Config","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","append","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","inputValue","reduced","subNodes","from","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","ITERATION_STATUS","EO_STRM","current","BEF_STRM","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","DomQueryCollector","idx","notFound","DQ","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","Object","assign","theArgs","nextSource","keys","nextKey","hasOwnProperty","_value","fn","Monad","currentPos","key","currKey","keyVal","arrPos","arrayIndex","getIfPresent","toJson","JSON","stringify","start","parseInt","resolve","resolver","rootElem","newVal","alternative","ConfigEntry","shallowCopy$","ofAssoc","AssocArrayCollector","deepCopy$","shallowMerge","other","overwrite","withAppend","isArray","noKeys","accessPath","lastKey","pathExists","buildPath","finalKeyArrPos","retVal","apply","appendIf","assignIf","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","total","SequenceDataSource","dataPos","max","ArrayStreamDataSource","filterFunc","parent","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","lookupVal","loop","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","readjustSkip","dataSource","skippedElems","datasource","howManyElems","dsLoop","currDatasource","toDatasource","ds","FlatMapStreamDataSource","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ofDataSource","toAppend","onElem","strmR","startVal","val1","last","anyMatch","noneMatch","comparator","newArr","collector","ofStreamDataSource","isOverLimits","nextFilter","t","stop","value1","value2","el1","el2","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","toString","serialized","XMLSerializer","constructor","serializeToString","parserErrorText","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}