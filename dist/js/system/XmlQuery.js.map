{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Monad","this","_value","fn","inval","result","mapped","map","Optional","super","flatMap","presentRunnable","absent","isAbsent","isPresent","elseValue","func","val","fromNullable","currentPos","cnt","length","currKey","keyVal","arrPos","arrayIndex","getClass","Array","getIfPresent","defaultVal","JSON","stringify","start","indexOf","end","parseInt","substring","ValueEmbedder","rootElem","valueKey","newVal","alternative","ConfigEntry","Config","root","instance","mergeMaps","other","overwrite","apply","getIf","keys","buildPath","slice","condition","parentVal","parentPos","alloc","arr","push","setVal","tempVal","Lang","_instance","resolverProducer","defaultValue","e","it","splitter","retArr","split","trim","offset","ret","len","str","ws","replace","test","charAt","arguments","String","Function","scope","method","maps","blockFilter","item","whitelistFilter","retVal","arrForEach","mixMaps","dest","src","obj","pack","finalOffset","finalPack","concat","callbackfn","startPos","startPosFinal","thisObj","convertedArr","objToArray","forEach","Error","arrIndexOf","element","fromIndex","pos","arrFinal","filter","args","argNames","UDEF","source","destination","toLowerCase","timeout","handler","reject","setTimeout","clearTimeout","setInterval","clearInterval","probe","theType","isString","PromiseStatus","Promise","executor","status","PENDING","allFuncs","data","resolve","promises","myapply","promiseCnt","myPromise","__last__","finally","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","CancellablePromise","cancellator","ElementAttribute","orElse","values","getAttribute","setAttribute","DEFAULT_JSF_WHITELIST","DomQuery","rootNode","foundElement","querySelectorAll","getAsElem","allElems","tagName","nodeName","elements","each","formElement","stream","orElseLazy","attr","disabled","childNodeArr","eachElem","childNodes","selector","document","byId","byTagName","code","globalEval","markup","dummyPlaceHolder","createElement","html","childs","detach","index","defaults","node","parentNode","removeChild","nodes","res","id","includeRoot","clazz","hasIt","oldClass","oldClasses","found","hasClass","newClasses","join","firstElem","innerHTML","toMatch","prot","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","matches","window","ownerDocument","matched","_mozMatchesSelector","nodeSelector","selectorStage","filterSelector","reArr","nonce","head","getElementsByTagName","documentElement","script","type","newScriptElement","appendChild","elem","theItem","defer","charSet","xhr","XMLHttpRequest","open","setRequestHeader","send","readyState","responseText","toInsertParams","existingItem","existingElement","nextSibling","insertElem","insertBefore","lowerTagName","resolveItem","sourceItem","sourceNode","attributes","resolveAttributeHolder","checked","attrName","runEmbeddedScripts","runEmbeddedCss","fromMarkup","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","insertAfter","runScripts","runCss","whilteListed","_Lang","finalScripts","execScrpt","itemType","equalsIgnoreCase","loadScriptEval","text","go","scriptElements","console","error","message","description","applyStyle","style","newSS","styleSheet","sheet","cssText","createTextNode","execCss","innerText","cDataBlock","fireEvent","listener","options","addEventListener","removeEventListener","eventName","doc","nodeType","dispatchEvent","eventClass","event","createEvent","initEvent","synthetic","createEventObject","joinstr","textContent","reduce","text1","text2","toMerge","target","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","files","inputValue","from","to","Math","min","DomQueryCollector","Stream","mapStreams","startVal","val1","collector","collect","finalValue","ArrayCollector","XMLQuery","parseXML","xml","saveResolveLazy","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","createIe11DomQueryShim","XMLSerializer","serializeToString","txt"],"mappings":"wEACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,+BClFrD,sLAoEO,MAAMC,EACT,YAAYf,GACRgB,KAAKC,OAASjB,EAKlB,YACI,OAAOgB,KAAKC,OAGhB,IAAOC,GACEA,IACDA,EAAMC,GAAkBA,GAE5B,IAAIC,EAAYF,EAAGF,KAAKhB,OACxB,OAAO,IAAIe,EAAMK,GAGrB,QAAWF,GACP,IAAIG,EAAqBL,KAAKM,IAAIJ,GAClC,UAAO,IAAsBG,GAAoB,MAAVA,GAAkBA,EAAOrB,iBAAiBe,GAC7EM,EAASA,EAAOrB,MAEpB,OAAOqB,GAaR,MAAME,UAAoBR,EAK7B,YAAYf,GACRwB,MAAMxB,GAGV,YACI,OAAIgB,KAAKC,kBAAkBF,EAChBC,KAAKC,OAAOQ,UAAUzB,MAE1BgB,KAAKC,OAGhB,oBAAuBjB,GACnB,OAAO,IAAIuB,EAASvB,GAIxB,WACI,YAAO,IAAsBgB,KAAKhB,OAAS,MAAQgB,KAAKhB,MAM5D,UAAU0B,GACN,IAAIC,EAASX,KAAKY,WAIlB,OAHKD,GAAUD,GACXA,EAAgBxC,KAAK8B,KAAMA,OAEvBW,EAGZ,cAAcD,EAA6C,UAGvD,OADAV,KAAKa,UAAU3C,KAAK8B,KAAMU,GACnBV,KAGX,OAAOc,GACH,OAAId,KAAKa,YACEb,KAGU,MAAbc,EACOP,EAASI,OAEbX,KAAKS,QAAQ,IAAMK,GASlC,WAAWC,GACP,OAAIf,KAAKa,YACEb,KAEAA,KAAKS,QAAQM,GAQ5B,QAAWb,GACP,IAAIc,EAAMR,MAAMC,QAAQP,GACxB,OAAMc,aAAeT,EAICS,EAAIP,UAHfF,EAASU,aAAaD,EAAIhC,OAUzC,SAAYM,GAER,IAAI4B,EAA4BlB,KAChC,IAAK,IAAImB,EAAM,EAAGA,EAAM7B,EAAI8B,OAAQD,IAAO,CACvC,IAAIE,EAAUrB,KAAKsB,OAAOhC,EAAI6B,IAC1BI,EAASvB,KAAKwB,WAAWlC,EAAI6B,IAEjC,GAAgB,KAAZE,GAAkBE,GAAU,GAE5B,IADAL,EAAalB,KAAKyB,WAAWR,aAAeC,EAAWlC,iBAAiB0C,MAAiBR,EAAWlC,MAAMoC,OAASG,EAAS,KAAOL,EAAWlC,MAAMuC,GAAnE,OAClEX,WACX,OAAOM,OAGR,GAAIG,GAAWE,GAAU,EAAzB,CACH,GAAIL,EAAWS,aAAaN,GAAST,WACjC,OAAOM,EAGX,IADAA,EAAcA,EAAWS,aAAaN,GAASrC,iBAAiB0C,MAAS1B,KAAKyB,WAAWR,aAAaC,EAAWS,aAAaN,GAASrC,MAAMuC,IAAWvB,KAAKyB,WAAWd,QACzJC,WACX,OAAOM,MANR,CAaP,IAFIA,EAAaA,EAAWS,aAAaN,IAE1BT,WACX,OAAOM,EACAK,GAAU,IACjBL,EAAalB,KAAKyB,WAAWR,aAAaC,EAAWlC,MAAMuC,MAKnE,OAFaL,EAYjB,MAAMhB,GACF,OAAIF,KAAKY,YAGFV,EAAGF,KAAKhB,OAUnB,IAAO4C,EAAkBrB,EAASI,QAC9B,OAAIX,KAAKY,WACEZ,KAAKyB,WAAWR,aAAaW,GAAYnB,UAG7CT,KAAKyB,WAAWR,aAAajB,KAAKhB,OAAOyB,UAGpD,SACI,OAAOoB,KAAKC,UAAU9B,KAAKhB,OAUrB,WACN,OAAOuB,EAID,WAAWjB,GACjB,IAAIyC,EAAQzC,EAAI0C,QAAQ,KACpBC,EAAM3C,EAAI0C,QAAQ,KACtB,OAAID,GAAS,GAAKE,EAAM,GAAKF,EAAQE,EAC1BC,SAAS5C,EAAI6C,UAAUJ,EAAQ,EAAGE,KAEjC,EAKN,OAAO3C,GACb,IAAIyC,EAAQzC,EAAI0C,QAAQ,KAExB,OAAID,GAAS,EACFzC,EAAI6C,UAAU,EAAGJ,GAEjBzC,EASf,aAAgBA,GACZ,OAAIU,KAAKY,WACEZ,KAAKyB,WAAWd,OAEpBX,KAAKyB,WAAWR,aAAajB,KAAKhB,MAAMM,IAAMmB,WAjMlD,EAAAE,OAASJ,EAASU,aAAa,MAsMnC,MAAMmB,UAAyB7B,EAOlC,YAAY8B,EAAeC,EAAmB,SAC1C9B,MAAM6B,GAENrC,KAAKV,IAAMgD,EAGf,YACI,OAAOtC,KAAKC,OAAYD,KAAKC,OAAOD,KAAKV,KAAO,KAGpD,UAAUiD,GACHvC,KAAKC,SAGRD,KAAKC,OAAOD,KAAKV,KAAOiD,GAG5B,OAAOzB,GACH,IAAI0B,EAAc,GAElB,OADAA,EAAYxC,KAAKV,KAAOwB,EACjBd,KAAKa,YAAcb,KAAO,IAAIoC,EAAcI,EAAaxC,KAAKV,KAGzE,WAAWyB,GACP,GAAIf,KAAKa,YACL,OAAOb,KACJ,CACH,IAAIwC,EAAc,GAElB,OADAA,EAAYxC,KAAKV,KAAOyB,IACjB,IAAIqB,EAAcI,EAAaxC,KAAKV,MAWzC,WACN,OAAO8C,EAGX,oBAAuBpD,EAAasD,EAAmB,SACnD,OAAO,IAAIF,EAAcpD,EAAOsD,IAjD7B,EAAA3B,OAAUyB,EAAcnB,aAAa,MA0DhD,MAAMwB,UAAuBL,EAOzB,YAAYC,EAAe/C,EAAUiC,GACjCf,MAAM6B,EAAU/C,GAEhBU,KAAKuB,YAAU,IAAsBA,EAAUA,GAAU,EAG7D,YACI,MAAgB,IAAZvB,KAAKV,KAAaU,KAAKuB,QAAU,EAC1BvB,KAAKC,OAAOD,KAAKuB,QACjBvB,KAAKV,KAAOU,KAAKuB,QAAU,EAC3BvB,KAAKC,OAAOD,KAAKV,KAAKU,KAAKuB,QAE/BvB,KAAKC,OAAOD,KAAKV,KAG5B,UAAU0B,GACU,IAAZhB,KAAKV,KAAaU,KAAKuB,QAAU,EACjCvB,KAAKC,OAAOD,KAAKuB,QAAUP,EAEpBhB,KAAKV,KAAOU,KAAKuB,QAAU,EAClCvB,KAAKC,OAAOD,KAAKV,KAAKU,KAAKuB,QAAUP,EAGzChB,KAAKC,OAAOD,KAAKV,KAAO0B,GA3BrB,EAAAL,OAAS8B,EAAYxB,aAAa,MAqCtC,MAAMyB,UAAenC,EACxB,YAAYoC,GACRnC,MAAMmC,GAGV,kBACI,OAAO,IAAID,EAAO,OAAKE,SAASC,UAAU,CAAC,GAAI7C,KAAKhB,OAAS,MAGjE,oBAAuBA,GACnB,OAAO,IAAI0D,EAAO1D,GAMtB,aAAa8D,EAAeC,GAAY,GACpC,IAAK,IAAIzD,KAAOwD,EAAM9D,MACd+D,GAAazD,KAAOU,KAAKhB,MACzBgB,KAAKgD,MAAM1D,GAAKN,MAAQ8D,EAAMG,MAAM3D,GAAKN,MAChCM,KAAOU,KAAKhB,QACrBgB,KAAKgD,MAAM1D,GAAKN,MAAQ8D,EAAMG,MAAM3D,GAAKN,OAKrD,SAASkE,GACL,GAAIA,EAAK9B,OAAS,EACd,OAGJpB,KAAKmD,UAAUD,GAEf,IAAI7B,EAAUrB,KAAKsB,OAAO4B,EAAKA,EAAK9B,OAAS,IACzCG,EAASvB,KAAKwB,WAAW0B,EAAKA,EAAK9B,OAAS,IAKhD,OAJa,IAAIqB,EAA2B,GAAfS,EAAK9B,OAAcpB,KAAKhB,MAAQgB,KAAKiD,MAAMD,MAAMhD,KAAMkD,EAAKE,MAAM,EAAGF,EAAK9B,OAAS,IAAIpC,MAChHqC,EAASE,GAMjB,QAAQ8B,KAAuBH,GAC3B,OAAOG,EAAYrD,KAAKgD,SAASE,GAAQ,CAAClE,MAAO,MAGrD,SAASkE,GACL,OAAOlD,KAAKyB,WAAWR,aAAaT,MAAMyC,MAAMD,MAAMhD,KAAMkD,GAAMlE,OAGtE,IAAI4C,GACA,OAAO5B,KAAKyB,WAAWR,aAAaT,MAAM5B,IAAIgD,GAAY5C,OAI9D,OAAOM,GAIH,OAHIA,KAAOU,KAAKhB,cACLgB,KAAKhB,MAAMM,GAEfU,KAGX,SACI,OAAO6B,KAAKC,UAAU9B,KAAKhB,OAGrB,WACN,OAAO0D,EAGH,OAAO1B,GACXhB,KAAKC,OAASe,EAGV,UAAUkC,GACd,IAAIlC,EAAMhB,KACNsD,EAAYtD,KAAKyB,WAAWR,aAAa,MACzCsC,GAAa,EACbC,EAAQ,SAAUC,EAAiBrC,GACnC,GAAIqC,EAAIrC,OAASA,EACb,IAAK,IAAID,EAAMsC,EAAIrC,OAAQD,EAAMC,EAAQD,IACrCsC,EAAIC,KAAK,KAKrB,IAAK,IAAIvC,EAAM,EAAGA,EAAM+B,EAAK9B,OAAQD,IAAO,CACxC,IAAIE,EAAUrB,KAAKsB,OAAO4B,EAAK/B,IAC3BI,EAASvB,KAAKwB,WAAW0B,EAAK/B,IAElC,GAAgB,KAAZE,GAAkBE,GAAU,EAAG,CAE/BP,EAAI2C,OAAQ3C,EAAIhC,iBAAiB0C,MAASV,EAAIhC,MAAQ,IACtDwE,EAAMxC,EAAIhC,MAAOuC,EAAS,GACtBgC,GAAa,IACbD,EAAUtE,MAAMuE,GAAavC,EAAIhC,OAErCsE,EAAYtC,EACZuC,EAAYhC,EACZP,EAAMhB,KAAKyB,WAAWR,aAAaD,EAAIhC,MAAMuC,IAC7C,SAGJ,IAAIqC,EAAkB5C,EAAIiC,MAAM5B,GAChC,IAAe,GAAXE,EACIqC,EAAQhD,WACRgD,EAAkB5D,KAAKyB,WAAWR,aAAaD,EAAIhC,MAAMqC,GAAW,IAEpEL,EAAW4C,MAEZ,CACH,IAAIH,EAAOG,EAAQ5E,iBAAiB0C,MAASkC,EAAQ5E,MAAQ,GAC7DwE,EAAMC,EAAKlC,EAAS,GACpBP,EAAIhC,MAAMqC,GAAWoC,EACrBG,EAAU5D,KAAKyB,WAAWR,aAAawC,EAAIlC,IAE/C+B,EAAYtC,EACZuC,EAAYhC,EACZP,EAAW4C,EAGf,OAAO5D,Q,6BChhBf,8DAsBO,MAAM6D,EAIT,sBAII,OAHKA,EAAKC,YACND,EAAKC,UAAY,IAAID,GAElBA,EAAKC,UAqBhB,mBAAsBC,EAA2BC,EAAkB,MAC/D,IACI,IAAI5D,EAAS2D,IACb,YAAI,IAAsB3D,GAAU,MAAQA,EACjC,WAASa,aAAa+C,GAE1B,WAAS/C,aAAab,GAC/B,MAAO6D,GACL,OAAO,WAAStD,QAIxB,uBAA0BoD,EAA2BC,EAAwB,MACzE,IACI,IAAI5D,EAAS2D,IACb,YAAI,IAAsB3D,GAAU,MAAQA,EACjC,WAASa,aAAa+C,KAE1B,WAAS/C,aAAab,GAC/B,MAAO6D,GACL,OAAO,WAAStD,QAUxB,WAAWuD,EAAYC,EAA4B,QAI/C,IAAIC,EAASF,EAAGG,MAAMF,GACtB,IAAK,IAAIhD,EAAM,EAAGA,EAAMiD,EAAOhD,OAAQD,IACnCiD,EAAOjD,GAAOnB,KAAKsE,KAAKF,EAAOjD,IAEnC,OAAOiD,EAGX,SAASX,EAAYc,EAAiB,GAClC,IAAIC,EAAM,IAAI9C,MAAM+B,EAAIrC,QACpBqD,EAAMhB,EAAIrC,OACdmD,EAAS,GAAoB,EAC7B,IAAK,IAAIpD,EAAM,EAAGA,EAAMsD,EAAKtD,IACzBqD,EAAIf,EAAItC,IAAQA,EAAMoD,EAE1B,OAAOC,EAQX,KAAKE,GAED,IAAIC,EAAK,KAAM5G,GADf2G,EAAMA,EAAIE,QAAQ,SAAU,KACLxD,OAEvB,KAAOuD,EAAGE,KAAKH,EAAII,SAAS/G,MAG5B,OAAO2G,EAAItB,MAAM,EAAGrF,EAAI,GAU5B,SAASmG,GAGL,QAASa,UAAU3D,QAAgB,MAAN8C,IAA4B,iBAANA,GAAkBA,aAAcc,QAGvF,OAAOd,GACH,OAAOA,aAAce,UAA0B,mBAAPf,EAgB5C,MAAMgB,EAAYC,GACd,OAAQD,EAAiB,WACrB,OAAOC,EAAOnC,MAAMkC,EAAOH,WAAa,KAD5BI,EAWpB,UAAUC,EACArC,GAAqB,EACrBsC,EAAwB,CAACC,IAAS,GAClCC,EAA4B,CAACD,IAAS,IAC5C,IAAIE,EAAS,GAIb,OAHAxF,KAAKyF,WAAWL,EAAOE,IACnBtF,KAAK0F,QAAQF,EAAQF,EAAMvC,EAAWsC,EAAaE,KAEhDC,EAYX,QAAWG,EACAC,EACA7C,EACAsC,EACAE,GAEP,IAAK,IAAIjG,KAAOsG,EACPA,EAAIhG,eAAeN,KACpB+F,GAAeA,EAAY/F,IAG3BiG,IAAoBA,EAAgBjG,KAWpCqG,EAAKrG,GARJyD,OATG,IAiByB6C,EAAItG,GAAQsG,EAAItG,GAAOqG,EAAKrG,QAjBrD,IAeyBqG,EAAKrG,GAAQqG,EAAKrG,GAAOsG,EAAItG,KAKlE,OAAOqG,EAWX,WAAcE,EAAUtB,EAAiBuB,GACrC,IAAKD,EACD,OAAOC,GAAQ,KAInB,GAAID,aAAenE,QAAU6C,IAAWuB,EAAM,OAAOD,EACrD,IAAIE,OAAe,IAAsBxB,GAAU,MAAQA,EAAUA,EAAS,EAC1EyB,EAAYF,GAAQ,GACxB,IACI,OAAOE,EAAUC,OAAOvE,MAAM/B,UAAUyD,MAAMlF,KAAK2H,EAAKE,IAC1D,MAAO9B,GAOL,IAAK,IAAI9C,EAAM4E,EAAa5E,EAAM0E,EAAIzE,OAAQD,IAC1C6E,EAAUtC,KAAKmC,EAAI1E,IAEvB,OAAO6E,GAsBf,WAAcvC,EAAUyC,EAA2DC,EAAmBjB,GAClG,IAAKzB,IAAQA,EAAIrC,OAAQ,OACzB,IAAIgF,EAAgBD,GAAY,EAC5BE,EAAUnB,EAGVoB,EAAyBtG,KAAKuG,WAAc9C,GAChD,EAAa6C,EAAalD,MAAMgD,GAAeI,QAAQN,EAAYG,GAAWC,EAAaE,QAAQN,EAAYG,GAQnH,SAAY5C,EAAUiB,GAClB,IAAKjB,IAAQiB,EACT,MAAM+B,MAAM,wCAEhB,OAAqC,GAA9BzG,KAAK0G,WAAWjD,EAAKiB,GAahC,WAAcjB,EAAUkD,EAAYC,GAChC,IAAKnD,IAAQA,EAAIrC,OAAQ,OAAQ,EACjC,IAAIyF,EAAMD,GAAa,EAEvB,OADAnD,EAAMzD,KAAKuG,WAAc9C,IACdzB,QAAQ2E,EAASE,GAkBhC,UAAapD,EAAUyC,EAAgEC,EAAoBjB,GACvG,IAAKzB,IAAQA,EAAIrC,OAAQ,MAAO,GAChC,IAAI0F,EAAW9G,KAAKuG,WAAc9C,GAClC,OAAQ,EAAaqD,EAAS1D,MAAM+C,GAAUY,OAAOb,EAAYhB,GAAS4B,EAASC,OAAOb,EAAYhB,GAmB1G,UAAaS,EAAWqB,EAAuCC,GAC3D,IAAIC,EAAO,YACX,GAAID,EACA,IAAK,IAAI9F,EAAM,EAAGA,EAAiB6F,EAAM5F,OAAQD,IAEzC+F,UAAevB,EAAK,IAAMsB,EAAS9F,MACnCwE,EAAK,IAAMsB,EAAS9F,IAAQ6F,EAAK7F,IAEjC+F,UAAevB,EAAKsB,EAAS9F,MAC7BwE,EAAKsB,EAAS9F,IAAQ6F,EAAK7F,SAInC,IAAK,IAAI7B,KAAO0H,EACPA,EAAKpH,eAAeN,KACrB4H,UAAevB,EAAK,IAAMrG,KAC1BqG,EAAK,IAAMrG,GAAO0H,EAAK1H,IAEvB4H,UAAevB,EAAKrG,KACpBqG,EAAKrG,GAAO0H,EAAK1H,KAI7B,OAAOqG,EASX,iBAAiBwB,EAAgBC,GAE7B,OAAKD,IAAWC,MAIXD,IAAWC,IAETD,EAAOE,gBAAkBD,EAAYC,cAMhD,QAAQC,GACJ,IAAIC,EAAe,KACnB,OAAO,IAAI,qBAAmB,CAACvE,EAAiBwE,KAC5CD,EAAUE,WAAW,KACjBzE,KACDsE,IACJ,KACKC,IACAG,aAAaH,GACbA,EAAU,QAKtB,SAASD,GACL,IAAIC,EAAe,KACnB,OAAO,IAAI,qBAAmB,CAACvE,EAAiBwE,KAC5CD,EAAUI,YAAY,KAClB3E,KACDsE,IACJ,KACKC,IACAK,cAAcL,GACdA,EAAU,QAWf,WAAWM,EAAYC,GAC1B,OAAO9H,KAAK+H,SAASD,UAAkBD,GAASC,EAAUD,aAAiBC,K,6BC/ZnF,oJAEYE,EAFZ,QAEA,SAAYA,GACR,yBAAS,+BAAY,2BADzB,CAAYA,MAAa,KAoBlB,MAAMC,EAMT,YAAYC,GAJZ,KAAAC,OAASH,EAAcI,QACb,KAAAC,SAAuB,GAK7BrI,KAAKhB,MAAQkJ,EACblI,KAAKhB,MAAOsJ,GAActI,KAAKuI,QAAQD,GAAQA,GAActI,KAAKwH,OAAOc,IAG7E,cAAcE,GAEV,IACIC,EADAC,EAAa,EAGbC,EAAY,IAAIV,EAAQ,CAACjF,EAAiBwE,KAC1CiB,EAAUzF,IAEVkF,EAAW,KACXQ,IAEIF,EAASpH,QAAUsH,GACnBD,KAGFP,EAAUU,UAAW,EAE3B,IAAK,IAAIzH,EAAM,EAAGA,EAAMqH,EAASpH,OAAQD,IACrCqH,EAASrH,GAAK0H,QAAQX,GAE1B,OAAOS,EAGX,eAAeH,GAEX,IACIC,EACAK,EAEAH,EAAY,IAAIV,EAAQ,CAACjF,EAAiBwE,KAC1CiB,EAAUzF,EACV8F,EAAWtB,IAGXuB,EAAe,KACTN,GACFA,IAEJA,EAAU,KACVK,EAAW,KACJ,MAELC,EAAcH,UAAW,EAE/B,IAAII,EAAe,KACTF,GACFA,IAEJA,EAAW,KACXL,EAAU,KACH,MAELO,EAAcJ,UAAW,EAE/B,IAAK,IAAIzH,EAAM,EAAGA,EAAMqH,EAASpH,OAAQD,IACrCqH,EAASrH,GAAK8H,KAAKF,GACnBP,EAASrH,GAAK+H,MAAMF,GAExB,OAAOL,EAGX,cAAcQ,GAcV,OAba,IAAIlB,EAAQ,CAACM,EAAcf,KAEhC2B,aAAkBlB,EAClBkB,EAAOF,KAAMjI,IACTwG,EAAOxG,KAGXyG,WAAW,KACPD,EAAO2B,IACR,KAOf,eAAeA,GAYX,OAXa,IAAIlB,EAAQ,CAACM,EAAcf,KAEhC2B,aAAkBlB,EAClBkB,EAAOF,KAAMjI,GAAQuH,EAAQvH,IAE7ByG,WAAW,KACPc,EAAQY,IACT,KAQf,KAAKC,EAAkCC,GAMnC,OALArJ,KAAKqI,SAAS3E,KAAK,CAAC,KAAQ0F,IACxBC,GACArJ,KAAKqI,SAAS3E,KAAK,CAAC,MAAS2F,IAEjCrJ,KAAKsJ,kBACEtJ,KAGX,MAAMoJ,GAGF,OAFApJ,KAAKqI,SAAS3E,KAAK,CAAC,MAAS0F,IAC7BpJ,KAAKsJ,kBACEtJ,KAGX,QAAQoJ,GACJ,IAAUpJ,KAAMuJ,WAOhB,OAFAvJ,KAAKqI,SAAS3E,KAAK,CAAC,QAAW0F,IAC/BpJ,KAAKsJ,kBACEtJ,KANGA,KAAMuJ,WAAWV,QAAQO,GAS7B,QAAQpI,GAEd,KAAOhB,KAAKqI,SAASjH,QACZpB,KAAKqI,SAAS,GAAGY,MADG,CAIzB,IAAI/I,EAAKF,KAAKqI,SAASmB,QAEnBC,EAAa,WAASxI,aAAaf,EAAG+I,KAAKjI,IAE/C,IAAIyI,EAAW5I,YAYX,MATA,IADAG,GADAyI,EAAaA,EAAWhJ,WACPzB,iBACEiJ,EAMf,YAFAjI,KAAK0J,uBAAuB1I,GASxChB,KAAK2J,cACL3J,KAAKmI,OAASH,EAAc4B,WAGtB,OAAO5I,GAEb,KAAOhB,KAAKqI,SAASjH,SACbpB,KAAKqI,SAAS,GAAGQ,SADI,CAIzB,IAAI3I,EAAKF,KAAKqI,SAASmB,QACvB,GAAItJ,EAAGgJ,MAAO,CACV,IAAIO,EAAa,WAASxI,aAAaf,EAAGgJ,MAAMlI,IAChD,GAAIyI,EAAW5I,YAAa,CAGxB,IADAG,GADAyI,EAAaA,EAAWhJ,WACPzB,iBACEiJ,EAGf,YADAjI,KAAK0J,uBAAuB1I,GAGhChB,KAAKmI,OAASH,EAAc6B,SAC5B,MAEA,OAKZ7J,KAAKmI,OAASH,EAAc6B,SAC5B7J,KAAK2J,cAGC,cACN,KAAO3J,KAAKqI,SAASjH,QAAQ,CACzB,IAAIlB,EAAKF,KAAKqI,SAASmB,QACnBtJ,EAAG2I,SACH3I,EAAG2I,WAKP,kBACJ,IAAIiB,EAAY,GACZC,EAAO,GACX,IAAK,IAAI5I,EAAM,EAAGA,EAAMnB,KAAKqI,SAASjH,OAAQD,IAC1C,IAAK,IAAI7B,KAAOU,KAAKqI,SAASlH,GACtBnB,KAAKqI,SAASlH,GAAK7B,GAAKsJ,SACxBkB,EAAUpG,KAAK1D,KAAKqI,SAASlH,IAE7B4I,EAAKrG,KAAK1D,KAAKqI,SAASlH,IAIpCnB,KAAKqI,SAAW0B,EAAK9D,OAAO6D,GAGxB,uBAAuB9I,GAC3B,IAAK,IAAIG,EAAM,EAAGA,EAAMnB,KAAKqI,SAASjH,OAAQD,IAC1C,IAAK,IAAI7B,KAAOU,KAAKqI,SAASlH,GAC1BH,EAAI1B,GAAKU,KAAKqI,SAASlH,GAAK7B,KAerC,MAAM0K,UAA2B/B,EAMpC,YAAYC,EAA+E+B,GACvFzJ,MAAM0H,GAuBF,KAAA+B,YAAc,OAtBlBjK,KAAKiK,YAAcA,EAGvB,SACIjK,KAAKmI,OAASH,EAAc6B,SAC5B7J,KAAK2J,cAEL3J,KAAKqI,SAAW,GAGpB,KAAKe,EAAkCC,GACnC,OAA2B7I,MAAMyI,KAAKG,EAAcC,GAGxD,MAAMD,GACF,OAA2B5I,MAAM0I,MAAME,GAG3C,QAAQA,GACJ,OAA2B5I,MAAMqI,QAAQO,M,6BC1RjD,4KAsBO,MAAMc,UAAyB,gBAElC,YAAoBvD,EAA2BrI,EAAsBsD,EAAqB,MACtFpB,MAAMmG,EAASrI,GADC,KAAAqI,UAA2B,KAAArI,OAAsB,KAAAsD,aAIrE,YACI,IAAIZ,EAAiBhB,KAAK2G,QAAQ/H,IAAI,GAAGuL,SAAcC,OACvD,OAAKpJ,EAAII,OAGFJ,EAAI,GAAGqJ,aAAarK,KAAK1B,MAFrB0B,KAAK4B,WAKpB,UAAU5C,GACN,IAAIgC,EAAiBhB,KAAK2G,QAAQ/H,IAAI,GAAGuL,SAAcC,OACvD,IAAK,IAAIjJ,EAAM,EAAGA,EAAMH,EAAII,OAAQD,IAChCH,EAAIG,GAAKmJ,aAAatK,KAAK1B,KAAMU,GAErCgC,EAAI,GAAGsJ,aAAatK,KAAK1B,KAAMU,GAGzB,WACN,OAAOkL,EAIX,oBAAoBlL,EAAasD,EAAmB,SAChD,OAAO,IAAI4H,EAAiBlL,EAAOsD,IAU3C,MAAMiI,EAAyB3E,IACW,GAA9BA,EAAI5D,QAAQ,gBACkB,GAAlC4D,EAAI5D,QAAQ,oBACgB,GAA3B4D,EAAI5D,QAAQ,aAC+B,GAAxC4D,EAAI5D,QAAQ,wBAuBjB,MAAMwI,EAKT,eAAeC,GAEX,GAJI,KAAAA,SAA2B,IAI3B,WAASxJ,aAAawJ,GAAU7J,YAAe6J,EAASrJ,OAKxD,IAAK,IAAID,EAAM,EAAGA,EAAMsJ,EAASrJ,OAAQD,IACrC,GAAI,OAAKyB,SAASmF,SAAS0C,EAAStJ,IAAO,CACvC,IAAIuJ,EAAeF,EAASG,iBAAyBF,EAAStJ,IACzDuJ,EAAa9J,YACd6J,EAAS/G,QAAQgH,EAAaN,aAE/B,GAAIK,EAAStJ,aAAgBqJ,EAChCxK,KAAKyK,SAAS/G,QAAc+G,EAAStJ,GAAMiJ,aACxC,GAAI,OAAKxH,SAASmF,SAAS0C,EAAStJ,IAAO,CAC9C,IAAIf,EAASoK,EAASG,iBAAyBF,EAAStJ,IACxDnB,KAAKyK,SAAS/G,QAAQtD,EAAOgK,aAG7BpK,KAAKyK,SAAS/G,KAAU+G,EAAStJ,IASjD,YACI,OAAOnB,KAAK4K,UAAU,GAG1B,aACI,OAAO5K,KAAK6K,WAMhB,SACI,OAAO,IAAI,gBAAsB7K,KAAK4K,UAAU,GAAG5L,MAAO,MAM9D,aACI,OAAOgB,KAAKyK,SAASrJ,OAMzB,cACI,OAAyBpB,KAAK4K,UAAU,GAAG3H,MAAM,WAMrD,eACI,OAAyBjD,KAAK4K,UAAU,GAAG3H,MAAM,YAGrD,MAAM6H,GACF,OAAQ9K,KAAKY,aACLZ,KAAK+K,SAASZ,OAAO,aAChBnL,MAAMqI,eAAiByD,EAAQzD,eACjCrH,KAAK8K,QAAQX,OAAO,aAClBnL,MAAMqI,eAAiByD,EAAQzD,eAUhD,WACI,OAAOrH,KAAK4K,UAAU,GAAG3H,MAAM,QASnC,WACI,OAAO,IAAI,gBAAsBjD,KAAK4K,UAAU,GAAG5L,MAAO,QAU9D,iBACI,OAAGgB,KAAK4K,UAAU,GAAG3H,MAAM,SAASpC,YACzB,IAAI,gBAAsBb,KAAK4K,UAAU,GAAG5L,OAEtC,gBAAc2B,OAInC,eACI,IAAIqK,EAA4BhL,KAAKiL,KAAM3F,IACvC,IAAI4F,EAAgD5F,EAAKtG,MAAMA,MAC/D,OAAOkM,EAAYF,SAAWE,EAAYF,SAAW,OACtDG,OACEpE,OAAOzB,KAAUA,GAAMtG,MAI5B,OAFU,IAAIwL,KAAYQ,GAGrBI,WAAW,IAAMpL,KAAK2K,iBAAiB,QAAQK,UAC/CI,WAAW,IAAMpL,KAAK2K,iBAAiB,4BAMhD,eACI,QAAS3K,KAAKqL,KAAK,YAAYrM,MAGnC,aAAasM,GACTtL,KAAKqL,KAAK,YAAYrM,MAAQsM,EAAS,GAG3C,iBACI,IAAIC,EAA+B,GAInC,OAHAvL,KAAKwL,SAAUlG,IACXiG,EAAeA,EAAatF,OAAO,OAAKrD,SAAS2D,WAAWjB,EAAKmG,eAE9D,IAAIjB,KAAYe,GAM3B,aACI,IAAI/G,EAAuB,GAI3B,OAHAxE,KAAKiL,KAAM3F,IACPd,EAAId,KAAK4B,KAEN,IAAI,YAAoBd,GASnC,wBAAwBkH,GACpB,OAAO,IAAIlB,EAASmB,UAAUhB,iBAAiBe,GASnD,YAAYA,GACR,OAAI,OAAK9I,SAASmF,SAAS2D,GAChB,IAAIlB,EAASmB,UAAUC,KAAaF,GAEpC,IAAIlB,EAAckB,GAUjC,iBAAiBA,GACb,OAAI,OAAK9I,SAASmF,SAAS2D,GAChB,IAAIlB,EAASmB,UAAUE,UAAkBH,GAEzC,IAAIlB,EAAckB,GAIjC,kBAAkBI,GACd,OAAO,IAAItB,EAASmB,UAAUI,WAAWD,GAQ7C,kBAAkBE,GAOd,IAAIC,EAAmB,IAAIzB,EAASmB,SAASO,cAAc,QAI3DD,EAAiBE,KAAK,yBAA2BH,EAAS,8BAC1D,IAAII,EAASH,EAAiBtB,iBAAiB,MAAM/L,IAAI,GAAG6M,WAG5D,OAFAW,EAAOC,SACPJ,EAAiBE,KAAK,IACfC,EAWX,IAAIE,GACA,OAAQA,EAAQtM,KAAKyK,SAASrJ,OAAU,IAAIoJ,EAASxK,KAAKyK,SAAS6B,IAAU9B,EAAS7J,OAQ1F,UAAU2L,EAAeC,EAA0B,WAAS5L,QACxD,OAAQ2L,EAAQtM,KAAKyK,SAASrJ,OAAU,WAASH,aAAajB,KAAKyK,SAAS6B,IAAUC,EAM1F,WACI,OAAOvM,KAAKyK,SAMhB,WACI,OAAsB,GAAfzK,KAAKoB,OAQhB,UAAUV,GACN,IAAIC,EAASX,KAAKY,WAIlB,OAHKD,GAAUD,GACXA,EAAgBxC,KAAK8B,KAAMA,OAEvBW,EAWZ,cAAcD,EAA8C,cAGxD,OADAV,KAAKa,UAAU3C,KAAK8B,KAAMU,GACnBV,KAMX,SACIA,KAAKwL,SAAUgB,IACPA,EAAKC,YACLD,EAAKC,WAAWC,YAAYF,KAWxC,iBAAiBd,GACb,GAA4B,GAAxB1L,KAAKyK,SAASrJ,OACd,OAAOpB,KAEX,IAAI2M,EAAQ,GACZ,IAAK,IAAIxL,EAAM,EAAGA,EAAMnB,KAAKyK,SAASrJ,OAAQD,IAAO,CACjD,IAAKnB,KAAKyK,SAAStJ,GAAKwJ,iBACpB,SAEJ,IAAIiC,EAAM5M,KAAKyK,SAAStJ,GAAKwJ,iBAAiBe,GAC9CiB,EAAQA,EAAM1G,OAAO,OAAKrD,SAAS2D,WAAWqG,IAGlD,OAAO,IAAIpC,KAAYmC,GAQ3B,KAAKE,EAAYC,GACb,IAAIF,EAAuB,GAC3B,IAAK,IAAIzL,EAAM,EAAG2L,GAAe3L,EAAMnB,KAAKyK,SAASrJ,OAAQD,IACrDnB,KAAKyK,SAAStJ,GAAK0L,IAAMA,GACzBD,EAAIlJ,KAAK,IAAI8G,EAASxK,KAAKyK,SAAStJ,KAO5C,OADAyL,EAAMA,EAAI3G,OAAOjG,KAAK2K,iBAAiB,QAAQkC,QACxC,IAAIrC,KAAYoC,GAQ3B,UAAU9B,EAAiBgC,GACvB,IAAIF,EAAM,GACV,IAAK,IAAIzL,EAAM,EAAG2L,GAAe3L,EAAMnB,KAAKyK,SAASrJ,OAAQD,IACrDnB,KAAKyK,SAAStJ,GAAK2J,SAAWA,GAC9B8B,EAAIlJ,KAAK,IAAI8G,EAASxK,KAAKyK,SAAStJ,KAI5C,OADAyL,EAAMA,EAAI3G,OAAOjG,KAAK2K,iBAAiBG,IAChC,IAAIN,KAAYoC,GAS3B,KAAKvB,EAAcrH,EAAuB,MACtC,OAAO,IAAIkG,EAAiBlK,KAAMqL,EAAMrH,GAQ5C,SAAS+I,GACL,IAAIC,GAAQ,EAkBZ,OAhBAhN,KAAKiL,KAAM3F,IACP,IAAI2H,EAAW3H,EAAK+F,KAAK,SAASrM,OAAS,GAC3C,IAA4D,GAAxDiO,EAAS5F,cAAcrF,QAAQ+K,EAAM1F,eAElC,CACH,IAAI6F,EAAaD,EAAS5I,MAAM,SAC5B8I,GAAQ,EACZ,IAAK,IAAIhM,EAAM,EAAGA,EAAM+L,EAAW9L,SAAW+L,EAAOhM,IACjDgM,EAAQD,EAAW/L,GAAKkG,eAAiB0F,EAAM1F,cAGnD,GADA2F,EAAQA,GAASG,EAEb,OAAO,KAIZH,EAQX,SAASD,GAQL,OAPA/M,KAAKiL,KAAM3F,IACP,IAAI2H,EAAW3H,EAAK+F,KAAK,SAASrM,OAAS,GACtCgB,KAAKoN,SAASL,KACfzH,EAAK+F,KAAK,SAASrM,MAAQ,OAAK4D,SAAS0B,KAAK2I,EAAW,IAAMF,MAIhE/M,KAQX,YAAY+M,GAcR,OAbA/M,KAAKiL,KAAM3F,IACP,GAAItF,KAAKoN,SAASL,GAAQ,CACtB,IACIM,EAAa,GACbH,GAFW5H,EAAK+F,KAAK,SAASrM,OAAS,IAEjBqF,MAAM,SAChC,IAAK,IAAIlD,EAAM,EAAGA,EAAM+L,EAAW9L,OAAQD,IACnC+L,EAAW/L,GAAKkG,eAAiB0F,EAAM1F,eACvCgG,EAAW3J,KAAKwJ,EAAW/L,IAGnCmE,EAAK+F,KAAK,SAASrM,MAAQqO,EAAWC,KAAK,QAG5CtN,KAMX,uBACI,OAAOA,KAAK2K,iBAAiB,sBAAsB4C,YAAY1M,YAYnE,KAAKV,GACD,OAAI,WAASc,aAAad,GAAOS,WACtBZ,KAAK4K,UAAU,GAAG/J,YAAc,WAASI,aAAajB,KAAK4K,UAAU,GAAG5L,MAAMwO,WAAa,WAAS7M,QAE3GX,KAAK4K,UAAU,GAAG/J,cAClBb,KAAK4K,UAAU,GAAG5L,MAAMwO,UAAYrN,GAEjCH,MAKH,oBAAoByN,EAAkB/B,GAC1C,IAAIgC,EAA0CD,EAa9C,OAZgCC,EAAKC,iBACjCD,EAAKE,oBACLF,EAAKG,mBACLH,EAAKI,kBACLJ,EAAKK,uBACL,SAAUjO,GACN,IAAIkO,GAAoCrC,UAAkBsC,OAAQC,eAAevD,iBAAiB7K,GAC9F/B,EAAIiQ,EAAQ5M,OAChB,OAASrD,GAAK,GAAKiQ,EAAQ1I,KAAKvH,KAAO0P,IAEvC,OAAO1P,GAAK,IAEGG,KAAKuP,EAAS/B,GAUzC,eAAeA,GACX,IAAIyC,EAAU,GAOd,OALAnO,KAAKwL,SAASlG,IACNtF,KAAKoO,oBAAoB9I,EAAMoG,IAC/ByC,EAAQzK,KAAK4B,KAGd,IAAIkF,KAAY2D,GAG3B,gBAAgBzC,GAMZ,OALA1L,KAAKwL,SAASlG,IACV,IAAKtF,KAAKoO,oBAAoB9I,EAAMoG,GAChC,OAAO,KAGR,EAWX,SAAS2C,GAEL,IAAIC,EAA0BtO,KAAKyL,WACnC,IAAK,IAAItK,EAAM,EAAGA,EAAMkN,EAAajN,OAAQD,IAEzC,IADAmN,EAAgBA,EAAcC,eAAeF,EAAalN,KACxCP,WACd,OAAO0N,EAGf,OAAOA,EAGX,SAASvN,GACL,IAAK,IAAII,EAAM,EAAGsD,EAAMzE,KAAKyK,SAASrJ,OAAQD,EAAMsD,IACV,IAAlC1D,EAAKf,KAAKyK,SAAStJ,GAAMA,GADwBA,KAKzD,OAAOnB,KAGX,UAAUe,EAA6CuE,IAAQA,IAI3D,OAHItF,KAAKyK,SAASrJ,OAAS,GACvBL,EAAKf,KAAKyK,SAAS,GAAI,GAEpBzK,KAGX,KAAKe,GACD,IAAK,IAAII,EAAM,EAAGsD,EAAMzE,KAAKyK,SAASrJ,OAAQD,EAAMsD,IACf,IAA7B1D,EAAKf,KAAKpB,IAAIuC,GAAMA,GAD6BA,KAKzD,OAAOnB,KAQX,MAAMe,EAA8C,CAACuE,GAASA,IAC1D,OAAItF,KAAKyK,SAASrJ,QAAU,GACxBL,EAAKf,KAAKpB,IAAI,GAAI,GACXoB,KAAKpB,IAAI,IAEboB,KAQX,OAAOe,GACH,IAAIyN,EAAyB,GAI7B,OAHAxO,KAAKiL,KAAM3F,IACPvE,EAAKuE,IAAQkJ,EAAM9K,KAAK4B,KAErB,IAAIkF,KAAiBgE,GAWhC,WAAW1C,EAAc2C,GACrB,IAAIC,EAAO/C,SAASgD,qBAAqB,QAAQ,IAAMhD,SAASiD,gBAC5DC,EAASlD,SAASO,cAAc,UAChCuC,GACAI,EAAOvE,aAAa,QAASmE,GAEjCI,EAAOC,KAAO,kBACdD,EAAOrB,UAAY1B,EACnB,IAAIiD,EAAmBL,EAAKM,YAAYH,GAExC,OADAH,EAAKhC,YAAYqC,GACV/O,KASX,SAII,OAHAA,KAAKwL,SAAUlG,IACXA,EAAKmH,WAAWC,YAAYpH,KAEzBtF,KAQX,SAASiP,GACLjP,KAAKwL,SAAUlG,IACoB2J,EAAKrE,UAAU,GAAGQ,WAAW,KACjD,CACH4D,YAAcE,SAGnBlQ,MACIgQ,YAAY1J,KAW3B,eAAeM,EAAauJ,EAAgB,EAAGC,GAC3C,IAAIC,EAAM,IAAIC,eAWd,GAVAD,EAAIE,KAAK,MAAO3J,GAAK,GAEjBwJ,GACAC,EAAIG,iBAAiB,eAAgB,qCAAuCJ,GAGhFC,EAAII,KAAK,MAIa,GAAlBJ,EAAIK,WAmBJ,MAAMjJ,MAAM,qBAAuBb,EAAM,YAlBzC,GAAkB,KAAdyJ,EAAIlH,OAeJ,MAAM1B,MAAM4I,EAAIM,cAKxB,OAfaR,EAKD1H,YAAW,WACPzH,KAAK+L,WAAWsD,EAAIM,aAAe,qBAAuB/J,KAC3DuJ,GANHnP,KAAK+L,WAAWsD,EAAIM,aAAa/K,QAAQ,KAAM,QAAU,qBAAuBgB,GAcrF5F,MAGX,eAAe4P,GAIX5P,KAAKiL,KAAK4E,IACN,IAAIC,EAAkBD,EAAajF,UAAU,GAAG5L,MAC5CyL,EAAWqF,EAAgBrD,WAC/B,IAAK,IAAItL,EAAM,EAAGA,EAAMyO,EAAexO,OAAQD,IAAO,CAClD,IAAI4O,EAA4BD,EAAgBC,YAChDH,EAAezO,GAAKqK,SAASwE,IACrBD,GACAtF,EAASwF,aAAaD,EAAYD,GAClCD,EAAkBC,GAElBtF,EAASuE,YAAYgB,QAOrC,IAAIpD,EAAM,GAGV,OAFAA,EAAIlJ,KAAK1D,MACT4M,EAAI3G,OAAO2J,GACJ,IAAIpF,KAAYoC,GAG3B,gBAAgBgD,GACZ5P,KAAKiL,KAAK4E,IACN,IAAIC,EAAkBD,EAAajF,UAAU,GAAG5L,MAC5CyL,EAAWqF,EAAgBrD,WAC/B,IAAK,IAAItL,EAAM,EAAGA,EAAMyO,EAAexO,OAAQD,IAC3CyO,EAAezO,GAAKqK,SAASwE,IACzBvF,EAASwF,aAAaD,EAAYF,OAI9C,IAAIlD,EAAM,GAGV,OAFAA,EAAIlJ,KAAK1D,MACT4M,EAAI3G,OAAO2J,GACJ,IAAIpF,KAAYoC,GAG3B,UAAU9L,GACN,OAAId,KAAKa,YACEb,KAEA,IAAIwK,KAAY1J,GAI/B,WAAWC,GACP,OAAIf,KAAKa,YACEb,KAEA,IAAIwK,EAASzJ,KAI5B,QAAQ+J,GACJ,IAAI1G,EAAS,GACb,MAAM8L,EAAepF,EAAQzD,cAC7B,IAAI8I,EAAe7K,KAEVA,EAAKwF,SAAW,IAAIzD,eAAiB6I,GACtC9L,EAAOV,KAAK4B,IAepB,OAVAtF,KAAKwL,SAAUlG,IACX,KAAOA,EAAKmH,YAIR,GAHAnH,EAAgBA,EAAKmH,WACrB0D,EAAY7K,GAEG,QAAXwF,GAAqB1G,EAAOhD,OAC5B,OAAO,IAIZ,IAAIoJ,KAAYpG,GAG3B,UAAUgM,GAuBN,OAtBAA,EAAW5E,SAAU6E,IACjB,IAAK,IAAIlP,EAAM,EAAGA,EAAMkP,EAAWC,WAAWlP,OAAQD,IAAO,CACzD,IAAInC,EAAQqR,EAAWC,WAAWnP,GAAKnC,MACnCA,IACAgB,KAAKqL,KAAKgF,EAAWC,WAAWnP,GAAK7C,MAAMU,MAAQA,GAGvD,IAAIkM,EAA+BmF,EAG/B,UAAWnF,IACXlL,KAAKuQ,yBAAyBvR,MAAQkM,EAAYlM,OAElD,YAAakM,IACblL,KAAKuQ,uBAAuB,WAAWC,QAAUtF,EAAYsF,UAAW,GAExE,aAActF,IACdlL,KAAKuQ,uBAAuB,YAAYjF,SAAWJ,EAAYsF,SAAW,eAK/ExQ,KAOH,uBAAuByQ,EAAmB,SAC9C,IAAIjM,EAAM,GAEV,OADAA,EAAIiM,GAAY,KACRA,KAAYzQ,KAAK4K,UAAU,GAAG5L,MAClCgB,KAAK4K,UAAU,GAAG5L,MAClBwF,EAaR,UAAUwH,EAAgB0E,EAA+BC,GACrD,IAAIhE,EAAQnC,EAASoG,WAAW5E,GAC5BY,EAAM,GACNiE,EAAY7Q,KAAK4K,UAAU,GAAG5L,MAC9B8R,EAAcnE,EAAM/N,IAAI,GACxB6N,EAAaoE,EAAUpE,WACvBsE,EAAWD,EAAYlG,UAAU,GAAG5L,MACxCyN,EAAWuE,aAAaD,EAAUF,GAClCjE,EAAIlJ,KAAK,IAAI8G,EAASuG,IAEtB,IAAIE,EAAwB,GAE5B,IAAK,IAAI9P,EAAM,EAAGA,EAAMwL,EAAMvL,OAAQD,IAClC8P,EAAsBvN,KAAKiJ,EAAM/N,IAAIuC,IACrCnB,KAAKyK,SAAS/G,KAAKiJ,EAAM/N,IAAIuC,GAAKyJ,UAAU,GAAG5L,OAYnD,OATA4N,EAAIlJ,KAAK8G,EAASoB,KAAKmF,GAAUG,eAAeD,IAE5CP,GACA1Q,KAAKmR,aAELR,GACA3Q,KAAKoR,SAGF,IAAI5G,KAAYoC,GAQ3B,WAAWyE,EAAyC9G,GAChD,IAAI+G,EAAQ,OAAK1O,SACb2O,EAAe,GACfC,EAAalM,IACT,IAAIwF,EAAUxF,EAAKwF,QACf2G,EAAWnM,EAAKwJ,MAAQ,GAC5B,GAAIhE,GAAWwG,EAAMI,iBAAiB5G,EAAS,YAC7B,KAAb2G,GAAmBH,EAAMI,iBAAiBD,EAAU,oBACjDH,EAAMI,iBAAiBD,EAAU,eACjCH,EAAMI,iBAAiBD,EAAU,oBACjCH,EAAMI,iBAAiBD,EAAU,eAAgB,CACrD,IAAI7L,EAAMN,EAAK+E,aAAa,OAC5B,QAAI,IAAsBzE,GACnB,MAAQA,GACRA,EAAIxE,OAAS,EAKZiQ,EAAazL,KACT2L,EAAanQ,SAGbpB,KAAK+L,WAAWwF,EAAajE,KAAK,OAElCiE,EAAe,IAEnBvR,KAAK2R,eAAe/L,EAAK,EAAG,cAG7B,CAEH,IAAIf,EAAOS,EAAKsM,KACZC,GAAK,EACT,KAAOA,GACHA,GAAK,EACuB,KAAxBhN,EAAK1C,UAAU,EAAG,KAClB0C,EAAOA,EAAK1C,UAAU,GACtB0P,GAAK,GAEmB,WAAxBhN,EAAK1C,UAAU,EAAG,KAClB0C,EAAOA,EAAK1C,UAAU,GACtB0P,GAAK,GAEoB,eAAzBhN,EAAK1C,UAAU,EAAG,MAClB0C,EAAOA,EAAK1C,UAAU,IACtB0P,GAAK,GAKbN,EAAa7N,KAAKmB,MAKlC,IACI,IAAIiN,EAAiB9R,KAAK2K,iBAAiB,UAC3C,GAAsB,MAAlBmH,EAAwB,OAC5B,IAAK,IAAI3Q,EAAM,EAAGA,EAAM2Q,EAAe1Q,OAAQD,IAC3CqQ,EAAUM,EAAelH,UAAUzJ,GAAKnC,OAExCuS,EAAanQ,QACbpB,KAAK+L,WAAWwF,EAAajE,KAAK,OAExC,MAAOrJ,GACDgK,OAAO8D,SAAW9D,OAAO8D,QAAQC,OAOjCD,QAAQC,MAAM/N,EAAEgO,SAAWhO,EAAEiO,a,QAQjCV,EAAY,MAIpB,SAEI,MAEIF,EAAQ,OAAK1O,SACbuP,EAAa,CAAC7M,EAAe8M,KACzB,IAAIC,EAA0B1G,SAASO,cAAc,SACrDP,SAASgD,qBAAqB,QAAQ,GAAGK,YAAYqD,GAErD,IAAIC,EAAaD,EAAME,MAAQF,EAAME,MAAcF,EAAOC,WAE1DD,EAAM/H,aAAa,MAAOhF,EAAK+E,aAAa,QAAU,cACtDgI,EAAM/H,aAAa,OAAQhF,EAAK+E,aAAa,SAAW,iBAVnD,IAYciI,EAAWE,QAC1BF,EAAWE,QAAUJ,EAErBC,EAAMrD,YAAYrD,SAAS8G,eAAeL,KAKlDM,EAAWpN,IACP,MAAMoM,EAAmBJ,EAAMI,iBACzB5G,EAAUxF,EAAKwF,QACrB,GAAIA,GAAW4G,EAAiB5G,EAAS,SAAW4G,EAAiBpM,EAAK+E,aAAa,QAAS,YAC5F8H,EAAW7M,EAAM,gBAAkBA,EAAK+E,aAAa,QAAU,YAC5D,GAAIS,GAAW4G,EAAiB5G,EAAS,UAAY4G,EAAiBpM,EAAK+E,aAAa,QAAS,YAAa,CACjH,IAAIsI,EAAY,GAEZlH,EAAuBnG,EAAKmG,WAChC,GAAIA,EAAY,CACZ,MAAMhH,EAAMgH,EAAWrK,OACvB,IAAK,IAAID,EAAM,EAAGA,EAAMsD,EAAKtD,IACzBwR,EAAUjP,KAAe+H,EAAWtK,GAAMqM,WAA6B/B,EAAWtK,GAAMmH,WAGrFhD,EAAKkI,WACZmF,EAAUjP,KAAK4B,EAAKkI,WAGxB2E,EAAW7M,EAAMqN,EAAUrF,KAAK,OAItCwE,EAA2B9R,KAAK2K,iBAAiB,eACvD,GAAsB,MAAlBmH,EAAJ,CACA,IAAK,IAAI3Q,EAAM,EAAGA,EAAM2Q,EAAe1Q,OAAQD,IAAO,CAElDuR,EADmBZ,EAAelH,UAAUzJ,GAC5BnC,OAGpB,OAAOgB,MAGX,oBACI,IAAI4S,EAAa,GAOjB,OALA5S,KAAKiL,KAAM3F,IACPA,EAAKmG,WAAWD,SAAUgB,IACtBoG,EAAWlP,KAAmB8I,EAAMlE,UAGrCsK,EAAWtF,KAAK,IAM3B,QAEI,OADAtN,KAAK6S,UAAU,SACR7S,KAGX,iBAAiB8O,EAAcgE,EAAgCC,GAI3D,OAHA/S,KAAKwL,SAAUgB,IACXA,EAAKwG,iBAAiBlE,EAAMgE,EAAUC,KAEnC/S,KAGX,oBAAoB8O,EAAcgE,EAAgCC,GAI9D,OAHA/S,KAAKwL,SAAUgB,IACXA,EAAKyG,oBAAoBnE,EAAMgE,EAAUC,KAEtC/S,KAMX,UAAUkT,GACNlT,KAAKwL,SAAUgB,IACX,IAAI2G,EACJ,GAAI3G,EAAK0B,cACLiF,EAAM3G,EAAK0B,kBACR,IAAqB,GAAjB1B,EAAK4G,SAIZ,MAAM,IAAI3M,MAAM,qCAAuC+F,EAAKK,IAF5DsG,EAAM3G,EAKV,GAAIA,EAAK6G,cAAe,CAEpB,IAAIC,EAAa,GAKjB,OAAQJ,GACJ,IAAK,QACL,IAAK,YACL,IAAK,UACDI,EAAa,cACb,MAEJ,IAAK,QACL,IAAK,SACL,IAAK,OACL,IAAK,SACDA,EAAa,aACb,MAEJ,QACI,KAAM,sDAAwDJ,EAAY,KAGlF,IAAIK,EAAQJ,EAAIK,YAAYF,GAC5BC,EAAME,UAAUP,GAAW,GAAM,GAEjCK,EAAMG,WAAY,EAElBlH,EAAK6G,cAAcE,QAChB,GAAU/G,EAAMqG,UAAW,CAE9B,IAAIU,EAAQJ,EAAIQ,oBAChBJ,EAAMG,WAAY,EACZlH,EAAMqG,UAAU,KAAOK,EAAWK,MAKpD,YAAYK,EAAkB,IAC1B,OAAO5T,KAAKmL,OACP7K,IAAKtB,IAMF,OALWA,EAAM4L,UAAU,GAAGQ,WAAW,KACzB,CACRyI,YAAa,MAElB7U,MACgB6U,aAAe,KAErCC,OAAO,CAACC,EAAOC,IAAUD,EAAQH,EAAUI,EAAO,IAAIhV,MAG/D,UAAU4U,EAAkB,IACxB,OAAO5T,KAAKmL,OACP7K,IAAKtB,IAMF,OALWA,EAAM4L,UAAU,GAAGQ,WAAW,KACzB,CACRuH,UAAW,MAEhB3T,MACgB2T,WAAa,KAEnCmB,OAAO,CAACC,EAAOC,IAAUD,EAAQH,EAAUI,EAAO,IAAIhV,MAa/D,kBAAkBiV,EAAU,IAAI,SAAO,KAInC,GAAIjU,KAAK1B,KAAKsC,WACV,OAIJ,IAAIsT,EAASD,EAAQE,YAgErB,OA9DAnU,KAAKwL,SAAU7E,IACX,IAAKA,EAAQrI,KACT,OAEJ,IAAIA,EAAOqI,EAAQrI,KACfwM,EAAUnE,EAAQmE,QAAQzD,cAC1B+M,EAAWzN,EAAQmI,KAAK3E,OAAO,YAAYnL,MAAMqI,cASrD,GAPA+M,EAAWA,EAAS/M,eAOH,SAAXyD,GAAiC,YAAXA,GAAoC,UAAXA,IACxC,MAARxM,GAAwB,IAARA,IAAiBqI,EAAQ2E,SAAU,CAUpD,GAAe,UAAXR,EAAqB,CAErB,IAAIuJ,EAAmD1N,EAAQiE,UAAU,GAAG5L,MAC5E,GAAIqV,EAAWC,eAAiB,EAAG,CAC/B,IAAIC,EAAOF,EAAWtB,QAAQ3R,OAC9B,IAAK,IAAIoT,EAAI,EAAGA,EAAID,EAAMC,IAGtB,GAAIH,EAAWtB,QAAQyB,GAAGC,SAAU,CAChC,IAAIC,EAAgBL,EAAWtB,QAAQyB,GACvCN,EAAOlR,MAAM1E,GAAMU,MAAgD,MAAvC0V,EAAcrK,aAAa,SACnDqK,EAAc1V,MAAQ0V,EAAc9C,OAUxD,GAAgB,UAAX9G,GAAmC,UAAZsJ,GACT,SAAZA,GAAmC,UAAZA,GAAoC,SAAZA,IACjC,YAAZA,GAAsC,SAAZA,GAA8BzN,EAAS6J,SAAU,CAChF,IAAImE,EAAmBhO,EAAQ3H,MAAO2V,MAClCA,GAASA,EAAMvT,OAEf8S,EAAOlR,MAAM1E,GAAMU,MAAQ2V,EAAM,GAEjCT,EAAOlR,MAAM1E,GAAMU,MAAQ2H,EAAQiO,WAAW5V,UAOvDkV,EAIH,SAASW,EAAcC,GAI3B,OAHI,WAAS7T,aAAa6T,GAAIlU,aAC1BkU,EAAK9U,KAAKoB,QAEP,IAAIoJ,KAAYxK,KAAKyK,SAASrH,MAAMyR,EAAME,KAAKC,IAAIF,EAAI9U,KAAKoB,WArpChE,EAAAT,OAAS,IAAI6J,EA+pCjB,MAAMyK,EAAb,cAEI,KAAA3M,KAAkB,GAElB,QAAQ3B,GACJ3G,KAAKsI,KAAK5E,KAAKiD,GAGnB,iBACI,OAAO,IAAI6D,KAAYxK,KAAKsI,S,6BChwCpC,wGA8BO,MAAM4M,EAIT,eAAelW,GACXgB,KAAKhB,MAAQA,EAGjB,aAAgBsJ,GACZ,OAAO,IAAI4M,KAAa5M,GAG5B,KAAKpI,GACD,IAAK,IAAIiB,EAAM,EAAGA,EAAMnB,KAAKhB,MAAMoC,SACE,IAA7BlB,EAAGF,KAAKhB,MAAMmC,GAAMA,GADeA,KAK3C,OAAOnB,KAGX,IAAOE,GACEA,IACDA,EAAMC,GAAkBA,GAE5B,IAAIyM,EAAW,GAKf,OAJA5M,KAAKiL,KAAK,CAAC3F,EAAMnE,KACbyL,EAAIlJ,KAAKxD,EAAGoF,MAGT,IAAI4P,KAAatI,GAO5B,QAAW1M,GACP,IAAIG,EAAoBL,KAAKM,IAAIJ,GAC7B0M,EAAM5M,KAAKmV,WAAW9U,GAC1B,OAAO,IAAI6U,KAAUtI,GAGzB,OAAO1M,GACH,IAAI0M,EAAgB,GAMpB,OALA5M,KAAKiL,KAAM3C,IACHpI,EAAGoI,IACHsE,EAAIlJ,KAAK4E,KAGV,IAAI4M,KAAatI,GAG5B,OAAO1M,EAA6BkV,EAAc,MAC9C,IAAI7Q,EAAqB,MAAZ6Q,EAAmB,EAAI,EAChCC,EAAmB,MAAZD,EAAmBA,EAAWpV,KAAKhB,MAAMoC,OAASpB,KAAKhB,MAAM,GAAK,KAE7E,IAAK,IAAImC,EAAMoD,EAAQpD,EAAMnB,KAAKhB,MAAMoC,OAAQD,IAC5CkU,EAAOnV,EAAGmV,EAAMrV,KAAKhB,MAAMmC,IAE/B,OAAO,WAASF,aAAaoU,GAGjC,QACI,OAAOrV,KAAKhB,OAASgB,KAAKhB,MAAMoC,OAAS,WAASH,aAAajB,KAAKhB,MAAM,IAAM,WAAS2B,OAG7F,OAEI,OAAO,WAASM,aAAajB,KAAKhB,MAAMoC,OAASpB,KAAKhB,MAAMgB,KAAKhB,MAAMoC,OAAS,GAAK,MAGzF,SAASlB,GACL,IAAK,IAAIiB,EAAM,EAAGA,EAAMnB,KAAKhB,MAAMoC,OAAQD,IACvC,GAAIjB,EAAGF,KAAKhB,MAAMmC,IACd,OAAO,EAGf,OAAO,EAGX,SAASjB,GACL,IAAKF,KAAKhB,MAAMoC,OACZ,OAAO,EAEX,IAAI4M,EAAU,EACd,IAAK,IAAI7M,EAAM,EAAGA,EAAMnB,KAAKhB,MAAMoC,OAAQD,IACnCjB,EAAGF,KAAKhB,MAAMmC,KACd6M,IAGR,OAAOA,GAAWhO,KAAKhB,MAAMoC,OAGjC,UAAUlB,GACN,IAAI8N,EAAU,EACd,IAAK,IAAI7M,EAAM,EAAGA,EAAMnB,KAAKhB,MAAMoC,OAAQD,IACnCjB,EAAGF,KAAKhB,MAAMmC,KACd6M,IAGR,OAAOA,GAAWhO,KAAKhB,MAAMoC,OAGjC,QAAQkU,GAEJ,OADAtV,KAAKiL,KAAK3C,GAAQgN,EAAUC,QAAQjN,IAC7BgN,EAAUE,WAGb,WAAcnV,GAClB,IAAIuM,EAAgB,GAQpB,OAPAvM,EAAO4K,KAAM3C,IACLA,aAAgB4M,EAChBtI,EAAMA,EAAI3G,OAAOjG,KAAKmV,WAAW7M,IAEjCsE,EAAIlJ,KAAK4E,KAGVsE,GAQR,MAAM6I,EAAb,cACY,KAAAnN,KAAiB,GAEzB,QAAQ3B,GACJ3G,KAAKsI,KAAK5E,KAAKiD,GAGnB,iBACI,OAAO3G,KAAKsI,Q,6BCrKpB,kEAwBO,MAAMoN,UAAiB,WAE1B,YAAYjL,GAER,IAaIkL,EAAYC,IACZ,GAAU,MAAPA,EACC,OAAO,KAMX,OAJ2B,OAAKC,gBAC5B,IAAM,IAAI5H,OAAO6H,UACjB,IAnBqB,MAGzB,IAAIC,EAAS,IAAIC,cAAc,oBAG/B,OAFAD,EAAOE,OAAQ,EAEF,CACTC,gBAAiB,CAACtE,EAAcuE,IACrBJ,EAAOK,QAAQxE,KAWRyE,IACpBrX,MACekX,gBAAgBN,EAAK,aAGvC,OAAKhT,SAASmF,SAAS0C,GACtBjK,MAAMmV,EAAiBlL,IAEvBjK,MAAMiK,GAKd,mBACI,OAAOzK,KAAK2K,iBAAiB,eAAe9J,YAKhD,WACI,IAAI2D,EAAM,GAQV,OAPAxE,KAAKwL,SAAUgB,SAC+B,IAAzByB,OAAQqI,cACrB9R,EAAId,MAAK,IAAUuK,OAAQqI,eAAgBC,kBAAkB/J,SACnC,IAAZA,EAAKoJ,KACnBpR,EAAId,KAAK8I,EAAKoJ,OAGfpR,EAAI8I,KAAK,IAKpB,gBAAgBsG,GACZ,OAAO5T,KAAK2K,iBAAiB,eAAekJ,YAAYD,GAG5D,gBAAgB4C,GACZ,OAAO,IAAKd,EAASc,GAGzB,kBAAkBA,GACd,OAAO,IAAKd,EAASc","file":"XmlQuery.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (\"undefined\" != typeof mapped && mapped != null && mapped.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n\n\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<T>(value?: T): Optional<T> {\n        return new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n}\n\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent =  ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if(this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<T>(value?: any, valueKey: string = \"value\"): ValueEmbedder<T> {\n        return new ValueEmbedder(value, valueKey);\n    }\n\n}\n\n/**\n * helper class to allow write access to the config\n * in certain situations (after an apply call)\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = (\"undefined\" != typeof arrPos) ? arrPos : -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    get shallowCopy(): Config {\n        return new Config(Lang.instance.mergeMaps([{}, this.value || {}]));\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true) {\n        for (let key in other.value) {\n            if (overwrite && key in this.value) {\n                this.apply(key).value = other.getIf(key).value;\n            } else if (!(key in this.value)) {\n                this.apply(key).value = other.getIf(key).value;\n            }\n        }\n    }\n\n    apply(...keys: Array<any>): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    applyIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\n        return condition ? this.apply(...keys) : {value: null};\n    }\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            if (arr.length < length) {\n                for (let cnt = arr.length; cnt < length; cnt++) {\n                    arr.push({});\n                }\n            }\n        };\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n/*we do not implenent array, maps etc.. monads there are libraries like lodash which have been doing that for ages*/\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CancellablePromise} from \"./Promise\";\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport class Lang {\n\n    private static _instance: Lang;\n\n    static get instance() {\n        if (!Lang._instance) {\n            Lang._instance = new Lang();\n        }\n        return Lang._instance;\n    }\n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    static saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            if (\"undefined\" == typeof result || null == result) {\n                return Optional.fromNullable(defaultValue);\n            }\n            return Optional.fromNullable(result);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    static saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            if (\"undefined\" == typeof result || null == result) {\n                return Optional.fromNullable(defaultValue());\n            }\n            return Optional.fromNullable(result);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return an array of the splitted string\n     */\n    strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n\n        let retArr = it.split(splitter);\n        for (let cnt = 0; cnt < retArr.length; cnt++) {\n            retArr[cnt] = this.trim(retArr[cnt]);\n        }\n        return retArr;\n    }\n\n    arrToMap(arr: any[], offset: number = 0) {\n        var ret = new Array(arr.length);\n        var len = arr.length;\n        offset = (offset) ? offset : 0;\n        for (var cnt = 0; cnt < len; cnt++) {\n            ret[arr[cnt]] = cnt + offset;\n        }\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    /**\n     * hitch backported from dojo\n     * hitch allows to assign a function to a dedicated scope\n     * this is helpful in situations when function reassignments\n     * can happen\n     * (notably happens often in lazy xhr code)\n     *\n     * @param {Function} scope of the function to be executed in\n     * @param {Function} method to be executed, the method must be of type function\n     *\n     * @return whatever the executed method returns\n     *\n     */\n    hitch(scope: any, method: Function): Function {\n        return !scope ? method : function () {\n            return method.apply(scope, arguments || []);\n        }; // Function\n    }\n\n    /**\n     * simplified merge maps which basically produces\n     * a final merged map from left to right\n     * the function is sideffect free\n     * @param maps\n     */\n    mergeMaps(maps: { [key: string]: any }[],\n              overwrite: boolean = true,\n              blockFilter: Function = (item) => false,\n              whitelistFilter: Function = (item) => true): { [key: string]: any } {\n        let retVal = {};\n        this.arrForEach(maps, (item: { [key: string]: any }) => {\n            this.mixMaps(retVal, item, overwrite, blockFilter, whitelistFilter);\n        });\n        return retVal;\n    }\n\n    /**\n     * Helper function to merge two maps\n     * into one\n     * @param {Object} dest the destination map\n     * @param {Object} src the source map\n     * @param {boolean} overwrite if set to true the destination is overwritten if the keys exist in both maps\n     * @param blockFilter\n     * @param whitelistFilter\n     **/\n    mixMaps<T>(dest: { [key: string]: T },\n               src: { [key: string]: T },\n               overwrite: boolean,\n               blockFilter?: Function,\n               whitelistFilter?: Function): { [key: string]: T } {\n        let UNDEF = \"undefined\";\n        for (let key in src) {\n            if (!src.hasOwnProperty(key)) continue;\n            if (blockFilter && blockFilter(key)) {\n                continue;\n            }\n            if (whitelistFilter && !whitelistFilter(key)) {\n                continue;\n            }\n            if (!overwrite) {\n                /**\n                 *we use exists instead of booleans because we cannot rely\n                 *on all values being non boolean, we would need an getIf\n                 *operator in javascript to shorten this :-(\n                 */\n                dest[key] = (UNDEF != typeof dest[key]) ? dest[key] : src[key];\n            } else {\n                dest[key] = (UNDEF != typeof src[key]) ? src[key] : dest[key];\n            }\n        }\n        return dest;\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    objToArray<T>(obj: any, offset?: number, pack?: Array<T>): Array<T> {\n        if (!obj) {\n            return pack || null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if (obj instanceof Array && !offset && !pack) return obj;\n        let finalOffset = ('undefined' != typeof offset || null != offset) ? offset : 0;\n        let finalPack = pack || [];\n        try {\n            return finalPack.concat(Array.prototype.slice.call(obj, finalOffset));\n        } catch (e) {\n            //ie8 (again as only browser) delivers for css 3 selectors a non convertible object\n            //we have to do it the hard way\n            //ie8 seems generally a little bit strange in its behavior some\n            //objects break the function is everything methodology of javascript\n            //and do not implement apply call, or are pseudo arrays which cannot\n            //be sliced\n            for (let cnt = finalOffset; cnt < obj.length; cnt++) {\n                finalPack.push(obj[cnt]);\n            }\n            return finalPack;\n        }\n    }\n\n    /**\n     * foreach implementation utilizing the\n     * ECMAScript wherever possible\n     * with added functionality\n     *\n     * @param arr the array to filter\n     * @param callbackfn\n     * @param startPos\n     * @param scope the closure to apply the function to, with the syntax defined by the ecmascript functionality\n     * function (element<,key, array>)\n     * <p />\n     * optional params\n     * <p />\n     * <ul>\n     *      <li>param startPos (optional) the starting position </li>\n     *      <li>param scope (optional) the scope to apply the closure to  </li>\n     * </ul>\n     */\n    arrForEach<T>(arr: any, callbackfn: (value: T, index: number, array: T[]) => void, startPos?: number, scope?: Function) {\n        if (!arr || !arr.length) return;\n        let startPosFinal = startPos || 0;\n        let thisObj = scope;\n        //check for an existing foreach mapping on array prototypes\n        //IE9 still does not pass array objects as result for dom ops\n        let convertedArr: Array<T> = this.objToArray<T>(arr);\n        (startPos) ? convertedArr.slice(startPosFinal).forEach(callbackfn, thisObj) : convertedArr.forEach(callbackfn, thisObj);\n    }\n\n    /**\n     * checks if an array contains an element\n     * @param {Array} arr   array\n     * @param {String} str string to check for\n     */\n    contains<T>(arr: T[], str: string) {\n        if (!arr || !str) {\n            throw Error(\"null value on arr or str not allowed\");\n        }\n        return this.arrIndexOf(arr, str) != -1;\n    }\n\n    /**\n     * adds a EcmaScript optimized indexOf to our mix,\n     * checks for the presence of an indexOf functionality\n     * and applies it, otherwise uses a fallback to the hold\n     * loop method to determine the index\n     *\n     * @param arr the array\n     * @param element the index to search for\n     * @param fromIndex\n     */\n    arrIndexOf<T>(arr: any, element: T, fromIndex ?: number): number {\n        if (!arr || !arr.length) return -1;\n        let pos = fromIndex || 0;\n        arr = this.objToArray<T>(arr);\n        return arr.indexOf(element, pos);\n    }\n\n    /**\n     * filter implementation utilizing the\n     * ECMAScript wherever possible\n     * with added functionality\n     *\n     * @param arr the array to filter\n     * @param scope the closure to apply the function to, with the syntax defined by the ecmascript functionality\n     * function (element<,key, array>)\n     * <p />\n     * additional params\n     * <ul>\n     *  <li> startPos (optional) the starting position</li>\n     *  <li> scope (optional) the scope to apply the closure to</li>\n     * </ul>\n     */\n    arrFilter<T>(arr: any, callbackfn: (value: T, index?: number, array?: T[]) => boolean, startPos ?: number, scope ?: Function) {\n        if (!arr || !arr.length) return [];\n        let arrFinal = this.objToArray<T>(arr);\n        return ((startPos) ? arrFinal.slice(startPos).filter(callbackfn, scope) : arrFinal.filter(callbackfn, scope));\n    }\n\n    /**\n     * helper to automatically apply a delivered arguments map or array\n     * to its destination which has a field \"_\"<key> and a full field\n     *\n     * @param dest the destination object\n     * @param args the arguments array or map\n     * @param argNames the argument names to be transferred\n     */\n    /**\n     * helper to automatically apply a delivered arguments map or array\n     * to its destination which has a field \"_\"<key> and a full field\n     *\n     * @param dest the destination object\n     * @param args the arguments array or map\n     * @param argNames the argument names to be transferred\n     */\n    applyArgs<T>(dest: any, args: { [key: string]: T } | Array<T>, argNames?: Array<string>): any {\n        let UDEF = 'undefined';\n        if (argNames) {\n            for (let cnt = 0; cnt < (<Array<T>>args).length; cnt++) {\n                //dest can be null or 0 hence no shortcut\n                if (UDEF != typeof dest[\"_\" + argNames[cnt]]) {\n                    dest[\"_\" + argNames[cnt]] = args[cnt];\n                }\n                if (UDEF != typeof dest[argNames[cnt]]) {\n                    dest[argNames[cnt]] = args[cnt];\n                }\n            }\n        } else {\n            for (let key in args) {\n                if (!args.hasOwnProperty(key)) continue;\n                if (UDEF != typeof dest[\"_\" + key]) {\n                    dest[\"_\" + key] = args[key];\n                }\n                if (UDEF != typeof dest[key]) {\n                    dest[key] = args[key];\n                }\n            }\n        }\n        return dest;\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    equalsIgnoreCase(source: string, destination: string): boolean {\n        //either both are not set or null\n        if (!source && !destination) {\n            return true;\n        }\n        //source or dest is set while the other is not\n        if (!source || !destination) return false;\n        //in any other case we do a strong string comparison\n        return source.toLowerCase() === destination.toLowerCase();\n    }\n\n    /*\n     * Promise wrappers for timeout and interval\n     */\n    timeout(timeout: number): CancellablePromise {\n        let handler: any = null;\n        return new CancellablePromise((apply: Function, reject: Function) => {\n            handler = setTimeout(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearTimeout(handler);\n                handler = null;\n            }\n        });\n    }\n\n    interval(timeout: number): CancellablePromise {\n        let handler: any = null;\n        return new CancellablePromise((apply: Function, reject: Function) => {\n            handler = setInterval(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearInterval(handler);\n                handler = null;\n            }\n        });\n    }\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    public assertType(probe: any, theType: any): boolean {\n        return this.isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n}","import {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //var func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            var fn = this.allFuncs.shift();\n            if (fn.catch) {\n                var funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            var fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (var cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {Config, IValueHolder, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {ICollector, Stream} from \"./Stream\";\n\n// @ts-ignore supression needed here due to fromnullable\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n\n    static fromNullable(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @param src\n * @constructor\n */\nconst DEFAULT_JSF_WHITELIST = (src: string) => {\n    return (src.indexOf(\"ln=scripts\") == -1 &&\n        src.indexOf(\"ln=javax.faces\") == -1) ||\n        (src.indexOf(\"/jsf.js\") == -1 &&\n            src.indexOf(\"/jsf-uncompressed.js\") == -1);\n};\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery {\n\n    static absent = new DomQuery();\n    private rootNode: Array<Element> = [];\n\n    constructor(...rootNode: Array<Element | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (Lang.instance.isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else if (Lang.instance.isString(rootNode[cnt])) {\n                    let result = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    this.rootNode.push(...result.values);\n\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n    /**\n     * returns the elements of this dom tree, always as array (keep that in mind)\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ValueEmbedder<string>(this.getAsElem(0).value, \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder<string>(this.getAsElem(0).value, \"name\");\n    }\n\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string> {\n        if(this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any> ValueEmbedder.absent;\n        }\n    }\n\n    get elements(): DomQuery {\n        let elements: Array<DomQuery> = this.each((item: DomQuery) => {\n            let formElement: HTMLFormElement = <HTMLFormElement>item.value.value;\n            return formElement.elements ? formElement.elements : null;\n        }).stream\n            .filter(item => !!item).value;\n\n        let res = new DomQuery(...elements);\n\n        return res\n            .orElseLazy(() => this.querySelectorAll(\"form\").elements)\n            .orElseLazy(() => this.querySelectorAll(\"input, select, textarea\"));\n    }\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return !!this.attr(\"disabled\").value;\n    }\n\n    set disabled(disabled: boolean) {\n        this.attr(\"disabled\").value = disabled+\"\";\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(Lang.instance.objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        let ret: Array<DomQuery> = [];\n        this.each((item) => {\n            ret.push(item);\n        });\n        return new Stream<DomQuery>(...ret);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        return new DomQuery(document).querySelectorAll(selector);\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element): DomQuery {\n        if (Lang.instance.isString(selector)) {\n            return new DomQuery(document).byId(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (Lang.instance.isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string): DomQuery {\n        return new DomQuery(document).globalEval(code);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n        //TODO check if ie8 still has this problem, probably not we probably\n        //can drop this code in favor of html\n\n        //now to the non w3c compliant browsers\n        //http://blogs.perl.org/users/clinton_gormley/2010/02/forcing-ie-to-accept-script-tags-in-innerhtml.html\n        //we have to cope with deficiencies between ie and its simulations in this case\n        let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n        //fortunately a table element also works which is less critical than form elements regarding\n        //the inner content\n        dummyPlaceHolder.html(\"<table><tbody><tr><td>\" + markup + \"</td></tr></tbody></table>\");\n        let childs = dummyPlaceHolder.querySelectorAll(\"td\").get(0).childNodes;\n        childs.detach();\n        dummyPlaceHolder.html(\"\");\n        return childs;\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery {\n        if (this.rootNode.length == 0) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt].querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(Lang.instance.objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        for (let cnt = 0; includeRoot && cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].id == id) {\n                res.push(new DomQuery(this.rootNode[cnt]));\n            }\n        }\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery {\n        let res = [];\n        for (let cnt = 0; includeRoot && cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].tagName == tagName) {\n                res.push(new DomQuery(this.rootNode[cnt]));\n            }\n        }\n        res = res.concat(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n\n        this.each((item) => {\n            let oldClass = item.attr(\"class\").value || \"\";\n            if (oldClass.toLowerCase().indexOf(clazz.toLowerCase()) == -1) {\n                return;\n            } else {\n                let oldClasses = oldClass.split(/\\s+/gi);\n                let found = false;\n                for (let cnt = 0; cnt < oldClasses.length && !found; cnt++) {\n                    found = oldClasses[cnt].toLowerCase() == clazz.toLowerCase();\n                }\n                hasIt = hasIt || found;\n                if (hasIt) {\n                    return false;\n                }\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.each((item) => {\n            let oldClass = item.attr(\"class\").value || \"\";\n            if (!this.hasClass(clazz)) {\n                item.attr(\"class\").value = Lang.instance.trim(oldClass + \" \" + clazz);\n                return;\n            }\n        });\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.each((item) => {\n            if (this.hasClass(clazz)) {\n                let oldClass = item.attr(\"class\").value || \"\";\n                let newClasses = [];\n                let oldClasses = oldClass.split(/\\s+/gi);\n                for (let cnt = 0; cnt < oldClasses.length; cnt++) {\n                    if (oldClasses[cnt].toLowerCase() != clazz.toLowerCase()) {\n                        newClasses.push(oldClasses[cnt]);\n                    }\n                }\n                item.attr(\"class\").value = newClasses.join(\" \");\n            }\n        });\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean {\n        return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\n    }\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.getAsElem(0).isPresent() ? Optional.fromNullable(this.getAsElem(0).value.innerHTML) : Optional.absent;\n        }\n        if (this.getAsElem(0).isPresent()) {\n            this.getAsElem(0).value.innerHTML = inval;\n        }\n        return this;\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || (<any>window).ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n        //return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    matchesSelector(selector: string): boolean {\n        this.eachElem(item => {\n            if (!this._mozMatchesSelector(item, selector)) {\n                return false;\n            }\n        });\n        return true;\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.get(cnt), cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery) {\n        this.eachElem((item) => {\n            let value1: Element = <Element>elem.getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: (theItem: any) => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string) {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.send(null);\n\n        //since we are synchronous we do it after not with onReadyStateChange\n\n        if (xhr.readyState == 4) {\n            if (xhr.status == 200) {\n                //defer also means we have to process after the ajax response\n                //has been processed\n                //we can achieve that with a small timeout, the timeout\n                //triggers after the processing is done!\n                if (!defer) {\n                    this.globalEval(xhr.responseText.replace(\"\\n\", \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n                } else {\n                    //TODO not ideal we maybe ought to move to something else here\n                    //but since it is not in use yet, it is ok\n                    setTimeout(function () {\n                        this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                    }, defer);\n                }\n            } else {\n                throw Error(xhr.responseText);\n            }\n        } else {\n            throw Error(\"Loading of script \" + src + \" failed \");\n        }\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        let processed = [];\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        let retArr = [];\n        const lowerTagName = tagName.toLowerCase();\n        let resolveItem = (item: Element) => {\n\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName) {\n                retArr.push(item);\n            }\n\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode) {\n                item = <Element>item.parentNode;\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            for (let cnt = 0; cnt < sourceNode.attributes.length; cnt++) {\n                let value = sourceNode.attributes[cnt].value;\n                if (value) {\n                    this.attr(sourceNode.attributes[cnt].name).value = value;\n                }\n\n                let formElement = <HTMLFormElement>sourceNode;\n\n                //those values are not part of the attributes\n                if (\"value\" in formElement) {\n                    this.resolveAttributeHolder().value = formElement.value;\n                }\n                if (\"checked\" in formElement) {\n                    this.resolveAttributeHolder(\"checked\").checked = formElement.checked || true;\n                }\n                if (\"disabled\" in formElement) {\n                    this.resolveAttributeHolder(\"disabled\").disabled = formElement.checked || \"disabled\";\n                }\n\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attr\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery {\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n\n        let insertAdditionalItems = [];\n\n        for (let cnt = 1; cnt < nodes.length; cnt++) {\n            insertAdditionalItems.push(nodes.get(cnt));\n            this.rootNode.push(nodes.get(cnt).getAsElem(0).value);\n        }\n\n        res.push(DomQuery.byId(replaced).insertAfter(...insertAdditionalItems));\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean = DEFAULT_JSF_WHITELIST): DomQuery {\n        let _Lang = Lang.instance,\n            finalScripts = [],\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && _Lang.equalsIgnoreCase(tagName, \"script\") &&\n                    (itemType === \"\" || _Lang.equalsIgnoreCase(itemType, \"text/javascript\") ||\n                        _Lang.equalsIgnoreCase(itemType, \"javascript\") ||\n                        _Lang.equalsIgnoreCase(itemType, \"text/ecmascript\") ||\n                        _Lang.equalsIgnoreCase(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            if (finalScripts.length) {\n                                //script source means we have to eval the existing\n                                //scripts before running the include\n                                this.globalEval(finalScripts.join(\"\\n\"));\n\n                                finalScripts = [];\n                            }\n                            this.loadScriptEval(src, 0, \"UTF-8\");\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        let test = item.text;\n                        let go = true;\n                        while (go) {\n                            go = false;\n                            if (test.substring(0, 1) == \" \") {\n                                test = test.substring(1);\n                                go = true;\n                            }\n                            if (test.substring(0, 4) == \"<!--\") {\n                                test = test.substring(4);\n                                go = true;\n                            }\n                            if (test.substring(0, 11) == \"//<![CDATA[\") {\n                                test = test.substring(11);\n                                go = true;\n                            }\n                        }\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push(test);\n\n                    }\n                }\n            };\n        try {\n            let scriptElements = this.querySelectorAll(\"script\");\n            if (scriptElements == null) return;\n            for (let cnt = 0; cnt < scriptElements.length; cnt++) {\n                execScrpt(scriptElements.getAsElem(cnt).value);\n            }\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        } catch (e) {\n            if (window.console && window.console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n    }\n\n    runCss(): DomQuery {\n\n        const UDEF = \"undefined\",\n            // _RT = this._RT,\n            _Lang = Lang.instance,\n            applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ? newSS.sheet : (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") || \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") || \"text/css\");\n\n                if (UDEF != typeof styleSheet.cssText) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n\n            },\n\n            execCss = (item: Element) => {\n                const equalsIgnoreCase = _Lang.equalsIgnoreCase;\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: NodeList = item.childNodes;\n                    if (childNodes) {\n                        const len = childNodes.length;\n                        for (let cnt = 0; cnt < len; cnt++) {\n                            innerText.push((<Element>childNodes[cnt]).innerHTML || (<CharacterData>childNodes[cnt]).data);\n                        }\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = this.querySelectorAll(\"link, style\");\n        if (scriptElements == null) return;\n        for (let cnt = 0; cnt < scriptElements.length; cnt++) {\n            let element: any = scriptElements.getAsElem(cnt);\n            execCss(element.value);\n        }\n\n        return this;\n    }\n\n    get cDATAAsString(): string {\n        let cDataBlock = [];\n        // response may contain several blocks\n        this.each((item: DomQuery) => {\n            item.childNodes.eachElem((node: Node) => {\n                cDataBlock.push(<string>(<any>node).data);\n            });\n        });\n        return cDataBlock.join('');\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => {\n            node.addEventListener(type, listener, options);\n        });\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => {\n            node.removeEventListener(type, listener, options);\n        });\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            var doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                var eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                var event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.eachElem((element: HTMLFormElement) => {\n            if (!element.name) {//no name, no encoding\n                return;\n            }\n            let name = element.name;\n            let tagName = element.tagName.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.apply(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if ((tagName != \"select\" && elemType != \"button\"\n                    && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n                    && ((elemType != \"checkbox\" && elemType != \"radio\") || (<any>element).checked)) {\n                    let files: any = (<any>element.value).files;\n                    if (files && files.length) {\n                        //xhr level2\n                        target.apply(name).value = files[0];\n                    } else {\n                        target.apply(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n\n    }\n\n    private subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n}\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] =[];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}","\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T,S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * For the time being streams are early evaluated\n * will be removed to lazy streams soon as I have time to work on them\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>> {\n\n    value: Array<T>;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Stream<any> {\n        let mapped: Stream<R> = this.map(fn);\n        let res = this.mapStreams(mapped);\n        return new Stream(...res);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce(fn: (val1: T, val2: T) => T, startVal: T = null): Optional<T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1 = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length; cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        return Optional.fromNullable(this.value.length ? this.value[this.value.length - 1] : null);\n    }\n\n    anyMatch(fn: (data: T) => boolean): boolean {\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: (data: T) => boolean): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: (data: T) => boolean): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    private mapStreams<R>(mapped: Stream<R>): Array<R> {\n        let res: Array<R> = [];\n        mapped.each((data: any) => {\n            if (data instanceof Stream) {\n                res = res.concat(this.mapStreams(data));\n            } else {\n                res.push(data);\n            }\n        });\n        return res;\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>>{\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery) {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any> {\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if(xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new window.DOMParser(),\n                (): DOMParser =>  createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, \"text/xml\");\n        };\n\n        if(Lang.instance.isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            if (typeof (<any>window).XMLSerializer != \"undefined\") {\n                ret.push(new (<any>window).XMLSerializer().serializeToString(node));\n            } else if (typeof node.xml != \"undefined\") {\n                ret.push(node.xml);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new  XMLQuery(txt);\n    }\n\n    static fromString(txt: string): XMLQuery {\n        return new  XMLQuery(txt);\n    }\n}\n"],"sourceRoot":""}