{"version":3,"file":"XmlQuery.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {ArrayCollector, ICollector, IStreamDataSource} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\nimport objToArray = Lang.objToArray;\nimport isString = Lang.isString;\nimport equalsIgnoreCase = Lang.equalsIgnoreCase;\n//import {observable, Observable, Subscriber} from \"rxjs\";\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout ?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval ?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum Submittables {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait until a certain condition is reached\n * depening on the browser this uses either the mutation observer or a semi compatible interval as fallback\n * @param condition\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = { attributes: true, childList: true, subtree: true, timeout: 500, interval: 100 }): Promise<DomQuery> {\n    const ret = new Promise<DomQuery>((success, error) => {\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n        if('undefined' != typeof window.MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                return error(MUT_ERROR);\n            }, options.timeout);\n            const callback: MutationCallback = (mutationList: MutationRecord[], observer: MutationObserver) => {\n                const found = new DomQuery(mutationList.map((mut: MutationRecord) => mut.target)).first(condition);\n                if(found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    success(found);\n                }\n            }\n\n            const observer = new window.MutationObserver(callback);\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {... options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { //fallback for legacy browsers without mutation observer\n            //we do the same but for now ignore the options on the dom query\n            let interval = setInterval(() => {\n                let found = null;\n                if(options.childList) {\n                    found = (condition(root)) ? root:  root.childNodes.first(condition);\n                } else if(options.subtree) {\n                    found = (condition(root)) ? root: root.querySelectorAll(\" * \").first(condition);\n                } else {\n                    found = (condition(root)) ? root: DomQuery.absent;\n                }\n                if(found.isPresent()) {\n                    if(timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                        success(found);\n                    }\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if(interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n    return ret;\n}\n\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute,T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any> new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @param src\n * @constructor\n */\nconst DEFAULT_JSF_WHITELIST = (src: string) => {\n    return (src.indexOf(\"ln=scripts\") == -1 &&\n        src.indexOf(\"ln=javax.faces\") == -1) ||\n        (src.indexOf(\"/jsf.js\") == -1 &&\n            src.indexOf(\"/jsf-uncompressed.js\") == -1);\n};\n\ninterface IDomQuery {\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The the value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n    /**\n     * the underlying form elements as domquery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded (highest level)\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchevent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery): void;\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the domquery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n    /**\n     * all parents with TagName\n     * @param tagName\n     */\n    parents(tagName: string): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another domquery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinstr?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinstr?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the subnodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    //observable: Observable<DomQuery>;\n\n    //observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        //a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow doms\n     * separately and runs the query on earch shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if(queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if(shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if(shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        //filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => item != null)\n            .map(item => DomQuery.byId(item)).collect(new ArrayCollector()));\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.indexOf('<!doctype') != -1 ||\n            lowerMarkup.indexOf('<html') != -1 ||\n            lowerMarkup.indexOf('<head') != -1 || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\n            lowerMarkup.indexOf('<body') != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            //table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given elmement\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ?  (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        //We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n\n    /*deep with a selector and a peudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let nodes = [];\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if(subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any> LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        let isCandidate = (item: DomQuery): boolean => {\n            if(item.length == 0) {\n                return false;\n            }\n            if(item.length == 1) {\n                if ((<string>item.tagName.get(\"booga\").value).toLowerCase() == \"input\" &&\n                    (<string>item.attr(\"type\")?.value || \"\").toLowerCase() == \"file\") {\n                    return true;\n                }\n                if (deep) {\n                    return this.querySelectorAllDeep(\"input[type='file']\").firstElem().isPresent();\n                } else {\n                    return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\n                }\n            }\n            return item.isMultipartCandidate(deep);\n        };\n        let ret = this.stream.filter(item => isCandidate(item)).first().isPresent();\n\n        return ret;\n    }\n\n\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHtml) : Optional.absent;\n        }\n        this.innerHtml = inval;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    set innerHtml(inVal: string) {\n        this.eachElem(elem => elem.innerHTML = inVal);\n    }\n\n    get innerHtml(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || (<any>window).ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    matchesSelector(selector: string): boolean {\n        this.eachElem(item => {\n            if (!this._mozMatchesSelector(item, selector)) {\n                return false;\n            }\n        });\n        return true;\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                //we could use a filter, but for the best performance we dont\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery) {\n        this.eachElem((item) => {\n            let value1: Element = <Element>elem.getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: (theItem: any) => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string = \"utf-8\") {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.send(null);\n\n        xhr.onload = (responseData: any) => {\n            //defer also means we have to process after the ajax response\n            //has been processed\n            //we can achieve that with a small timeout, the timeout\n            //triggers after the processing is done!\n            if (!defer) {\n                this.globalEval(xhr.responseText.replace(/\\n/g, \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n            } else {\n                //TODO not ideal we maybe ought to move to something else here\n                //but since it is not in use yet, it is ok\n                setTimeout(() => {\n                    this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                }, defer);\n            }\n        };\n\n        xhr.onerror = (data: any) => {\n            throw Error(data);\n        };\n        //since we are synchronous we do it after not with onReadyStateChange\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        const retSet: Set<Element> = new Set();\n        const retArr: Array<Element> = [];\n        const lowerTagName = tagName.toLowerCase();\n\n        let resolveItem = (item: Element) => {\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName && !retSet.has(item)) {\n                retSet.add(item);\n                retArr.push(item);\n            }\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode || (<any> item).host) {\n                item = <Element>item?.parentNode ?? (<any>item)?.host;\n\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        //no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean = DEFAULT_JSF_WHITELIST): DomQuery {\n        let finalScripts = [],\n            equi = equalsIgnoreCase,\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && equi(tagName, \"script\") &&\n                    (itemType === \"\" || equi(itemType, \"text/javascript\") ||\n                        equi(itemType, \"javascript\") ||\n                        equi(itemType, \"text/ecmascript\") ||\n                        equi(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            if (finalScripts.length) {\n                                //script source means we have to eval the existing\n                                //scripts before running the include\n                                this.globalEval(finalScripts.join(\"\\n\"));\n\n                                finalScripts = [];\n                            }\n                            this.loadScriptEval(src, 0, \"UTF-8\");\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        //TODO this probably needs to be changed due to our new parsing structures\n                        //probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push(evalText);\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            //script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) //preceding 2, following == 4)\n                .each(item => execScrpt(item));\n\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        } catch (e) {\n            if (window.console && window.console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ?? (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") ?? \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") ?? \"text/css\");\n\n                if (styleSheet?.cssText ?? false) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n            },\n\n            execCss = (item: Element) => {\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: Array<Node> = Array.prototype.slice.call(item.childNodes);\n                    if (childNodes) {\n                        childNodes.forEach(child => innerText.push((<Element>child).innerHTML || (<CharacterData>child).data));\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinstr), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {//no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != Submittables.SELECT &&\n                        elemType != Submittables.BUTTON &&\n                        elemType != Submittables.RESET &&\n                        elemType != Submittables.SUBMIT &&\n                        elemType != Submittables.IMAGE\n                    ) && (\n                        (\n                            elemType != Submittables.CHECKBOX && elemType != Submittables.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let files: any = (<any>element.value).value?.files ?? [];\n                    if (files?.length) {\n                        //xhr level2\n                        target.append(name).value = files[0];\n                    } else {\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let cDataBlock = [];\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    //TODO this part probably will be removed\n    //because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the subdome before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = { attributes: true, childList: true, subtree: true, timeout: 500, interval: 100 }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //from\n    // http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                //the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                //the caretposition is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            //now this is ugly, but not supported input types throw errors for selectionStart\n            //just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        //the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n\n    /*[observable](): Observable<DomQuery> {\n        return this.observable;\n    }\n\n    get observable(): Observable<DomQuery> {\n        let observerFunc = (observer:Subscriber<DomQuery>) => {\n            try {\n                this.each(dqNode => {\n                    observer.next(dqNode);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }\n\n    get observableElem(): Observable<Element> {\n        let observerFunc = (observer:Subscriber<Element>) => {\n            try {\n                this.eachElem(node => {\n                    observer.next(node);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }*/\n\n}\n\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    get shallowCopy(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    get deepCopy(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param keys\n     */\n    append(...keys): IValueHolder<any> {\n        let noKeys = keys.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = keys[keys.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...keys).isPresent();\n        this.buildPath(keys);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...keys).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...keys).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    appendIf(condition: boolean, ...keys): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...keys);\n    }\n\n    assign(...keys): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    assignIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...keys) : {value: null};\n    }\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param keys a sequential array of keys containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < this.total;\n    }\n\n    next(): number {\n        return Math.min(this.value++, this.total - 1);\n    }\n\n    reset(): void {\n        this.value = 0;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    filteredNext: T = null;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this.filteredNext = next;\n                return true;\n            } else {\n                this.filteredNext = null;\n            }\n        }\n        return this.filteredNext != null;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let ret = this.filteredNext;\n        this.filteredNext = null;\n        //We have to call hasNext, to roll another\n        //prefetch in case someone runs next\n        //sequentially without calling hasNext\n        this.hasNext();\n        return ret;\n    }\n\n    reset(): void {\n        this.filteredNext = null;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveCurrentNext() || this.resolveNextNext();\n    }\n\n    private resolveCurrentNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next());\n            if (Array.isArray(mapped)) {\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\n            } else {\n                this.activeDataSource = mapped;\n            }\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        return this.activeDataSource.next();\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, {[key: string]: S} > {\n    finalValue: {[key:string]: any} = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string> element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = 0;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new window.DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (<any>window)?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(121);\n"],"names":["Submittables","trim","Lang","objToArray","isString","equalsIgnoreCase","waitUntilDom","root","condition","options","attributes","childList","subtree","timeout","interval","Promise","success","error","MUT_ERROR","Error","window","MutationObserver","setTimeout","mutationList","observer","found","DomQuery","map","mut","target","first","isPresent","clearTimeout","eachElem","item","observe","setInterval","childNodes","querySelectorAll","absent","clearInterval","element","name","defaultVal","val","this","get","orElse","values","length","getAttribute","value","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","DEFAULT_JSF_WHITELIST","src","indexOf","rootNode","pos","_limits","Optional","isAbsent","foundElement","push","getAsElem","allElems","getIf","isTag","tagName","nodeName","toLowerCase","Stream","of","allMatch","el","checked","newChecked","querySelectorAllDeep","queryStr","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","childNodeArr","concat","asArray","LazyStream","filter","byId","collect","ArrayCollector","selector","document","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","nodes","res","foundNodes","selectors","split","cnt2","levelSelector","id","includeRoot","subItems","reduce","reduction","defaultValue","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","stream","firstElem","isCandidate","inval","innerHtml","dispatchEvent","evt","elem","retArr","inVal","_mozMatchesSelector","toMatch","prot","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","matches","ownerDocument","i","filterSelector","matched","selectorStage","nodeSelector","func","len","each","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","appendTo","orElseLazy","theItem","loadScriptEval","defer","charSet","xhr","XMLHttpRequest","open","setRequestHeader","send","onload","responseData","responseText","replace","onerror","data","insertAfter","existingItem","existingElement","nextSibling","toInsertParams","insertElem","insertBefore","elseValue","parents","retSet","Set","lowerTagName","resolveItem","has","host","copyAttrs","sourceItem","sourceNode","attrs","resolveAttributeHolder","attrName","ret","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","whilteListed","finalScripts","equi","execScrpt","itemType","evalText","text","innerText","go","substring","flatMap","sort","node1","node2","compareDocumentPosition","e","console","message","description","applyStyle","style","newSS","styleSheet","sheet","cssText","createTextNode","Array","prototype","forEach","child","execCss","click","fireEvent","addEventListener","listener","removeEventListener","eventName","nodeType","eventClass","createEvent","initEvent","synthetic","createEventObject","textContent","joinstr","text1","text2","encodeFormElement","toMerge","Config","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","append","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","inputValue","lazyStream","reduced","subNodes","from","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","DomQueryCollector","DQ","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","Object","assign","theArgs","nextSource","keys","nextKey","hasOwnProperty","_value","fn","Monad","currentPos","key","currKey","keyVal","arrPos","arrayIndex","getIfPresent","match","toJson","JSON","stringify","start","parseInt","resolve","resolver","rootElem","newVal","alternative","ConfigEntry","ofAssoc","AssocArrayCollector","shallowMerge","other","overwrite","withAppend","isArray","noKeys","lastKey","pathExists","buildPath","finalKeyArrPos","retVal","apply","appendIf","assignIf","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","total","SequenceDataSource","dataPos","ArrayStreamDataSource","filterFunc","parent","filteredNext","inputDataSource","FilteredStreamDatasource","mapFunc","MappedStreamDataSource","resolveCurrentNext","resolveNextNext","activeDataSource","FlatMapStreamDataSource","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ofDataSource","dataSource","toAppend","onElem","strmR","startVal","val1","last","anyMatch","noneMatch","comparator","newArr","collector","ofStreamDataSource","isOverLimits","nextFilter","max","t","stop","value1","value2","el1","el2","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","toString","serialized","XMLSerializer","constructor","serializeToString","parserErrorText","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}