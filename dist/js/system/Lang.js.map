{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","this","_value","map","fn","inval","Monad","flatMap","mapped","fromNullable","Optional","isAbsent","isPresent","presentRunnable","absent","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","currentPos","cnt","length","currKey","keyVal","arrPos","arrayIndex","getClass","Array","getIfPresent","match","defaultVal","toJson","JSON","stringify","start","indexOf","end","parseInt","substring","resolve","resolver","e","rootElem","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","root","Config","Stream","ofAssoc","collect","AssocArrayCollector","shallowMerge","other","overwrite","assign","keys","buildPath","retVal","apply","slice","assignIf","condition","delete","setVal","parentVal","parentPos","alloc","arr","push","tempVal","_limits","pos","of","data","ofDataSource","dataSource","hasNext","next","limits","onElem","each","res","item","ret","strmR","isArray","concat","filter","reduce","startVal","offset","val1","first","last","Math","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collector","finalValue","isLimitsReached","isEndOfArray","reset","parent","LazyStream","ArrayStreamDataSource","values","ofStreamDataSource","isOverLimits","nextFilter","max","MappedStreamDataSource","el","stop","FilteredStreamDatasource","FlatMapStreamDataSource","value1","value2","el1","el2","ArrayCollector","dataPos","filterFunc","filteredNext","inputDataSource","mapFunc","resolveCurrentNext","resolveNextNext","activeDataSource","element","FormData","append","FormDataCollector","toMerge","encodeFormElement","QueryFormDataCollector","formData","join","item1","item2","QueryFormStringCollector","Lang","trim","str","ws","replace","test","charAt","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","saveResolveLazy","strToArray","splitter","split","forEach","objToArray","obj","pack","equalsIgnoreCase","source","destination","finalDest","toLowerCase","timeout","handler","CancellablePromise","reject","setTimeout","clearTimeout","interval","setInterval","clearInterval","assertType","probe","theType","isFunc","Function","PromiseStatus","executor","status","PENDING","allFuncs","all","myapply","promiseCnt","myPromise","Promise","promises","__last__","finally","race","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","cancellator","cancel"],"mappings":"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","file":"Lang.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n\n\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<T>(value?: T): Optional<T> {\n        return new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if(this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch(e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent =  ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if(!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<T>(value?: any, valueKey: string = \"value\"): ValueEmbedder<T> {\n        return new ValueEmbedder(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos =  arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    get shallowCopy(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true) {\n        for (let key in other.value) {\n            if (overwrite && key in this.value) {\n                this.assign(key).value = other.getIf(key).value;\n            } else if (!(key in this.value)) {\n                this.assign(key).value = other.getIf(key).value;\n            }\n        }\n    }\n\n    assign(...keys): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    assignIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...keys) : {value: null};\n    }\n\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            if (arr.length < length) {\n                for (let cnt = arr.length; cnt < length; cnt++) {\n                    arr.push({});\n                }\n            }\n        };\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T> = (val1: T, val2: T) => T;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce(fn: Reducable<T>, startVal: T): Optional<T>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: {[key: string]: T}): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce(fn: Reducable<T>, startVal: T = null): Optional<T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1 = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: {[key: string]: T}): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = 0;\n        this._limits = -1;\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce(fn: Reducable<T>, startVal: T = null): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present\n     */\n    hasNext(): boolean;\n\n    /**\n     * false if not\n     */\n    next(): T;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n}\n\n/**\n * an intermediate data source wich prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    filteredNext: T = null;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this.filteredNext = next;\n                return true;\n            } else {\n                this.filteredNext = null;\n            }\n        }\n        return this.filteredNext != null;\n\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let ret = this.filteredNext;\n        this.filteredNext = null;\n        //We have to call hasNext, to roll another\n        //prefetch in case someone runs next\n        //sequentially without calling hasNext\n        this.hasNext();\n        return ret;\n    }\n\n    reset(): void {\n        this.filteredNext = null;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveCurrentNext() || this.resolveNextNext();\n    }\n\n    private resolveCurrentNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped =  this.mapFunc(this.inputDataSource.next());\n            if(Array.isArray(mapped)) {\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\n            } else {\n                this.activeDataSource = mapped;\n            }\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        return this.activeDataSource.next();\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, {[key:string]:S}> {\n\n    finalValue: {[key:string]:any} = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CancellablePromise} from \"./Promise\";\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if (\"undefined\" == typeof obj || null == obj) {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n    /*\n     * Promise wrappers for timeout and interval\n     */\n    export function timeout(timeout: number): CancellablePromise {\n        let handler: any = null;\n        return new CancellablePromise((apply: Function, reject: Function) => {\n            handler = setTimeout(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearTimeout(handler);\n                handler = null;\n            }\n        });\n    }\n\n    export function interval(timeout: number): CancellablePromise {\n        let handler: any = null;\n        return new CancellablePromise((apply: Function, reject: Function) => {\n            handler = setInterval(() => {\n                apply();\n            }, timeout);\n        }, () => {\n            if (handler) {\n                clearInterval(handler);\n                handler = null;\n            }\n        });\n    }\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n}\n\n","import {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //var func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            var fn = this.allFuncs.shift();\n            if (fn.catch) {\n                var funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            var fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (var cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n"],"sourceRoot":""}