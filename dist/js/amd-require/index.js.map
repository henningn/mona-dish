{"version":3,"file":"index.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/CryptoExtensions.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Messaging.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/TagBuilder.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///external amd-require \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/global","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/index.ts"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {Crypto, Hash} from \"./Messaging\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {LazyStream} from \"./Stream\";\n\n/*\n * Some crypto implementations which might come in handy\n */\n\n\n/**\n * basic json stringify encryption impl\n * this does not really full encryption except for a standard json stringyfywith an encapsulation json\n *\n * the return value resembles:\n * <pre>\n *     {\n *         encryptedData: <data as string>\n *     }\n * </pre>\n */\nexport class JSONCrypto implements Crypto {\n    decode(data: any): any {\n        if (data?.encryptedData) {\n            return JSON.parse(data.encryptedData);\n        }\n        return data;\n    }\n\n    encode(data: any) {\n        return {\n            encryptedData: JSON.stringify(data)\n        }\n    }\n}\n\n\n/**\n * a class with  timeout functionality which blocks decodes after a certain period of time\n * if the message is not decoded by then\n * We use hash as identifier generation after encryption to make sure\n * a trace was possible\n *\n * The idea behind this is to have a generic wrapper which allows messages with dynamic encryption\n * where keys/salts only exist for a certain period of time before expiring!\n * That way someone who implements such a scheme does not have to take care about the bookeeping mechanisms!\n * Or you can use crypto mechanisms which do not have expiring keys and still expire them automatically\n *\n * I will leave it up to the system integrator to provide a rotating crypto class, because this is highly\n * implementation dependent. But it helps to have a wrapper!\n */\nexport class ExpiringCrypto implements Crypto {\n\n    private static MAX_GC_CYCLES = 10;\n    private gcCycleCnt = 0;\n    private storedMessages: { [key: string]: number } = {};\n    private lastCall = 0;\n\n    /**\n     * @param timeout timeout in miliseconds until a message is expired\n     * @param parentCrypto the embedded decorated crypto algorithm\n     * @param hashSum hashshum implementation to generate a hash\n     */\n    constructor(private timeout: number, private parentCrypto: Crypto, private hashSum: Hash) {\n\n    }\n\n    /**\n     * decode implementation with a timeout hook install\n     * @param data\n     */\n    decode(data: any): any {\n        //if ((this.gcCycleCnt++ % ExpiringCrypto.MAX_GC_CYCLES) === 0) {\n\n        const currTime = new Date().getTime();\n        if(this.gcLimitReached(currTime)) {\n            this.storedMessages = LazyStream\n                .ofAssoc(this.storedMessages)\n                .filter(data => data[1] >= currTime)\n                .collect(new AssocArrayCollector());\n        }\n        this.lastCall = currTime;\n\n\n        let rotatingEncoded = this.hashSum.encode(data);\n        if (!this.storedMessages?.[rotatingEncoded.toString()]) {\n            throw Error(\"An item was tried to be decryted which either was expired or invalid\");\n        }\n        return this.parentCrypto.decode(data);\n    }\n\n    /**\n     * trigger function to determine whether the gc needs to cycle again, this is either time or call based\n     * the gc itself collects only on expiration dates\n     * The idea is to run this operation only occasionally because it is costly\n     * We also could have used timeouts etc.. but those would need shutdown/destroy cleanups\n     *\n     * @param currTime\n     * @private\n     */\n    private gcLimitReached(currTime: number) {\n        return (this.lastCall + this.timeout) < currTime || ((++this.gcCycleCnt) % ExpiringCrypto.MAX_GC_CYCLES == 0);\n    }\n\n    /**\n     * encode with a timeout hook installed\n     * calls the encode of the delegated object\n     *\n     * @param data\n     */\n    encode(data: any): any {\n        let encoded = this.parentCrypto.encode(data);\n        //ok use the hashsum really only to store expirations, theoretically there could be a second message which does not invalidate the first one\n        //but this is very unlikely unless a message is sent over and over again, in this case we have a timeout extension anyway!\n        let rotatingEncoded = this.hashSum.encode(encoded);\n        this.storedMessages[rotatingEncoded.toString()] = (new Date().getTime()) + this.timeout;\n        return encoded;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {ArrayCollector, ICollector, IStreamDataSource, ITERATION_STATUS} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\nimport objToArray = Lang.objToArray;\nimport isString = Lang.isString;\nimport equalsIgnoreCase = Lang.equalsIgnoreCase;\nimport {_global$} from \"./Global\";\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum Submittables {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        //we do the same but for now ignore the options on the dom query\n        //we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { //fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\ninterface IDomQuery {\n    /**\n     * reference to the systems global object\n     * (globalThis, window, global, depending on the environment)\n     */\n    readonly global: any;\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The the value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n\n    /**\n     * accumulated top element offsetWidth\n     */\n    readonly offsetWidth: number;\n    /**\n     * accumulated top element offsetHeight\n     */\n    readonly offsetHeight: number;\n    /**\n     * accumulated top element offsetLeft\n     */\n    readonly offsetLeft: number;\n    /**\n     * accumulated top element offsetTop\n     */\n    readonly offsetTop: number;\n\n\n    /**\n     * abbreviation for inputValue.value to make\n     * the code terser\n     */\n    val: string | boolean;\n\n    /**\n     * the underlying form elements as domquery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * inner html property\n     * setter and getter which works directly on strings\n     */\n    innerHTML: string;\n\n    /**\n     * same as innerHTML\n     * will be removed once\n     * my code is transitioned\n     * @deprecated do not use anymore, user innerHTML instead\n     */\n    innerHtml: string;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded (highest level)\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml equivalent\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchevent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    lastElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * Runs an eval and keeps the evaled code in the head\n     * This is a corner condition, where we want to update the head with custom\n     * code and leave the code in (instead of deleting ig)\n     *\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @return {DomQuery} DomQuery of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    append(elem: DomQuery): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    prepend(elem: DomQuery): DomQuery;\n\n    /**\n     * prepend eqivalent to appendTo\n     *\n     * @param elem the element to prepend to\n     */\n    prependTo(elem: DomQuery): DomQuery;\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the domquery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n    /**\n     * all parents with TagName\n     * @param tagName\n     */\n    parents(tagName: string): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another domquery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky?: boolean, whilteListed?: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinstr?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinstr?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the subnodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    //observable: Observable<DomQuery>;\n\n    //observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    //we skip possible null entries which can happen in\n                    //certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        //a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow doms\n     * separately and runs the query on earch shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        //filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => {\n            return item != null\n        })\n            .map(item => {\n                return DomQuery.byId(item)\n            }).collect(new ArrayCollector()));\n    }\n\n    get offsetWidth(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get offsetHeight(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get offsetLeft(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get offsetTop(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.indexOf('<!doctype') != -1 ||\n            lowerMarkup.indexOf('<html') != -1 ||\n            lowerMarkup.indexOf('<head') != -1 || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\n            lowerMarkup.indexOf('<body') != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            //table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given elmement\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        //We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n\n    /*deep with a selector and a peudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tagname to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any>LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = inval;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    set innerHTML(inVal: string) {\n        this.eachElem(elem => elem.innerHTML = inVal);\n    }\n\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    set innerHtml(inval: string) {\n        this.innerHTML = inval;\n    }\n\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matches ||\n            prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        const ret = this.lazyStream\n            .map(item => this._mozMatchesSelector(item.getAsElem(0).value, selector))\n            .filter(match => match)\n            .first();\n        return ret.isPresent();\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                //we could use a filter, but for the best performance we dont\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string = \"utf-8\", nonce?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let head = document.head;\n        if (!defer) {\n            head.appendChild(srcNode);\n            head.removeChild(srcNode);\n        } else {\n            setTimeout(() => {\n                head.appendChild(srcNode);\n                head.removeChild(srcNode);\n            }, defer);\n        }\n\n        return this;\n    }\n\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEvalSticky(src: string, defer: number = 0, charSet: string = \"utf-8\", nonce?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n\n        if (!defer) {\n            document.head.appendChild(srcNode);\n        } else {\n            setTimeout(() => {\n                document.head.appendChild(srcNode);\n            }, defer);\n        }\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        const retSet: Set<Element> = new Set();\n        const retArr: Array<Element> = [];\n        const lowerTagName = tagName.toLowerCase();\n\n        let resolveItem = (item: Element) => {\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName && !retSet.has(item)) {\n                retSet.add(item);\n                retArr.push(item);\n            }\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode || (<any>item).host) {\n                item = <Element>item?.parentNode ?? (<any>item)?.host;\n\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embeddec css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        //no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaled elements will stick to the head, default false\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whilteListed: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                //script source means we have to eval the existing\n                //scripts before running the include\n                //this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                Stream.of(...scriptsToProcess).each(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            equi = equalsIgnoreCase,\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && equi(tagName, \"script\") &&\n                    (itemType === \"\" || equi(itemType, \"text/javascript\") ||\n                        equi(itemType, \"javascript\") ||\n                        equi(itemType, \"text/ecmascript\") ||\n                        equi(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            //we run the collected scripts before running, the include\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0, \"UTF-8\", nonce) :\n                                    //if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0, \"UTF-8\");\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0, \"UTF-8\", nonce) :\n                                    //if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0, \"UTF-8\");\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        //TODO this probably needs to be changed due to our new parsing structures\n                        //probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            //script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) //preceding 2, following == 4)\n                .each(item => execScrpt(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ?? (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") ?? \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") ?? \"text/css\");\n\n                if (styleSheet?.cssText ?? false) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n            },\n\n            execCss = (item: Element) => {\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: Array<Node> = Array.prototype.slice.call(item.childNodes);\n                    if (childNodes) {\n                        childNodes.forEach(child => innerText.push((<Element>child).innerHTML || (<CharacterData>child).data));\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinstr), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {//no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != Submittables.SELECT &&\n                        elemType != Submittables.BUTTON &&\n                        elemType != Submittables.RESET &&\n                        elemType != Submittables.SUBMIT &&\n                        elemType != Submittables.IMAGE\n                    ) && (\n                        (\n                            elemType != Submittables.CHECKBOX && elemType != Submittables.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let files: any = (<any>element.value).value?.files ?? [];\n                    if (files?.length) {\n                        //xhr level2\n                        target.append(name).value = files[0];\n                    } else {\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    //TODO this part probably will be removed\n    //because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the subdome before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //from\n    // http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                //the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                //the caretposition is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            //now this is ugly, but not supported input types throw errors for selectionStart\n            //just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        //the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * concats the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): any {\n        const ret = this.lazyStream.concat(toAttach.lazyStream).collect(new DomQueryCollector());\n        //we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; //ie11 does not support sets, we have to fake it\n        return ret.lazyStream.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }).collect(new DomQueryCollector());\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n\n    /*[observable](): Observable<DomQuery> {\n        return this.observable;\n    }\n\n    get observable(): Observable<DomQuery> {\n        let observerFunc = (observer:Subscriber<DomQuery>) => {\n            try {\n                this.each(dqNode => {\n                    observer.next(dqNode);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }\n\n    get observableElem(): Observable<Element> {\n        let observerFunc = (observer:Subscriber<Element>) => {\n            try {\n                this.eachElem(node => {\n                    observer.next(node);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }*/\n\n    private createSourceNode(src, nonce?:string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        srcNode.src = src;\n        return srcNode;\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * a standardized message to be sent over the message bus\n */\nimport {Observable, Subject} from \"rxjs\";\nimport {Stream} from \"./Stream\";\nimport {_global$} from \"./Global\";\n\n\n/**\n * generic crypto interface\n * to encrypt messages before they are sent\n * to the message bus oder the underlying bus system\n *\n * The idea is to make it as easy as possible, you can use for instance crypto js to\n * handle everything\n */\nexport interface Crypto {\n    /**\n     * note anything can be passed\n     *\n     * @param data the data to be encrypted\n     * @returns the encrypted data in any format, important is decode must be able to handle it\n     */\n    encode(data: any): any;\n\n    /**\n     * @param data the encrypted data in the format you expect it to be\n     * @returns the unencrypted data\n     */\n    decode(data: any): any;\n}\n\n\n/**\n * generic hash interface which provides\n * exactly one method a hash encode which returns a string hash value of encoded data\n */\nexport interface Hash {\n    encode(encodedData: string): string;\n}\n\n/**\n * Default implementation = no encryption\n */\nexport class NoCrypto implements Crypto {\n    decode(data: any): string {\n        return data;\n    }\n\n    encode(data: any): any {\n        return data;\n    }\n}\n\n//TODO dynamic encryptor which flushes the messages before changing the keys\n//that way we can rotate and change internal crypto keys on the fly\n\nlet noEncryption = new NoCrypto();\n\nexport class Message {\n\n    creationDate?: number;\n    identifier?: string;\n    targetOrigin?: string;\n    encoded: boolean = false;\n\n    constructor(public message: any = {}, targetOrigin = \"*\") {\n        this.targetOrigin = targetOrigin;\n        this.creationDate = new Date().getMilliseconds();\n        this.identifier = new Date().getMilliseconds() + \"_\" + Math.random() + \"_\" + Math.random();\n    }\n}\n\n/**\n * custom dom event wrapping our messages\n */\nclass MessageWrapper implements CustomEventInit<Message> {\n\n    detail?: Message;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n    channel: string;\n\n    constructor(channel: string, message: Message) {\n        this.detail = message;\n        this.bubbles = true;\n        this.cancelable = true;\n        this.composed = true;\n        this.channel = channel;\n    }\n}\n\n\nabstract class BaseBroker {\n\n    static readonly EVENT_TYPE = \"brokerEvent\";\n    /**\n     * we can split the listeners with the system\n     * namespace... and type (aka identifier criteria)\n     */\n    protected messageListeners: any = {};\n    protected subjects: any = {};\n    protected processedMessages: any = {};\n\n    protected cleanupCnt = 0;\n    protected rootElem;\n    protected msgHandler;\n\n    protected readonly TIMEOUT_IN_MS = 1000;\n    protected readonly MSG_EVENT = \"message\";\n\n    //must be public because we also must have the option\n    //to set it outside of the constructor\n    crypto = noEncryption;\n\n\n    abstract register(scopeElement?: any): BaseBroker;\n\n    abstract unregister(): BaseBroker;\n\n    abstract broadcast(channel: string, message: Message | string): BaseBroker;\n\n\n    /**\n     * registers a listener on a channel\n     * @param channel the channel to register the listeners for\n     * @param listener the listener to register\n     */\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.reserveListenerNS(channel);\n\n        //we skip the processed messages, because they originated here\n        //and already are processed\n        this.messageListeners[channel].push((msg: Message) => {\n            if (msg.identifier in this.processedMessages) {\n                return;\n            }\n            if (msg?.encoded || msg?.[\"detail\"]?.encoded) {\n                if (msg?.[\"detail\"]) {\n                    msg[\"detail\"].message = this.crypto.decode(msg[\"detail\"].message);\n                    msg[\"detail\"].encoded = false;\n                } else {\n                    msg.message = this.crypto.decode(msg.message);\n                    msg.encoded = false;\n                }\n\n            }\n            listener(msg);\n        });\n        return this;\n    }\n\n    /**\n     * binding into rxjs\n     * produces a subject which can be used via next calls to send messages\n     * on the other hand we\n     * @param channel\n     */\n    asSubject(channel: string): Subject<Message> {\n        this.reserveSubjectNS(channel);\n        let subject = this.subjects[channel];\n        let oldNext = subject.next;\n\n        subject.next = (msg: Message | MessageWrapper) => {\n            //We use a recursive call to let the broadcaster handle\n            //The wrapper conversion and then again call us here\n            //that way both directions are handled.. next calls the broker\n            //and a broadcast calls next\n            if ((<MessageWrapper>msg)?.detail) {\n                oldNext.call(subject, (<MessageWrapper>msg)?.detail);\n            } else {\n                this.broadcast(channel, <Message>msg);\n            }\n        }\n        return subject;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * returns an observable on the baseBroker\n     * @param channel\n     */\n    asObservable(channel: string): Observable<Message> {\n        return this.asSubject(channel).asObservable();\n    }\n\n    /**\n     * reserves the listener namespace and wildcard namespace for the given identifier\n     * @param identifier\n     * @private\n     */\n    private reserveListenerNS(identifier: string) {\n        if (!this.messageListeners[identifier]) {\n            this.messageListeners[identifier] = [];\n        }\n        if (!this.messageListeners[\"*\"]) {\n            this.messageListeners[\"*\"] = [];\n        }\n    }\n\n    private reserveSubjectNS(identifier: string) {\n        if (!this.subjects[identifier]) {\n            this.subjects[identifier] = new Subject();\n        }\n        if (!this.subjects[\"*\"]) {\n            this.subjects[\"*\"] = new Subject();\n        }\n    }\n\n    /**\n     * unregisters a listener from this channel\n     *\n     * @param channel the channel to unregister from\n     * @param listener the listener to unregister the channel from\n     */\n    unregisterListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.messageListeners[channel] = (this.messageListeners[channel] || []).filter((item: any) => item !== listener);\n        return this;\n    }\n\n    /**\n     * answers a bidirectional message received\n     * usage, the client can use this method, to answer an incoming message in a precise manner\n     * so that the caller sending the bidirectional message knows how to deal with it\n     * this mechanism can be used for global storages where we have one answering entity per channel delivering the\n     * requested data, the request can be done asynchronously via promises waiting for answers\n     *\n     * @param channel the channel the originating message\n     * @param request the requesting message\n     * @param answer the answer to the request\n     */\n    answer(channel: string, request: Message | string, answer: Message): BaseBroker {\n        if ('string' == typeof request) {\n            request = new Message(request);\n        }\n\n        if (BaseBroker.isAnswer(request)) {\n            return;\n        }\n        answer.identifier = BaseBroker.getAnswerId(request);\n        this.broadcast(channel, answer);\n        return this;\n    }\n\n    private static getAnswerId(request: Message) {\n        return \"_r_\" + request.identifier;\n    }\n\n    private static isAnswer(request: Message) {\n        return request.identifier.indexOf(\"_r_\") == 0;\n    }\n\n    /**\n     * idea... a bidirectional broadcast\n     * sends a message and waits for the first answer coming in from one of the receivers\n     * sending the message back with a messageIdentifier_broadCastId answer\n     *\n     * @param channel\n     * @param message\n     */\n    request(channel: string, message: Message | string): Promise<Message> {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        let messageId = message.identifier;\n\n        let ret = new Promise<Message>((resolve, reject) => {\n            let timeout = null;\n            let listener = (message2: Message) => {\n                if (message2.identifier == messageId) {\n                    //broadcast from same source, we do not want\n                    //to deal with it now\n                    return;\n                }\n\n                if (message2.identifier == \"_r_\" + messageId) {\n                    clearTimeout(timeout);\n                    this.unregisterListener(channel, listener);\n                    resolve(message2);\n                }\n            }\n            timeout = setTimeout(() => {\n                this.unregisterListener(channel, listener);\n                reject(\"request message performed, timeout, no return value\");\n            }, 3000);\n            this.registerListener(channel, listener);\n\n        });\n        this.broadcast(channel, message);\n        return ret;\n    }\n\n\n    /**\n     * garbage collects the processed messages queue\n     * usually after one second\n     */\n    protected gcProcessedMessages() {\n        if ((++this.cleanupCnt) % 10 != 0) {\n            return;\n        }\n        let newProcessedMessages: any = {};\n        Object.keys(this.processedMessages).forEach(key => {\n            if (this.messageStillActive(key)) return;\n            newProcessedMessages[key] = this.processedMessages[key];\n        });\n        this.processedMessages = newProcessedMessages;\n    }\n\n    private messageStillActive(key: string): boolean {\n        return this.processedMessages[key] > ((new Date()).getMilliseconds() - this.TIMEOUT_IN_MS);\n    }\n\n    protected markMessageAsProcessed(message: Message) {\n        this.processedMessages[message.identifier] = message.creationDate;\n    }\n}\n\nlet broadCastChannelBrokerGenerator = (name) => {\n    if (_global$()?.BroadcastChannel) {\n        return new (_global$()).BroadcastChannel(name);\n    }\n    throw Error(\"No Broadcast channel in the system, use a shim or provide a factory function\" +\n        \"in the constructor\");\n};\n\nconst DEFAULT_CHANNEL_GROUP = \"brokr\";\n\n/**\n * a broker which hooks into the Broadcast Channel broker\n * either via shim or substitute lib\n */\nexport class BroadcastChannelBroker extends BaseBroker {\n    private openChannels: [{ key: string }, BroadcastChannel] = <any>{};\n    private readonly msgListener: Function;\n\n\n    /**\n     * @param brokerFactory a factory generating a broker\n     * @param channelGroup a group to combine a set of channels\n     * @param crypto a crypto class\n     */\n    constructor(private brokerFactory: Function = broadCastChannelBrokerGenerator, private channelGroup = DEFAULT_CHANNEL_GROUP, public crypto: Crypto = noEncryption) {\n        super();\n        this.msgListener = (messageData: MessageWrapper) => {\n            if (messageData.detail.encoded) {\n                messageData.detail.message = <any>this.crypto.decode(messageData.detail.message);\n                messageData.detail.encoded = false;\n            }\n            let coreMessage = messageData.detail;\n            let channel: string = messageData.channel;\n\n            if (this.messageListeners?.[channel]) {\n                this.messageListeners?.[channel].forEach(listener => {\n                    listener(coreMessage);\n                })\n            }\n            this.markMessageAsProcessed(coreMessage);\n            return true;\n        }\n        this.crypto = crypto;\n        this.register();\n    }\n\n    broadcast(channel: string, message: Message | string, includeOrigin = true): BaseBroker {\n        try {\n            if ('string' == typeof message) {\n                message = new Message(message);\n            }\n            //we now run a quick remapping to avoid\n            //serialisation errors\n            let msgString = JSON.stringify(<Message>message);\n            message = <Message>JSON.parse(msgString);\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n            messageWrapper.detail.encoded = true;\n\n            if (this?.subjects[channel]) {\n                this.subjects[channel].next(messageWrapper);\n            }\n\n            this.openChannels[this.channelGroup].postMessage(messageWrapper);\n            if (includeOrigin) {\n                this.msgListener(messageWrapper);\n            }\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        super.registerListener(channel, listener);\n        return <BaseBroker>this;\n    }\n\n    register(): BaseBroker {\n        if (!this.openChannels[this.channelGroup]) {\n            this.openChannels[this.channelGroup] = this.brokerFactory(this.channelGroup);\n        }\n        this.openChannels[this.channelGroup].addEventListener(\"message\", this.msgListener);\n        return <BaseBroker>this;\n    }\n\n    unregister(): BaseBroker {\n        this.openChannels[this.channelGroup].close();\n        return <BaseBroker>this;\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a broadcast channel broker\n */\nexport class BroadcastChannelBrokerBuilder {\n    private broadCastChannelGenerator: Function = broadCastChannelBrokerGenerator;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withGeneratorFunc(generatorFunc: Function): BroadcastChannelBrokerBuilder {\n        this.broadCastChannelGenerator = generatorFunc;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BroadcastChannelBrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n    withChannelGroup(channelGroup: string): BroadcastChannelBrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BroadcastChannelBrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): BroadcastChannelBroker {\n        let broker = new BroadcastChannelBroker(this.broadCastChannelGenerator, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}\n\n\n/**\n * implementation of a messaging based transport\n */\n\n/**\n * central message broker which uses various dom constructs\n * to broadcast messages into subelements\n *\n * we use the dom event system as transport and iframe and shadow dom mechanisms in a transparent way to\n * pull this off\n *\n * usage\n *\n * broker = new Broker(optional rootElement)\n *\n * defines a message broker within a scope of rootElement (without it is window aka the current isolation level)\n *\n * broker.registerListener(channel, listener) registers a new listener to the current broker and channel\n * broker.unregisterListener(channel, listener) unregisters the given listener\n *\n * broker.broadcast(message, optional direction, optional callBrokerListeners)\n * sends a message (channel included in the message object) in a direction (up, down, both)\n * and also optionally calls the listeners on the same broker (default off)\n *\n * the flow is like\n * up messages are propagated upwards only until it reaches the outer top of the dom\n * downwards, the messages are propagated downwards only\n * both the message is propagated into both directions\n *\n * Usually messages sent from the same broker are not processed within... however by setting\n * callBrokerListeners to true the listeners on the same broker also are called\n * brokers on the same level will get the message and process it automatically no matter what.\n * That way you can exclude the source from message processing (and it is done that way automatically)\n *\n * Isolation levels. Usually every isolation level needs its own broker object registering\n * on the outer bounds\n *\n * aka documents will register on window\n * iframes on the iframe windowObject\n * isolated shadow doms... document\n *\n *\n *\n */\nexport class Broker extends BaseBroker {\n\n    /**\n     * constructor has an optional root element\n     * and an internal name\n     *\n     * @param scopeElement\n     * @param brokerGroup\n     * @param crypto\n     */\n    constructor(scopeElement: HTMLElement | Window | ShadowRoot = window, public brokerGroup = \"brokr\", crypto: Crypto = noEncryption) {\n\n        super();\n\n        /**\n         * message relay.. identifies message events and relays them to the listeners\n         * @param event\n         */\n        let evtHandler = (event: MessageEvent | CustomEvent<Message>) => {\n            let details = (<any>event)?.detail ?? (<MessageEvent>event)?.data?.detail;\n            //TODO possible crypto hook, needs unit testing\n            let channel = ((<any>event)?.data?.channel) ?? ((<any>event)?.channel);\n\n            //javascript loses the type info in certain module types\n            if (details?.identifier && details?.message) {\n                let msg: Message = details;\n                if (msg.identifier in this.processedMessages) {\n                    return;\n                }\n                //coming in from up... we need to send it down\n                //a relayed message always has to trigger the listeners as well\n                if ((<any>event)?.detail) {\n                    this.broadcast(channel, msg);\n                } else {\n                    this.broadcast(channel, msg);\n                }\n\n            }\n        };\n        this.msgHandler = (evt: MessageEvent) => evtHandler(evt);\n        this.crypto = crypto;\n        this.register(scopeElement);\n    }\n\n    /**\n     * register the current broker into a scope defined by wnd\n     * @param scopeElement\n     */\n    register(scopeElement: HTMLElement | Window | ShadowRoot): BaseBroker {\n        this.rootElem = (<any>scopeElement).host ? (<any>scopeElement).host : scopeElement;\n        if ((<any>scopeElement).host) {\n            let host = (<ShadowRoot>scopeElement).host;\n            host.setAttribute(\"data-broker\", \"1\");\n        } else {\n            if (scopeElement?.[\"setAttribute\"])\n                (<any>scopeElement).setAttribute(\"data-broker\", \"1\");\n        }\n\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler, {capture: true});\n        /*dom message usable by iframes*/\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE + this.MSG_EVENT, this.msgHandler, {capture: true});\n        return <any>this;\n    }\n\n    /**\n     * manual unregister function, to unregister as broker from the current\n     * scope\n     */\n    unregister(): BaseBroker {\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler)\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + this.MSG_EVENT, this.msgHandler)\n        return <any>this;\n    }\n\n\n    /**\n     * broadcast a message\n     * the message contains the channel and the data and some internal bookkeeping data\n     *\n     * @param channel the channel to broadcast to\n     * @param message the message dot send\n     * (for instance 2 iframes within the same parent broker)\n     */\n    broadcast(channel: string, message: Message | string): BaseBroker {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        //message.message = this.crypto.encode(message);\n        //message.encoded = true;\n\n        if (this?.subjects[channel]) {\n            let messageWrapper = new MessageWrapper(channel, message);\n            if (!messageWrapper.detail.encoded) {\n                messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n                messageWrapper.detail.encoded = true;\n            }\n            this.subjects[channel].next(messageWrapper);\n        }\n\n        try {\n            this.dispatchUp(channel, message, false, true);\n            //listeners already called\n            this.dispatchDown(channel, message, true, false)\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n\n    private dispatchUp(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.markMessageAsProcessed(message);\n        if (_global$().parent != null) {\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            _global$().parent.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        }\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n    private dispatchSameLevel(channel: string, message: Message) {\n        let event = this.transformToEvent(channel, message, true);\n        //we also dispatch sideways\n        _global$().dispatchEvent(event);\n    }\n\n    //a dispatch of our own should never trigger the listeners hence the default true\n    private dispatchDown(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        let evt = this.transformToEvent(channel, message);\n\n        /*we now notify all iframes lying underneath */\n        Array.prototype.slice.call(document.querySelectorAll(\"iframe\")).forEach((element: HTMLIFrameElement) => {\n            let messageWrapper = new MessageWrapper(channel, message);\n            element.contentWindow.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        });\n\n        Array.prototype.slice.call(document.querySelectorAll(\"[data-broker='1']\")).forEach((element: HTMLElement) => element.dispatchEvent(evt))\n\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n\n    private msgCallListeners(channel: string, message: Message) {\n        let listeners = this.messageListeners[channel];\n        if (listeners?.length) {\n            let callElement = (element: (msg: Message) => void) => {\n                element(message);\n            }\n\n            listeners.forEach(callElement);\n        }\n    }\n\n    private transformToEvent(channel: string, message: Message, bubbles = false): CustomEvent {\n        let messageWrapper = new MessageWrapper(channel, message);\n        messageWrapper.bubbles = bubbles;\n        return Broker.createCustomEvent(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, messageWrapper);\n    }\n\n    private static createCustomEvent(name: string, wrapper: MessageWrapper): any {\n        if ('function' != typeof _global$().CustomEvent) {\n            let e: any = document.createEvent('HTMLEvents');\n            e.detail = wrapper.detail;\n            e.channel = wrapper.channel;\n            e.initEvent(name, wrapper.bubbles, wrapper.cancelable);\n            return e;\n\n        } else {\n            let customEvent = new (_global$()).CustomEvent(name, wrapper);\n            (<any>customEvent).channel = wrapper.channel;\n            return customEvent;\n        }\n\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a dom broker\n */\nexport class BrokerBuilder {\n    private scopeElement: HTMLElement | Window | ShadowRoot = window;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withScopeElement(scopeElement: HTMLElement | Window | ShadowRoot): BrokerBuilder {\n        this.scopeElement = scopeElement;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n\n    withChannelGroup(channelGroup: string): BrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): Broker {\n        let broker = new Broker(this.scopeElement, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assings an new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n\n        this.buildPath(accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambigous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(accessPath: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/*\n * Promise wrappers for timeout and interval\n */\nexport function timeout(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setTimeout(() => apply(), timeout);\n    }, () => {\n        if (handler) {\n            clearTimeout(handler);\n            handler = null;\n        }\n    });\n}\n\nexport function interval(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setInterval(() => {\n            apply();\n        }, timeout);\n    }, () => {\n        if (handler) {\n            clearInterval(handler);\n            handler = null;\n        }\n    });\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //let func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n            if (fn.catch) {\n                let funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            let fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\nimport type = Mocha.utils.type;\n\n/**\n * special status of the datasource location pointer\n * if an access, outside of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fullfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * returns the next element in the stream\n     * difference to next is, that the internal data position\n     * is not changed, so next still will deliver the next item from the current\n     * data position. Look ahead is mostly needed internally\n     * by possible endless data constructs which have no fixed data boundary, or index\n     * positions. (aka infinite sets, or flatmapped constructs)\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T |ITERATION_STATUS {\n        if((this.dataPos+cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while(!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos ++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T |ITERATION_STATUS;\n\n        for(let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if(inCache || this.filterFunc(lookupVal)) {\n                cnt --;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n       return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources= [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        //easy access trial\n        if(this?.activeDataSource && this?.activeDataSource?.lookAhead(cnt) != ITERATION_STATUS.EO_STRM) {\n            //this should coverr 95% of all accesses\n            return this?.activeDataSource.lookAhead(cnt);\n        }\n\n        /**\n         * we only can determine how many elems datasource has by going up\n         * (for now this suffices, however not ideal, we might have to introduce a numElements or so)\n         * @param datasource\n         */\n        function howManyElems(datasource: IStreamDataSource<any>): number {\n            let cnt = 1;\n            while(datasource.lookAhead(cnt) !== ITERATION_STATUS.EO_STRM) {\n                cnt++;\n            }\n            return cnt - 1;\n        }\n        function readjustSkip(dataSource) {\n            let skippedElems = (dataSource) ? howManyElems(dataSource) : 0;\n            cnt = cnt - skippedElems;\n        }\n\n        if(this.activeDataSource) {\n            readjustSkip(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams subsequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them so we introduce a small o2 here\n        for(let dsLoop = 1; true ; dsLoop++) {\n            let currDatasource = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            if(currDatasource === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mapped = this.mapFunc(currDatasource as T);\n            //it either comes in as datasource or as array\n            let currentDataSource = this.toDatasource(mapped);\n            let ret = currentDataSource.lookAhead(cnt);\n            if(ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            readjustSkip(currDatasource);\n\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);;\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if(this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS{\n        if(!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, {[key: string]: S} > {\n    finalValue: {[key:string]: any} = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string> element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//poliyfill from @webcomponents/webcomponentsjs\nimport {DomQuery} from \"./DomQuery\";\nimport {_global$} from \"./Global\";\n\n\nif (\"undefined\" != typeof _global$) {\n    (function () {\n        if (void 0 === _global$().Reflect || void 0 === _global$().customElements || (<any>_global$().customElements).polyfillWrapFlushCallback) return;\n        const a = HTMLElement;\n        _global$().HTMLElement = {\n            HTMLElement: function HTMLElement() {\n                return Reflect.construct(a, [], this.constructor)\n            }\n        }.HTMLElement, HTMLElement.prototype = a.prototype, HTMLElement.prototype.constructor = HTMLElement, Object.setPrototypeOf(HTMLElement, a);\n    })();\n}\n\n/**\n * beginning custom tag support\n *\n * This api is still experimental\n * and might be interwoven with DomQuery\n * so it is bound to change\n *\n * it follows a builder pattern to allow easier creations\n * with less code of custom tags\n */\nexport class TagBuilder {\n    tagName: string;\n    connectedCallback?: Function;\n    clazz?: CustomElementConstructor;\n    extendsType: CustomElementConstructor = HTMLElement;\n    theOptions: ElementDefinitionOptions | null;\n    markup: string;\n    disconnectedCallback?: Function;\n    adoptedCallback ?: Function;\n    attributeChangedCallback ?: Function;\n    observedAttrs: string[] = [];\n\n    // noinspection JSUnusedGlobalSymbols\n    static withTagName(tagName): TagBuilder {\n        return new TagBuilder(tagName);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withObservedAttributes(...oAttrs) {\n        this.observedAttrs = oAttrs;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withConnectedCallback(callback: Function) {\n        this.connectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withDisconnectedCallback(callback: Function) {\n        this.disconnectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAdoptedCallback(callback: Function) {\n        this.adoptedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAttributeChangedCallback(callback: Function) {\n        this.attributeChangedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withExtendsType(extendsType: CustomElementConstructor) {\n        this.extendsType = extendsType;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withOptions(theOptions) {\n        this.theOptions = theOptions;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withClass(clazz) {\n        if (this.markup) {\n            throw Error(\"Markup already defined, markup must be set in the class\");\n        }\n        this.clazz = clazz;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withMarkup(markup) {\n        if (this.clazz) {\n            throw Error(\"Class already defined, markup must be set in the class\");\n        }\n        this.markup = markup;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    register() {\n        if (!this.clazz && !this.markup) {\n            throw Error(\"Class or markup must be defined\")\n        }\n        if (this.clazz) {\n\n            let applyCallback = (name: string) => {\n                let outerCallback = this[name];\n                let protoCallback = (<any>this.clazz.prototype)[name];\n                let finalCallback = outerCallback || protoCallback;\n                if (finalCallback) {\n                    (<any>this.clazz.prototype)[name] = function () {\n                        if(outerCallback) {\n                            finalCallback.apply(DomQuery.byId(this));\n                        } else {\n                            protoCallback.apply(<any>this);\n                        }\n                    }\n                }\n            }\n\n            applyCallback(\"connectedCallback\");\n            applyCallback(\"disconnectedCallback\");\n            applyCallback(\"adoptedCallback\");\n            applyCallback(\"attributeChangedCallback\");\n\n            //TODO how do we handle the oAttrs?\n            if (this.observedAttrs.length) {\n                Object.defineProperty(this.clazz.prototype, \"observedAttributes\", {\n                    get(): any {\n                        return this.observedAttrs;\n                    }\n                });\n            }\n\n            _global$().customElements.define(this.tagName, this.clazz, this.theOptions || null);\n        } else {\n            let _t_ = this;\n            let applyCallback = (name: string, scope: any) => {\n                if (_t_[name]) {\n                    _t_[name].apply(DomQuery.byId(<any>scope));\n                }\n            };\n\n            _global$().customElements.define(this.tagName, class extends this.extendsType {\n                constructor() {\n                    super();\n                    this.innerHTML = _t_.markup;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                static get observedAttributes() {\n                    return _t_.observedAttrs;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                connectedCallback() {\n                    applyCallback(\"connectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                disconnectedCallback() {\n                    applyCallback(\"disconnectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                adoptedCallback() {\n                    applyCallback(\"adoptedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                attributeChangedCallback() {\n                    applyCallback(\"attributeChangedCallback\", this);\n                }\n\n            }, this.theOptions || null);\n        }\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\nimport {_global$} from \"./Global\";\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new (_global$()).DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (_global$())?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","module.exports = __WEBPACK_EXTERNAL_MODULE__382__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport {DomQuery, ElementAttribute, DomQueryCollector, DQ, DQ$} from \"./DomQuery\";\nexport {Lang} from \"./Lang\";\nexport {Config, Monad, IValueHolder, IFunctor, IMonad, IIdentity, Optional, ValueEmbedder} from \"./Monad\";\nexport {CancellablePromise, IPromise, PromiseStatus} from \"./Promise\";\nexport {XMLQuery, XQ} from \"./XmlQuery\";\nexport {Stream, LazyStream, IteratableConsumer, IStream} from \"./Stream\";\nexport {\n    ArrayStreamDataSource,\n    MappedStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    SequenceDataSource,\n    QueryFormStringCollector,\n    IStreamDataSource,\n    ICollector,\n    ArrayCollector,\n    AssocArrayCollector,\n    FormDataCollector,\n    QueryFormDataCollector,\n} from \"./SourcesCollectors\";\n\n\nexport {TagBuilder} from \"./TagBuilder\";\n\nexport {Message, Broker, BroadcastChannelBroker, Crypto, NoCrypto, Hash} from \"./Messaging\";\nexport {JSONCrypto, ExpiringCrypto} from \"./CryptoExtensions\";\n\n\n"],"names":["decode","data","encryptedData","JSON","parse","encode","stringify","JSONCrypto","timeout","parentCrypto","hashSum","gcCycleCnt","storedMessages","lastCall","currTime","Date","getTime","this","gcLimitReached","LazyStream","ofAssoc","filter","collect","AssocArrayCollector","rotatingEncoded","toString","Error","ExpiringCrypto","MAX_GC_CYCLES","encoded","Submittables","trim","Lang","objToArray","isString","equalsIgnoreCase","waitUntilDom","root","condition","options","attributes","childList","subtree","interval","Promise","success","error","observer","MUT_ERROR","findElement","childNodes","item","first","value","querySelectorAll","foundElement","DomQuery","MutationObserver","setTimeout","disconnect","mutationList","found","map","mut","target","isPresent","clearTimeout","eachElem","observe","setInterval","clearInterval","element","name","defaultVal","val","get","orElse","values","length","getAttribute","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","style","Style","DEFAULT_WHITELIST","rootNode","pos","_limits","Optional","isAbsent","push","getAsElem","allElems","_global$","getIf","isTag","tagName","nodeName","toLowerCase","absent","inputValue","Stream","of","allMatch","el","checked","newChecked","querySelectorAllDeep","queryStr","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","childNodeArr","concat","asArray","byId","ArrayCollector","elem","offsetWidth","reduce","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","selector","document","indexOf","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","globalEvalSticky","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","nodes","res","foundNodes","selectors","split","cnt2","levelSelector","id","includeRoot","subItems","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","inval","dispatchEvent","evt","retArr","inVal","_mozMatchesSelector","toMatch","prot","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","i","filterSelector","matched","lazyStream","match","selectorStage","nodeSelector","func","len","firstElem","lastElem","each","last","lastNode","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","appendTo","orElseLazy","loadScriptEval","src","defer","charSet","srcNode","createSourceNode","loadScriptEvalSticky","insertAfter","existingItem","existingElement","nextSibling","toInsertParams","insertElem","insertBefore","elseValue","parents","retSet","Set","lowerTagName","resolveItem","has","host","copyAttrs","sourceItem","sourceNode","attrs","resolveAttributeHolder","attrName","ret","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","sticky","whilteListed","evalCollectedScripts","scriptsToProcess","evalText","finalScripts","equi","execScrpt","itemType","text","innerText","go","substring","stream","flatMap","sort","node1","node2","compareDocumentPosition","e","console","message","description","applyStyle","newSS","styleSheet","sheet","cssText","createTextNode","Array","prototype","forEach","child","execCss","click","fireEvent","addEventListener","listener","removeEventListener","eventName","nodeType","eventClass","createEvent","initEvent","synthetic","createEventObject","textContent","joinstr","text1","text2","encodeFormElement","toMerge","Config","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","append","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","reduced","subNodes","from","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","ITERATION_STATUS","EO_STRM","current","BEF_STRM","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","DomQueryCollector","idx","notFound","prependTo","prepend","global","DQ","DQ$","globalThis","window","g","ws","replace","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","Object","assign","theArgs","nextSource","keys","nextKey","hasOwnProperty","NoCrypto","noEncryption","targetOrigin","creationDate","getMilliseconds","identifier","random","Message","channel","detail","bubbles","cancelable","composed","messageListeners","subjects","processedMessages","cleanupCnt","TIMEOUT_IN_MS","MSG_EVENT","crypto","registerListener","reserveListenerNS","msg","asSubject","reserveSubjectNS","subject","oldNext","broadcast","asObservable","Subject","unregisterListener","answer","request","BaseBroker","isAnswer","getAnswerId","messageId","resolve","reject","message2","gcProcessedMessages","newProcessedMessages","key","messageStillActive","markMessageAsProcessed","EVENT_TYPE","broadCastChannelBrokerGenerator","BroadcastChannel","DEFAULT_CHANNEL_GROUP","brokerFactory","channelGroup","openChannels","msgListener","messageData","coreMessage","register","includeOrigin","msgString","messageWrapper","MessageWrapper","postMessage","unregister","close","BroadcastChannelBroker","broadCastChannelGenerator","listeners","withGeneratorFunc","generatorFunc","withListener","withChannelGroup","withCrypto","build","broker","listenerItem","BroadcastChannelBrokerBuilder","scopeElement","brokerGroup","msgHandler","event","details","evtHandler","rootElem","Broker","capture","dispatchUp","dispatchDown","ignoreListeners","callBrokerListeners","msgCallListeners","parent","dispatchSameLevel","transformToEvent","contentWindow","createCustomEvent","wrapper","CustomEvent","customEvent","withScopeElement","BrokerBuilder","_value","fn","Monad","currentPos","currKey","keyVal","arrPos","arrayIndex","getIfPresent","toJson","start","parseInt","resolver","newVal","alternative","ConfigEntry","shallowCopy$","deepCopy$","shallowMerge","other","overwrite","withAppend","isArray","noKeys","accessPath","lastKey","pathExists","buildPath","finalKeyArrPos","retVal","apply","appendIf","assignIf","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","PromiseStatus","handler","CancellablePromise","executor","status","PENDING","allFuncs","all","myapply","promiseCnt","myPromise","promises","__last__","finally","race","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","cancellator","cancel","total","SequenceDataSource","dataPos","max","ArrayStreamDataSource","filterFunc","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","lookupVal","loop","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","readjustSkip","dataSource","skippedElems","datasource","howManyElems","dsLoop","currDatasource","toDatasource","ds","FlatMapStreamDataSource","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ofDataSource","toAppend","onElem","strmR","startVal","val1","anyMatch","noneMatch","comparator","newArr","collector","ofStreamDataSource","isOverLimits","nextFilter","t","stop","value1","value2","el1","el2","Reflect","customElements","polyfillWrapFlushCallback","a","HTMLElement","construct","constructor","setPrototypeOf","extendsType","observedAttrs","withTagName","TagBuilder","withObservedAttributes","oAttrs","withConnectedCallback","callback","connectedCallback","withDisconnectedCallback","disconnectedCallback","withAdoptedCallback","adoptedCallback","withAttributeChangedCallback","attributeChangedCallback","withExtendsType","withOptions","theOptions","withClass","withMarkup","applyCallback","outerCallback","protoCallback","finalCallback","defineProperty","define","scope","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","serialized","XMLSerializer","serializeToString","parserErrorText","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ","module","exports","__WEBPACK_EXTERNAL_MODULE__382__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}