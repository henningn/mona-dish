{"version":3,"file":"index.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/CryptoExtensions.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Messaging.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/TagBuilder.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///external \"rxjs\"","webpack:///webpack/bootstrap","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/index.ts"],"sourcesContent":["import {Crypto, Hash} from \"./Messaging\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {LazyStream} from \"./Stream\";\n\n/*\n * Some crypto implementations which might come in handy\n */\n\n\n/**\n * basic json stringify encryption impl\n * this does not really full encryption except for a standard json stringyfywith an encapsulation json\n *\n * the return value resembles:\n * <pre>\n *     {\n *         encryptedData: <data as string>\n *     }\n * </pre>\n */\nexport class JSONCrypto implements Crypto {\n    decode(data: any): any {\n        if (data?.encryptedData) {\n            return JSON.parse(data.encryptedData);\n        }\n        return data;\n    }\n\n    encode(data: any) {\n        return {\n            encryptedData: JSON.stringify(data)\n        }\n    }\n}\n\n\n/**\n * a class with  timeout functionality which blocks decodes after a certain period of time\n * if the message is not decoded by then\n * We use hash as identifier generation after encryption to make sure\n * a trace was possible\n *\n * The idea behind this is to have a generic wrapper which allows messages with dynamic encryption\n * where keys/salts only exist for a certain period of time before expiring!\n * That way someone who implements such a scheme does not have to take care about the bookeeping mechanisms!\n * Or you can use crypto mechanisms which do not have expiring keys and still expire them automatically\n *\n * I will leave it up to the system integrator to provide a rotating crypto class, because this is highly\n * implementation dependent. But it helps to have a wrapper!\n */\nexport class ExpiringCrypto implements Crypto {\n\n    private static MAX_GC_CYCLES = 10;\n    private gcCycleCnt = 0;\n    private storedMessages: { [key: string]: number } = {};\n    private lastCall = 0;\n\n    /**\n     * @param timeout timeout in miliseconds until a message is expired\n     * @param parentCrypto the embedded decorated crypto algorithm\n     * @param hashSum hashshum implementation to generate a hash\n     */\n    constructor(private timeout: number, private parentCrypto: Crypto, private hashSum: Hash) {\n\n    }\n\n    /**\n     * decode implementation with a timeout hook install\n     * @param data\n     */\n    decode(data: any): any {\n        //if ((this.gcCycleCnt++ % ExpiringCrypto.MAX_GC_CYCLES) === 0) {\n\n        const currTime = new Date().getTime();\n        if(this.gcLimitReached(currTime)) {\n            this.storedMessages = LazyStream\n                .ofAssoc(this.storedMessages)\n                .filter(data => data[1] >= currTime)\n                .collect(new AssocArrayCollector());\n        }\n        this.lastCall = currTime;\n\n\n        let rotatingEncoded = this.hashSum.encode(data);\n        if (!this.storedMessages?.[rotatingEncoded.toString()]) {\n            throw Error(\"An item was tried to be decryted which either was expired or invalid\");\n        }\n        return this.parentCrypto.decode(data);\n    }\n\n    /**\n     * trigger function to determine whether the gc needs to cycle again, this is either time or call based\n     * the gc itself collects only on expiration dates\n     * The idea is to run this operation only occasionally because it is costly\n     * We also could have used timeouts etc.. but those would need shutdown/destroy cleanups\n     *\n     * @param currTime\n     * @private\n     */\n    private gcLimitReached(currTime: number) {\n        return (this.lastCall + this.timeout) < currTime || ((++this.gcCycleCnt) % ExpiringCrypto.MAX_GC_CYCLES == 0);\n    }\n\n    /**\n     * encode with a timeout hook installed\n     * calls the encode of the delegated object\n     *\n     * @param data\n     */\n    encode(data: any): any {\n        let encoded = this.parentCrypto.encode(data);\n        //ok use the hashsum really only to store expirations, theoretically there could be a second message which does not invalidate the first one\n        //but this is very unlikely unless a message is sent over and over again, in this case we have a timeout extension anyway!\n        let rotatingEncoded = this.hashSum.encode(encoded);\n        this.storedMessages[rotatingEncoded.toString()] = (new Date().getTime()) + this.timeout;\n        return encoded;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {ArrayCollector, ICollector, IStreamDataSource} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\nimport objToArray = Lang.objToArray;\nimport isString = Lang.isString;\nimport equalsIgnoreCase = Lang.equalsIgnoreCase;\n//import {observable, Observable, Subscriber} from \"rxjs\";\n\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum Submittables {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute,T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any> new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @param src\n * @constructor\n */\nconst DEFAULT_JSF_WHITELIST = (src: string) => {\n    return (src.indexOf(\"ln=scripts\") == -1 &&\n        src.indexOf(\"ln=javax.faces\") == -1) ||\n        (src.indexOf(\"/jsf.js\") == -1 &&\n            src.indexOf(\"/jsf-uncompressed.js\") == -1);\n};\n\ninterface IDomQuery {\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The the value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n    /**\n     * the underlying form elements as domquery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded (highest level)\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchevent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery): void;\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the domquery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n    /**\n     * all parents with TagName\n     * @param tagName\n     */\n    parents(tagName: string): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another domquery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinstr?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinstr?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the subnodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n    //observable: Observable<DomQuery>;\n\n    //observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        //a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow doms\n     * separately and runs the query on earch shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if(queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if(shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if(shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        //filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => item != null)\n            .map(item => DomQuery.byId(item)).collect(new ArrayCollector()));\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.indexOf('<!doctype') != -1 ||\n            lowerMarkup.indexOf('<html') != -1 ||\n            lowerMarkup.indexOf('<head') != -1 || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\n            lowerMarkup.indexOf('<body') != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            //table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given elmement\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ?  (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        //We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n\n    /*deep with a selector and a peudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let nodes = [];\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if(subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any> LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        let isCandidate = (item: DomQuery): boolean => {\n            if(item.length == 0) {\n                return false;\n            }\n            if(item.length == 1) {\n                if ((<string>item.tagName.get(\"booga\").value).toLowerCase() == \"input\" &&\n                    (<string>item.attr(\"type\")?.value || \"\").toLowerCase() == \"file\") {\n                    return true;\n                }\n                if (deep) {\n                    return this.querySelectorAllDeep(\"input[type='file']\").firstElem().isPresent();\n                } else {\n                    return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\n                }\n            }\n            return item.isMultipartCandidate(deep);\n        };\n        let ret = this.stream.filter(item => isCandidate(item)).first().isPresent();\n\n        return ret;\n    }\n\n\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHtml) : Optional.absent;\n        }\n        this.innerHtml = inval;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    set innerHtml(inVal: string) {\n        this.eachElem(elem => elem.innerHTML = inVal);\n    }\n\n    get innerHtml(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || (<any>window).ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    matchesSelector(selector: string): boolean {\n        this.eachElem(item => {\n            if (!this._mozMatchesSelector(item, selector)) {\n                return false;\n            }\n        });\n        return true;\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                //we could use a filter, but for the best performance we dont\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery) {\n        this.eachElem((item) => {\n            let value1: Element = <Element>elem.getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: (theItem: any) => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string = \"utf-8\") {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.send(null);\n\n        xhr.onload = (responseData: any) => {\n            //defer also means we have to process after the ajax response\n            //has been processed\n            //we can achieve that with a small timeout, the timeout\n            //triggers after the processing is done!\n            if (!defer) {\n                this.globalEval(xhr.responseText.replace(\"\\n\", \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n            } else {\n                //TODO not ideal we maybe ought to move to something else here\n                //but since it is not in use yet, it is ok\n                setTimeout(() => {\n                    this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                }, defer);\n            }\n        };\n\n        xhr.onerror = (data: any) => {\n            throw Error(data);\n        };\n        //since we are synchronous we do it after not with onReadyStateChange\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        const retSet: Set<Element> = new Set();\n        const retArr: Array<Element> = [];\n        const lowerTagName = tagName.toLowerCase();\n\n        let resolveItem = (item: Element) => {\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName && !retSet.has(item)) {\n                retSet.add(item);\n                retArr.push(item);\n            }\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode || (<any> item).host) {\n                item = <Element>item?.parentNode ?? (<any>item)?.host;\n\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        //no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean = DEFAULT_JSF_WHITELIST): DomQuery {\n        let finalScripts = [],\n            equi = equalsIgnoreCase,\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && equi(tagName, \"script\") &&\n                    (itemType === \"\" || equi(itemType, \"text/javascript\") ||\n                        equi(itemType, \"javascript\") ||\n                        equi(itemType, \"text/ecmascript\") ||\n                        equi(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            if (finalScripts.length) {\n                                //script source means we have to eval the existing\n                                //scripts before running the include\n                                this.globalEval(finalScripts.join(\"\\n\"));\n\n                                finalScripts = [];\n                            }\n                            this.loadScriptEval(src, 0, \"UTF-8\");\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        //TODO this probably needs to be changed due to our new parsing structures\n                        //probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push(evalText);\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            //script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) //preceding 2, following == 4)\n                .each(item => execScrpt(item));\n\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        } catch (e) {\n            if (window.console && window.console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ?? (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") ?? \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") ?? \"text/css\");\n\n                if (styleSheet?.cssText ?? false) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n            },\n\n            execCss = (item: Element) => {\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: Array<Node> = Array.prototype.slice.call(item.childNodes);\n                    if (childNodes) {\n                        childNodes.forEach(child => innerText.push((<Element>child).innerHTML || (<CharacterData>child).data));\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinstr), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {//no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != Submittables.SELECT &&\n                        elemType != Submittables.BUTTON &&\n                        elemType != Submittables.RESET &&\n                        elemType != Submittables.SUBMIT &&\n                        elemType != Submittables.IMAGE\n                    ) && (\n                        (\n                            elemType != Submittables.CHECKBOX && elemType != Submittables.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let files: any = (<any>element.value).value?.files ?? [];\n                    if (files?.length) {\n                        //xhr level2\n                        target.append(name).value = files[0];\n                    } else {\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let cDataBlock = [];\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    //TODO this part probably will be removed\n    //because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //from\n    // http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                //the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                //the caretposition is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            //now this is ugly, but not supported input types throw errors for selectionStart\n            //just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        //the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n    \n    /*[observable](): Observable<DomQuery> {\n        return this.observable;\n    }\n\n    get observable(): Observable<DomQuery> {\n        let observerFunc = (observer:Subscriber<DomQuery>) => {\n            try {\n                this.each(dqNode => {\n                    observer.next(dqNode);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }\n\n    get observableElem(): Observable<Element> {\n        let observerFunc = (observer:Subscriber<Element>) => {\n            try {\n                this.eachElem(node => {\n                    observer.next(node);\n                });\n            } catch (e) {\n                observer.error(e);\n            }\n        };\n        return new Observable(observerFunc);\n    }*/\n\n}\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/**\n * a standardized message to be sent over the message bus\n */\nimport {Observable, Subject} from \"rxjs\";\n\n/**\n * generic crypto interface\n * to encrypt messages before they are sent\n * to the message bus oder the underlying bus system\n *\n * The idea is to make it as easy as possible, you can use for instance crypto js to\n * handle everything\n */\nexport interface Crypto {\n    /**\n     * note anything can be passed\n     *\n     * @param data the data to be encrypted\n     * @returns the encrypted data in any format, important is decode must be able to handle it\n     */\n    encode(data: any): any;\n\n    /**\n     * @param data the encrypted data in the format you expect it to be\n     * @returns the unencrypted data\n     */\n    decode(data: any): any;\n}\n\n\n/**\n * generic hash interface which provides\n * exactly one method a hash encode which returns a string hash value of encoded data\n */\nexport interface Hash {\n    encode(encodedData: string): string;\n}\n\n/**\n * Default implementation = no encryption\n */\nexport class NoCrypto implements Crypto {\n    decode(data: any): string {\n        return data;\n    }\n\n    encode(data: any): any {\n        return data;\n    }\n}\n\n//TODO dynamic encryptor which flushes the messages before changing the keys\n//that way we can rotate and change internal crypto keys on the fly\n\nlet noEncryption = new NoCrypto();\n\nexport class Message {\n\n    creationDate?: number;\n    identifier?: string;\n    targetOrigin?: string;\n    encoded: boolean = false;\n\n    constructor(public message: any = {}, targetOrigin = \"*\") {\n        this.targetOrigin = targetOrigin;\n        this.creationDate = new Date().getMilliseconds();\n        this.identifier = new Date().getMilliseconds() + \"_\" + Math.random() + \"_\" + Math.random();\n    }\n}\n\n/**\n * custom dom event wrapping our messages\n */\nclass MessageWrapper implements CustomEventInit<Message> {\n\n    detail?: Message;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n    channel: string;\n\n    constructor(channel: string, message: Message) {\n        this.detail = message;\n        this.bubbles = true;\n        this.cancelable = true;\n        this.composed = true;\n        this.channel = channel;\n    }\n}\n\n\nabstract class BaseBroker {\n\n    static readonly EVENT_TYPE = \"brokerEvent\";\n    /**\n     * we can split the listeners with the system\n     * namespace... and type (aka identifier criteria)\n     */\n    protected messageListeners: any = {};\n    protected subjects: any = {};\n    protected processedMessages: any = {};\n\n    protected cleanupCnt = 0;\n    protected rootElem;\n    protected msgHandler;\n\n    protected readonly TIMEOUT_IN_MS = 1000;\n    protected readonly MSG_EVENT = \"message\";\n\n    //must be public because we also must have the option\n    //to set it outside of the constructor\n    crypto = noEncryption;\n\n\n    abstract register(scopeElement?: any);\n\n    abstract unregister();\n\n    abstract broadcast(channel: string, message: Message | string);\n\n\n    /**\n     * registers a listener on a channel\n     * @param channel the channel to register the listeners for\n     * @param listener the listener to register\n     */\n    registerListener(channel: string, listener: (msg: Message) => void) {\n        this.reserveListenerNS(channel);\n\n        //we skip the processed messages, because they originated here\n        //and already are processed\n        this.messageListeners[channel].push((msg: Message) => {\n            if (msg.identifier in this.processedMessages) {\n                return;\n            }\n            if(msg?.encoded || msg?.[\"detail\"]?.encoded) {\n                if(msg?.[\"detail\"]) {\n                    msg[\"detail\"].message = this.crypto.decode(msg[\"detail\"].message);\n                    msg[\"detail\"].encoded = false;\n                } else {\n                    msg.message = this.crypto.decode(msg.message);\n                    msg.encoded = false;\n                }\n\n            }\n            listener(msg);\n        });\n    }\n\n    /**\n     * binding into rxjs\n     * produces a subject which can be used via next calls to send messages\n     * on the other hand we\n     * @param channel\n     */\n    asSubject(channel: string): Subject<Message> {\n        this.reserveSubjectNS(channel);\n        let subject = this.subjects[channel];\n        let oldNext = subject.next;\n\n        subject.next = (msg: Message | MessageWrapper) => {\n            //We use a recursive call to let the broadcaster handle\n            //The wrapper conversion and then again call us here\n            //that way both directions are handled.. next calls the broker\n            //and a broadcast calls next\n            if((<MessageWrapper>msg)?.detail) {\n                oldNext.call(subject, (<MessageWrapper>msg)?.detail);\n            } else {\n                this.broadcast(channel, <Message> msg);\n            }\n        }\n        return subject;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * returns an observable on the baseBroker\n     * @param channel\n     */\n    asObservable(channel: string): Observable<Message> {\n        return this.asSubject(channel).asObservable();\n    }\n\n    /**\n     * reserves the listener namespace and wildcard namespace for the given identifier\n     * @param identifier\n     * @private\n     */\n    private reserveListenerNS(identifier: string) {\n        if (!this.messageListeners[identifier]) {\n            this.messageListeners[identifier] = [];\n        }\n        if (!this.messageListeners[\"*\"]) {\n            this.messageListeners[\"*\"] = [];\n        }\n    }\n\n    private reserveSubjectNS(identifier: string) {\n        if (!this.subjects[identifier]) {\n            this.subjects[identifier] = new Subject();\n        }\n        if (!this.subjects[\"*\"]) {\n            this.subjects[\"*\"] = new Subject();\n        }\n    }\n\n    /**\n     * unregisters a listener from this channel\n     *\n     * @param channel the channel to unregister from\n     * @param listener the listener to unregister the channel from\n     */\n    unregisterListener(channel: string, listener: (msg: Message) => void) {\n        this.messageListeners[channel] = (this.messageListeners[channel] || []).filter((item: any) => item !== listener);\n    }\n\n    /**\n     * answers a bidirectional message received\n     * usage, the client can use this method, to answer an incoming message in a precise manner\n     * so that the caller sending the bidirectional message knows how to deal with it\n     * this mechanism can be used for global storages where we have one answering entity per channel delivering the\n     * requested data, the request can be done asynchronously via promises waiting for answers\n     *\n     * @param channel the channel the originating message\n     * @param request the requesting message\n     * @param answer the answer to the request\n     */\n    answer(channel: string, request: Message |string, answer: Message) {\n        if('string' == typeof request) {\n            request = new Message(request);\n        }\n\n        if (BaseBroker.isAnswer(request)) {\n            return;\n        }\n        answer.identifier = BaseBroker.getAnswerId(request);\n        this.broadcast(channel, answer);\n    }\n\n    private static getAnswerId(request: Message) {\n        return \"_r_\" + request.identifier;\n    }\n\n    private static isAnswer(request: Message) {\n        return request.identifier.indexOf(\"_r_\") == 0;\n    }\n\n    /**\n     * idea... a bidirectional broadcast\n     * sends a message and waits for the first answer coming in from one of the receivers\n     * sending the message back with a messageIdentifier_broadCastId answer\n     *\n     * @param channel\n     * @param message\n     */\n    request(channel: string, message: Message | string): Promise<Message> {\n        if('string' == typeof message) {\n            message = new Message(message);\n        }\n        let messageId = message.identifier;\n\n        let ret = new Promise<Message>((resolve, reject) => {\n            let timeout = null;\n            let listener = (message2: Message) => {\n                if (message2.identifier == messageId) {\n                    //broadcast from same source, we do not want\n                    //to deal with it now\n                    return;\n                }\n\n                if (message2.identifier == \"_r_\" + messageId) {\n                    clearTimeout(timeout);\n                    this.unregisterListener(channel, listener);\n                    resolve(message2);\n                }\n            }\n            timeout = setTimeout(() => {\n                this.unregisterListener(channel, listener);\n                reject(\"request message performed, timeout, no return value\");\n            }, 3000);\n            this.registerListener(channel, listener);\n\n        });\n        this.broadcast(channel, message);\n        return ret;\n    }\n\n\n    /**\n     * garbage collects the processed messages queue\n     * usually after one second\n     */\n    protected gcProcessedMessages() {\n        if ((++this.cleanupCnt) % 10 != 0) {\n            return;\n        }\n        let newProcessedMessages: any = {};\n        Object.keys(this.processedMessages).forEach(key => {\n            if (this.messageStillActive(key)) return;\n            newProcessedMessages[key] = this.processedMessages[key];\n        });\n        this.processedMessages = newProcessedMessages;\n    }\n\n    private messageStillActive(key: string): boolean {\n        return this.processedMessages[key] > ((new Date()).getMilliseconds() - this.TIMEOUT_IN_MS);\n    }\n\n    protected markMessageAsProcessed(message: Message) {\n        this.processedMessages[message.identifier] = message.creationDate;\n    }\n}\n\nlet broadCastChannelBrokerGenerator = (name) => {\n    if (window?.BroadcastChannel) {\n        return new window.BroadcastChannel(name);\n    }\n    throw Error(\"No Broadcast channel in the system, use a shim or provide a factory function\" +\n        \"in the constructor\");\n};\n\nconst DEFAULT_CHANNEL_GROUP = \"brokr\";\n\n/**\n * a broker which hooks into the Broadcast Channel broker\n * either via shim or substitute lib\n */\nexport class BroadcastChannelBroker extends BaseBroker {\n    private openChannels: [{ key: string }, BroadcastChannel] = <any>{};\n    private readonly msgListener: Function;\n\n\n    /**\n     * @param brokerFactory a factory generating a broker\n     * @param channelGroup a group to combine a set of channels\n     * @param crypto a crypto class\n     */\n    constructor(private brokerFactory: Function = broadCastChannelBrokerGenerator, private channelGroup = DEFAULT_CHANNEL_GROUP, public crypto: Crypto = noEncryption) {\n        super();\n        this.msgListener = (messageData: MessageWrapper) => {\n            if(messageData.detail.encoded) {\n                messageData.detail.message = <any> this.crypto.decode(messageData.detail.message);\n                messageData.detail.encoded = false;\n            }\n            let coreMessage = messageData.detail;\n            let channel: string = messageData.channel;\n\n            if (this.messageListeners?.[channel]) {\n                this.messageListeners?.[channel].forEach(listener => {\n                    listener(coreMessage);\n                })\n            }\n            this.markMessageAsProcessed(coreMessage);\n            return true;\n        }\n        this.crypto = crypto;\n        this.register();\n    }\n\n    broadcast(channel: string, message: Message | string, includeOrigin = true) {\n        try {\n            if('string' == typeof message) {\n                message = new Message(message);\n            }\n            //we now run a quick remapping to avoid\n            //serialisation errors\n            let msgString = JSON.stringify(<Message> message);\n            message = <Message> JSON.parse(msgString);\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n            messageWrapper.detail.encoded = true;\n\n            if(this?.subjects[channel]) {\n                this.subjects[channel].next(messageWrapper);\n            }\n\n            this.openChannels[this.channelGroup].postMessage(messageWrapper);\n            if (includeOrigin) {\n                this.msgListener(messageWrapper);\n            }\n        } finally {\n            this.gcProcessedMessages();\n        }\n    }\n\n    registerListener(channel: string, listener: (msg: Message) => void) {\n        super.registerListener(channel, listener);\n    }\n\n    register() {\n        if(!this.openChannels[this.channelGroup]) {\n            this.openChannels[this.channelGroup] = this.brokerFactory(this.channelGroup);\n        }\n        this.openChannels[this.channelGroup].addEventListener(\"message\", this.msgListener);\n    }\n\n    unregister() {\n        this.openChannels[this.channelGroup].close();\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a broadcast channel broker\n */\nexport class BroadcastChannelBrokerFactory {\n   private broadCastChannelGenerator: Function = broadCastChannelBrokerGenerator;\n   private channelGroup = DEFAULT_CHANNEL_GROUP;\n   private crypto = noEncryption;\n\n   withGeneratorFunc(generatorFunc: Function): BroadcastChannelBrokerFactory {\n       this.broadCastChannelGenerator = generatorFunc;\n       return this;\n    }\n\n    withChannelGroup(channelGroup: string): BroadcastChannelBrokerFactory {\n       this.channelGroup = channelGroup;\n       return this;\n    }\n\n    withCrypto(crypto: Crypto): BroadcastChannelBrokerFactory {\n       this.crypto = crypto;\n       return this;\n    }\n\n    build(): BroadcastChannelBroker {\n       return new BroadcastChannelBroker(this.broadCastChannelGenerator, this.channelGroup, this.crypto);\n    }\n\n}\n\n\n/**\n * implementation of a messaging based transport\n */\n\n/**\n * central message broker which uses various dom constructs\n * to broadcast messages into subelements\n *\n * we use the dom event system as transport and iframe and shadow dom mechanisms in a transparent way to\n * pull this off\n *\n * usage\n *\n * broker = new Broker(optional rootElement)\n *\n * defines a message broker within a scope of rootElement (without it is window aka the current isolation level)\n *\n * broker.registerListener(channel, listener) registers a new listener to the current broker and channel\n * broker.unregisterListener(channel, listener) unregisters the given listener\n *\n * broker.broadcast(message, optional direction, optional callBrokerListeners)\n * sends a message (channel included in the message object) in a direction (up, down, both)\n * and also optionally calls the listeners on the same broker (default off)\n *\n * the flow is like\n * up messages are propagated upwards only until it reaches the outer top of the dom\n * downwards, the messages are propagated downwards only\n * both the message is propagated into both directions\n *\n * Usually messages sent from the same broker are not processed within... however by setting\n * callBrokerListeners to true the listeners on the same broker also are called\n * brokers on the same level will get the message and process it automatically no matter what.\n * That way you can exclude the source from message processing (and it is done that way automatically)\n *\n * Isolation levels. Usually every isolation level needs its own broker object registering\n * on the outer bounds\n *\n * aka documents will register on window\n * iframes on the iframe windowObject\n * isolated shadow doms... document\n *\n *\n *\n */\nexport class Broker extends BaseBroker {\n\n    /**\n     * constructor has an optional root element\n     * and an internal name\n     *\n     * @param scopeElement\n     * @param name\n     * @param crypto\n     */\n    constructor(scopeElement: HTMLElement | Window | ShadowRoot = window, public name = \"brokr\", crypto: Crypto = noEncryption) {\n\n        super();\n\n        /**\n         * message relay.. identifies message events and relays them to the listeners\n         * @param event\n         */\n        let evtHandler = (event: MessageEvent | CustomEvent<Message>) => {\n            let details = (<any>event)?.detail ?? (<MessageEvent>event)?.data?.detail;\n            //TODO possible crypto hook, needs unit testing\n            let channel = ((<any>event)?.data?.channel) ?? ((<any>event)?.channel);\n\n            //javascript loses the type info in certain module types\n            if (details?.identifier && details?.message) {\n                let msg: Message = details;\n                if (msg.identifier in this.processedMessages) {\n                    return;\n                }\n                //coming in from up... we need to send it down\n                //a relayed message always has to trigger the listeners as well\n                if((<any>event)?.detail) {\n                    this.broadcast(channel, msg);\n                } else {\n                    this.broadcast(channel, msg);\n                }\n\n            }\n        };\n        this.msgHandler = (evt: MessageEvent) => evtHandler(evt);\n        this.crypto = crypto;\n        this.register(scopeElement);\n    }\n\n    /**\n     * register the current broker into a scope defined by wnd\n     * @param scopeElement\n     */\n    register(scopeElement: HTMLElement | Window | ShadowRoot) {\n        this.rootElem = (<any>scopeElement).host ? (<any>scopeElement).host : scopeElement;\n        if ((<any>scopeElement).host) {\n            let host = (<ShadowRoot>scopeElement).host;\n            host.setAttribute(\"data-broker\", \"1\");\n        } else {\n            if (scopeElement?.[\"setAttribute\"])\n                (<any>scopeElement).setAttribute(\"data-broker\", \"1\");\n        }\n\n        this.rootElem.addEventListener(Broker.EVENT_TYPE, this.msgHandler, {capture: true});\n        /*dom message usable by iframes*/\n        this.rootElem.addEventListener(this.MSG_EVENT, this.msgHandler, {capture: true});\n    }\n\n    /**\n     * manual unregister function, to unregister as broker from the current\n     * scope\n     */\n    unregister() {\n        this.rootElem.removeEventListener(Broker.EVENT_TYPE, this.msgHandler)\n        this.rootElem.removeEventListener(this.MSG_EVENT, this.msgHandler)\n    }\n\n\n    /**\n     * broadcast a message\n     * the message contains the channel and the data and some internal bookkeeping data\n     *\n     * @param channel the channel to broadcast to\n     * @param message the message dot send\n     * (for instance 2 iframes within the same parent broker)\n     */\n    broadcast(channel: string, message: Message | string) {\n        if('string' == typeof message) {\n            message = new Message(message);\n        }\n        //message.message = this.crypto.encode(message);\n        //message.encoded = true;\n\n        if(this?.subjects[channel]) {\n            let messageWrapper = new MessageWrapper(channel, message);\n            if(!messageWrapper.detail.encoded) {\n                messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n                messageWrapper.detail.encoded = true;\n            }\n            this.subjects[channel].next(messageWrapper);\n        }\n\n        try {\n            this.dispatchUp(channel, message, false, true);\n            //listeners already called\n            this.dispatchDown(channel, message, true, false)\n        } finally {\n            this.gcProcessedMessages();\n        }\n    }\n\n    private dispatchUp(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.markMessageAsProcessed(message);\n        if (window.parent != null) {\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            window.parent.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        }\n        if (callBrokerListeners) {\n            Broker.dispatchSameLevel(channel, message);\n        }\n    }\n\n    private static dispatchSameLevel(channel: string, message: Message) {\n        let event = Broker.transformToEvent(channel, message, true);\n        //we also dispatch sideways\n        window.dispatchEvent(event);\n    }\n\n    //a dispatch of our own should never trigger the listeners hence the default true\n    private dispatchDown(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        let evt = Broker.transformToEvent(channel, message);\n\n        /*we now notify all iframes lying underneath */\n        Array.prototype.slice.call(document.querySelectorAll(\"iframe\")).forEach((element: HTMLIFrameElement) => {\n            let messageWrapper = new MessageWrapper(channel, message);\n            element.contentWindow.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        });\n\n        Array.prototype.slice.call(document.querySelectorAll(\"[data-broker='1']\")).forEach((element: HTMLElement) => element.dispatchEvent(evt))\n\n        if (callBrokerListeners) {\n            Broker.dispatchSameLevel(channel, message);\n        }\n    }\n\n\n    private msgCallListeners(channel: string, message: Message) {\n        let listeners = this.messageListeners[channel];\n        if (listeners?.length) {\n            let callElement = (element: (msg: Message) => void) => {\n                element(message);\n            }\n\n            listeners.forEach(callElement);\n        }\n    }\n\n    private static transformToEvent(channel: string, message: Message, bubbles = false): CustomEvent {\n        let messageWrapper = new MessageWrapper(channel, message);\n        messageWrapper.bubbles = bubbles;\n        return Broker.createCustomEvent(Broker.EVENT_TYPE, messageWrapper);\n    }\n\n    private static createCustomEvent(name: string, wrapper: MessageWrapper): any {\n        if ('function' != typeof window.CustomEvent) {\n            let e: any = document.createEvent('HTMLEvents');\n            e.detail = wrapper.detail;\n            e.channel = wrapper.channel;\n            e.initEvent(name, wrapper.bubbles, wrapper.cancelable);\n            return e;\n\n        } else {\n            let customEvent = new window.CustomEvent(name, wrapper);\n            (<any>customEvent).channel = wrapper.channel;\n            return customEvent;\n        }\n\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a dom broker\n */\nexport class BrokerFactory {\n    private scopeElement: HTMLElement | Window | ShadowRoot = window;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n\n    withScopeElement(scopeElement: HTMLElement | Window | ShadowRoot): BrokerFactory {\n        this.scopeElement = scopeElement;\n        return this;\n    }\n\n    withChannelGroup(channelGroup: string): BrokerFactory {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BrokerFactory {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): Broker {\n        return new Broker(this.scopeElement, this.channelGroup, this.crypto);\n    }\n\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    get shallowCopy(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    get deepCopy(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param keys\n     */\n    append(...keys): IValueHolder<any> {\n        let noKeys = keys.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = keys[keys.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...keys).isPresent();\n        this.buildPath(keys);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...keys).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...keys).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    appendIf(condition: boolean, ...keys): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...keys);\n    }\n\n    assign(...keys): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    assignIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...keys) : {value: null};\n    }\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param keys a sequential array of keys containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","import {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/*\n * Promise wrappers for timeout and interval\n */\nexport function timeout(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setTimeout(() => apply(), timeout);\n    }, () => {\n        if (handler) {\n            clearTimeout(handler);\n            handler = null;\n        }\n    });\n}\n\nexport function interval(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setInterval(() => {\n            apply();\n        }, timeout);\n    }, () => {\n        if (handler) {\n            clearInterval(handler);\n            handler = null;\n        }\n    });\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //let func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n            if (fn.catch) {\n                let funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            let fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < this.total;\n    }\n\n    next(): number {\n        return Math.min(this.value++, this.total - 1);\n    }\n\n    reset(): void {\n        this.value = 0;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    filteredNext: T = null;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this.filteredNext = next;\n                return true;\n            } else {\n                this.filteredNext = null;\n            }\n        }\n        return this.filteredNext != null;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let ret = this.filteredNext;\n        this.filteredNext = null;\n        //We have to call hasNext, to roll another\n        //prefetch in case someone runs next\n        //sequentially without calling hasNext\n        this.hasNext();\n        return ret;\n    }\n\n    reset(): void {\n        this.filteredNext = null;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveCurrentNext() || this.resolveNextNext();\n    }\n\n    private resolveCurrentNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next());\n            if (Array.isArray(mapped)) {\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\n            } else {\n                this.activeDataSource = mapped;\n            }\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        return this.activeDataSource.next();\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, {[key: string]: S} > {\n    finalValue: {[key:string]: any} = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string> element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = 0;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//poliyfill from @webcomponents/webcomponentsjs\nimport {DomQuery} from \"./DomQuery\";\n\nif (\"undefined\" != typeof window) {\n    (function () {\n        if (void 0 === window.Reflect || void 0 === window.customElements || (<any>window.customElements).polyfillWrapFlushCallback) return;\n        const a = HTMLElement;\n        (<any>window).HTMLElement = {\n            HTMLElement: function HTMLElement() {\n                return Reflect.construct(a, [], this.constructor)\n            }\n        }.HTMLElement, HTMLElement.prototype = a.prototype, HTMLElement.prototype.constructor = HTMLElement, Object.setPrototypeOf(HTMLElement, a);\n    })();\n}\n\n/**\n * beginning custom tag support\n *\n * This api is still experimental\n * and might be interwoven with DomQuery\n * so it is bound to change\n *\n * it follows a builder pattern to allow easier creations\n * with less code of custom tags\n */\nexport class TagBuilder {\n    tagName: string;\n    connectedCallback?: Function;\n    clazz?: CustomElementConstructor;\n    extendsType: CustomElementConstructor = HTMLElement;\n    theOptions: ElementDefinitionOptions | null;\n    markup: string;\n    disconnectedCallback?: Function;\n    adoptedCallback ?: Function;\n    attributeChangedCallback ?: Function;\n    observedAttrs: string[] = [];\n\n    // noinspection JSUnusedGlobalSymbols\n    static withTagName(tagName): TagBuilder {\n        return new TagBuilder(tagName);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withObservedAttributes(...oAttrs) {\n        this.observedAttrs = oAttrs;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withConnectedCallback(callback: Function) {\n        this.connectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withDisconnectedCallback(callback: Function) {\n        this.disconnectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAdoptedCallback(callback: Function) {\n        this.adoptedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAttributeChangedCallback(callback: Function) {\n        this.attributeChangedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withExtendsType(extendsType: CustomElementConstructor) {\n        this.extendsType = extendsType;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withOptions(theOptions) {\n        this.theOptions = theOptions;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withClass(clazz) {\n        if (this.markup) {\n            throw Error(\"Markup already defined, markup must be set in the class\");\n        }\n        this.clazz = clazz;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withMarkup(markup) {\n        if (this.clazz) {\n            throw Error(\"Class already defined, markup must be set in the class\");\n        }\n        this.markup = markup;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    register() {\n        if (!this.clazz && !this.markup) {\n            throw Error(\"Class or markup must be defined\")\n        }\n        if (this.clazz) {\n\n            let applyCallback = (name: string) => {\n                let outerCallback = this[name];\n                let protoCallback = (<any>this.clazz.prototype)[name];\n                let finalCallback = outerCallback || protoCallback;\n                if (finalCallback) {\n                    (<any>this.clazz.prototype)[name] = function () {\n                        if(outerCallback) {\n                            finalCallback.apply(DomQuery.byId(this));\n                        } else {\n                            protoCallback.apply(<any>this);\n                        }\n                    }\n                }\n            }\n\n            applyCallback(\"connectedCallback\");\n            applyCallback(\"disconnectedCallback\");\n            applyCallback(\"adoptedCallback\");\n            applyCallback(\"attributeChangedCallback\");\n\n            //TODO how do we handle the oAttrs?\n            if (this.observedAttrs.length) {\n                Object.defineProperty(this.clazz.prototype, \"observedAttributes\", {\n                    get(): any {\n                        return this.observedAttrs;\n                    }\n                });\n            }\n\n            window.customElements.define(this.tagName, this.clazz, this.theOptions || null);\n        } else {\n            let _t_ = this;\n            let applyCallback = (name: string, scope: any) => {\n                if (_t_[name]) {\n                    _t_[name].apply(DomQuery.byId(<any>scope));\n                }\n            };\n\n            window.customElements.define(this.tagName, class extends this.extendsType {\n                constructor() {\n                    super();\n                    this.innerHTML = _t_.markup;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                static get observedAttributes() {\n                    return _t_.observedAttrs;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                connectedCallback() {\n                    applyCallback(\"connectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                disconnectedCallback() {\n                    applyCallback(\"disconnectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                adoptedCallback() {\n                    applyCallback(\"adoptedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                attributeChangedCallback() {\n                    applyCallback(\"attributeChangedCallback\", this);\n                }\n\n            }, this.theOptions || null);\n        }\n    }\n}\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new window.DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (<any>window)?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","module.exports = __WEBPACK_EXTERNAL_MODULE__435__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export {DomQuery, ElementAttribute, DomQueryCollector, DQ} from \"./DomQuery\";\nexport {Lang} from \"./Lang\";\nexport {Config, Monad, IValueHolder, IFunctor, IMonad, IIdentity, Optional, ValueEmbedder} from \"./Monad\";\nexport {CancellablePromise, Promise, IPromise, PromiseStatus} from \"./Promise\";\nexport {XMLQuery, XQ} from \"./XmlQuery\";\nexport {Stream, LazyStream, IteratableConsumer, IStream} from \"./Stream\";\nexport {\n    ArrayStreamDataSource,\n    MappedStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    SequenceDataSource,\n    QueryFormStringCollector,\n    IStreamDataSource,\n    ICollector,\n    ArrayCollector,\n    AssocArrayCollector,\n    FormDataCollector,\n    QueryFormDataCollector,\n} from \"./SourcesCollectors\";\n\n\nexport {TagBuilder} from \"./TagBuilder\";\n\nexport {Message, Broker, BroadcastChannelBroker, Crypto, NoCrypto, Hash} from \"./Messaging\";\nexport {JSONCrypto, ExpiringCrypto} from \"./CryptoExtensions\";\n\n\n"],"names":["decode","data","encryptedData","JSON","parse","encode","stringify","JSONCrypto","timeout","parentCrypto","hashSum","gcCycleCnt","storedMessages","lastCall","currTime","Date","getTime","this","gcLimitReached","LazyStream","ofAssoc","filter","collect","AssocArrayCollector","rotatingEncoded","toString","Error","ExpiringCrypto","MAX_GC_CYCLES","encoded","Submittables","trim","Lang","objToArray","isString","equalsIgnoreCase","element","name","defaultVal","val","get","orElse","values","length","getAttribute","value","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","DEFAULT_JSF_WHITELIST","src","indexOf","rootNode","pos","_limits","Optional","isAbsent","foundElement","DomQuery","querySelectorAll","push","getAsElem","allElems","getIf","isTag","tagName","nodeName","toLowerCase","isPresent","absent","Stream","of","allMatch","el","checked","newChecked","eachElem","querySelectorAllDeep","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","item","childNodeArr","concat","childNodes","asArray","map","byId","ArrayCollector","selector","document","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","nodes","res","foundNodes","selectors","split","cnt2","levelSelector","id","includeRoot","subItems","reduce","reduction","defaultValue","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","stream","firstElem","isCandidate","first","inval","innerHtml","dispatchEvent","evt","elem","retArr","inVal","_mozMatchesSelector","toMatch","prot","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","matches","window","ownerDocument","i","filterSelector","matched","selectorStage","nodeSelector","func","len","each","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","appendTo","orElseLazy","theItem","loadScriptEval","defer","charSet","xhr","XMLHttpRequest","open","setRequestHeader","send","onload","responseData","setTimeout","responseText","replace","onerror","insertAfter","existingItem","existingElement","nextSibling","toInsertParams","insertElem","insertBefore","elseValue","parents","retSet","Set","lowerTagName","resolveItem","has","host","copyAttrs","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","attrName","ret","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","whilteListed","finalScripts","equi","execScrpt","itemType","evalText","text","innerText","go","substring","flatMap","sort","node1","node2","compareDocumentPosition","e","console","error","message","description","applyStyle","style","newSS","styleSheet","sheet","cssText","createTextNode","Array","prototype","forEach","child","execCss","click","fireEvent","addEventListener","listener","options","removeEventListener","eventName","nodeType","eventClass","createEvent","initEvent","synthetic","createEventObject","textContent","joinstr","text1","text2","encodeFormElement","toMerge","Config","target","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","append","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","inputValue","lazyStream","reduced","subNodes","from","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","DomQueryCollector","DQ","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","Object","assign","theArgs","nextSource","keys","nextKey","hasOwnProperty","NoCrypto","noEncryption","targetOrigin","creationDate","getMilliseconds","identifier","random","Message","channel","detail","bubbles","cancelable","composed","messageListeners","subjects","processedMessages","cleanupCnt","TIMEOUT_IN_MS","MSG_EVENT","crypto","registerListener","reserveListenerNS","msg","asSubject","reserveSubjectNS","subject","oldNext","broadcast","asObservable","Subject","unregisterListener","answer","request","BaseBroker","isAnswer","getAnswerId","messageId","Promise","resolve","reject","message2","clearTimeout","gcProcessedMessages","newProcessedMessages","key","messageStillActive","markMessageAsProcessed","EVENT_TYPE","broadCastChannelBrokerGenerator","BroadcastChannel","DEFAULT_CHANNEL_GROUP","brokerFactory","channelGroup","openChannels","msgListener","messageData","coreMessage","register","includeOrigin","msgString","messageWrapper","MessageWrapper","postMessage","unregister","close","BroadcastChannelBroker","broadCastChannelGenerator","withGeneratorFunc","generatorFunc","withChannelGroup","withCrypto","build","BroadcastChannelBrokerFactory","scopeElement","msgHandler","event","details","evtHandler","rootElem","Broker","capture","dispatchUp","dispatchDown","ignoreListeners","callBrokerListeners","msgCallListeners","parent","dispatchSameLevel","transformToEvent","contentWindow","listeners","createCustomEvent","wrapper","CustomEvent","customEvent","withScopeElement","BrokerFactory","_value","fn","Monad","currentPos","currKey","keyVal","arrPos","arrayIndex","getIfPresent","match","toJson","start","parseInt","resolver","newVal","alternative","ConfigEntry","root","shallowMerge","other","overwrite","withAppend","isArray","noKeys","lastKey","pathExists","buildPath","finalKeyArrPos","retVal","apply","appendIf","condition","assignIf","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","PromiseStatus","handler","CancellablePromise","setInterval","clearInterval","executor","status","PENDING","allFuncs","all","myapply","promiseCnt","myPromise","promises","__last__","finally","race","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","cancellator","cancel","total","SequenceDataSource","dataPos","ArrayStreamDataSource","filterFunc","filteredNext","inputDataSource","FilteredStreamDatasource","mapFunc","MappedStreamDataSource","resolveCurrentNext","resolveNextNext","activeDataSource","FlatMapStreamDataSource","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ofDataSource","dataSource","toAppend","onElem","strmR","startVal","val1","last","anyMatch","noneMatch","comparator","newArr","collector","ofStreamDataSource","isOverLimits","nextFilter","max","t","stop","value1","value2","el1","el2","Reflect","customElements","polyfillWrapFlushCallback","a","HTMLElement","construct","constructor","setPrototypeOf","extendsType","observedAttrs","withTagName","TagBuilder","withObservedAttributes","oAttrs","withConnectedCallback","callback","connectedCallback","withDisconnectedCallback","disconnectedCallback","withAdoptedCallback","adoptedCallback","withAttributeChangedCallback","attributeChangedCallback","withExtendsType","withOptions","theOptions","withClass","withMarkup","applyCallback","outerCallback","protoCallback","finalCallback","defineProperty","define","scope","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","serialized","XMLSerializer","serializeToString","parserErrorText","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ","module","exports","__WEBPACK_EXTERNAL_MODULE__435__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}