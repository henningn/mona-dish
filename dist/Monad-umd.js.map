{"version":3,"sources":["../src/main/typescript/Monad.ts"],"names":[],"mappings":"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","file":"Monad-umd.js","sourcesContent":["/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>> {\n    protected _value: T;\n\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (\"undefined\" != typeof mapped && mapped != null && mapped.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n\n    get value(): T {\n        return this._value;\n    }\n\n}\n\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    static fromNullable<T>(value?: T): Optional<T> {\n        return new Optional(value);\n    }\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    isPresent(): boolean {\n        return !this.isAbsent();\n    }\n\n    presentOrElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(this.getClass().fromNullable(elseValue));\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        var val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n        return <Optional<any>> val.flatMap();\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    private getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array ) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n\n}\n\n\n/**\n * helper class to allow write access to the config\n * in certain situations (after an apply call)\n */\nclass ConfigEntry<T> implements IValueHolder<T> {\n    rootElem: any;\n    key: any;\n    arrPos: number;\n\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        this.rootElem = rootElem;\n        this.key = key;\n        this.arrPos = (\"undefined\" != typeof arrPos) ? arrPos : -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this.rootElem[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this.rootElem[this.key][this.arrPos];\n        }\n        return this.rootElem[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this.rootElem[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this.rootElem[this.key][this.arrPos] = val;\n            return;\n        }\n        this.rootElem[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    apply(...keys: Array<any>): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        var retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            if (arr.length < length) {\n                for (var cnt = arr.length; cnt < length; cnt++) {\n                    arr.push({});\n                }\n            }\n        };\n\n\n        for (var cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config> val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config> this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                var arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    status = PromiseStatus.PENDING;\n\n    protected allFuncs: Array<any> = [];\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        var promiseCnt = 0;\n        var myapply: Function;\n\n        var myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        var executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (var cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        var promiseCnt = 0;\n        var myapply: Function;\n        var myreject: Function;\n\n        var myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n\n        var thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        var catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (var cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        var retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        var retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (var cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (var key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n\n    protected resolve(val?: any) {\n\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            var fn = this.allFuncs.shift();\n\n            var funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //var func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            var fn = this.allFuncs.shift();\n            if (fn.catch) {\n                var funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (var cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            var fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    private cancellator = () => {\n    };\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise> super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise> super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise> super.finally(executorFunc);\n    }\n}\n\n/*we do not implenent array, maps etc.. monads there are libraries like lodash which have been doing that for ages*/\n\n"]}